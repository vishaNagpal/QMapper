{"i": "5092274426871808", "t": "In a college library fines are issued according to the following condition\r                If return books exceeds the due date\r                Up to 5 days 20rs fine\r                6-10 days 50rs fine\r                >10 days 100rs fine\r                More than 30 days membership will be cancelled\rGet the  due date from the user and calculate"}
{"i": "5103608778457088", "t": "Write a program to get a string and to convert the 1st letter of it to uppercase ?"}
{"i": "5665917238247424", "t": "Write a program to create a sentence at runtime and count number of vowels in it ?"}
{"i": "5666558731878400", "t": "Write a program to calculate the following i want a c++program for this condition 1+4+9+16+\u2026.+100"}
{"i": "5101688458313728", "t": "Write a class stringOperation to check whether the characters entered by the user are same or not"}
{"i": "5706255571091456", "t": "write default and parameterized constructor accepting two variables"}
{"i": "5765388680822784", "t": "write a program to count number of prime number between two numbers entered by the user"}
{"i": "5664638411735040", "t": "write an abstract class with two member function NextDate and Leapyear. Nextdate to print next day and leap year to check whether the year is leap year"}
{"i": "5705453955710976", "t": "write a function called reverse to print the reverse of the digit entered by the user."}
{"i": "5709299897597952", "t": "write a program to implement following logic\rIf the price of the book in between 100 to 500 book is \u201cNormal Book\u201d\rIf the price is between 501 and 5000 book is \u201cCostly book\u201d\rIf greater than 5000 than book is \u201cprecious book\u201d"}
{"i": "5744765321609216", "t": "write a program to add all the non-diagonal elements of a 2D array."}
{"i": "5754121102557184", "t": "Write a program to implement following logic\rAn employee can be promoted if\ra) He has good communication skills\rb) He is good in training\rc) He is either good in programming or debugging."}
{"i": "5678313587605504", "t": "Design the classes for a Battleship Game. Write the attack function."}
{"i": "5673248478986240", "t": "Given two (binary) trees, return the first pair of non-matching leaves\r Tree 1: A, B, C, D, E, null, null\rTree 2: A, D, B\r Output: (E,B)"}
{"i": "5750859611766784", "t": "Find unique integers from list of integers# Question\r\n# Write a function that will return an array of integers that occur exactly once in a given array of integers.\r\n# e.g. For a list [1,2,3,5,2,2,3,4], return [1,5,4] since they appear once (order does not matter).\r\n\r\ndef once_integers(integers):Follow up:\rOptimize the code if input is sorted.# What if the input is sorted, such as [1,2,2,2,3,3,4,5], could the algorithm be further optimized\r\n# (e.g. space complexity)?\r\n\r\ndef once_integers_sorted(integers):"}
{"i": "5766535168655360", "t": "String Rotation. Given two string check if String1 is rotating match for String2# Given two strings. Write a function that will return true if one string is a rotation of the other string.\r\n# e.g. 'bca' and 'cab' are rotations of 'abc' and the function should return true\r\n# 'barbazfoo', 'oobarbazf' and 'rbazfooba' are rotations of 'foobarbaz'\r\n\r\ndef is_rotation(string1, string2):"}
{"i": "5120728585207808", "t": "why we need interface ( pure virtual function or abstract class) in c++?\rInstead of having abstract class we can have a base class with virtual function defined in it, and override that virtual function in derived class.\rwhat would be the advantage and disadvantage with the above approach ( except we can create the object of the base class)?"}
{"i": "5724387312402432", "t": "Write a program to check whether it is a valid binary tree or not. Check all test cases (e.g. No left Node case)."}
{"i": "5746174876188672", "t": "You are given a matrix of size n*m and need to count the number of submatrices which which have atleast k occurances of x and atleast two corner elements equal. Submatrices should have minimum two rows and two columns.\r Example:\r 1 2 3\r1 3 6\r22 1 33\r output: 4\r i.e\ra) \r 1 2 \r1 3\r  b) \r 1 2 3\r1 3 6\r c)\r 1 2 \r1 3\r22 1\r d) \r 1 3\r22 1"}
{"i": "5688860014018560", "t": "Consider that your office provides an app to book meeting rooms. You provide the start and end time of the meeting. The app list the available rooms for that slot and you select a room and confirm your booking.\r All meeting happen between 9am - 6pm.\r Write a method for getAvailableRooms(startTime, endTime). Use appropriate data structures."}
{"i": "5107967163629568", "t": "Can any one tell me how to initialize a char variable dynamically to hold any stringlength of unknown value."}
{"i": "5638103566909440", "t": "You have a web scraper that pulls car listing from Craiglist and other web sites. Design the system and API for the users to read the data.\rFollow-up : How will you scale your system?"}
{"i": "5655785410396160", "t": "Design a cache for larger objects(>1MB) using memcached. You need to use API provided by memcached(which has constraint of not using more than 1MB of data per key). API arememcache.set(key, value)\r\nmemcache.get(key)"}
{"i": "5769563925905408", "t": "Write a program that reads a maze from a file and outputs from 'X' to 'O'. Example,Input:\r\n##########\r\nX  #     #\r\n#  #  #  #\r\n#     #  O\r\n##########\r\n\r\n\r\nOutput:\r\n##########\r\n+++#+++++#\r\n# +#+ # +#\r\n# +++ # ++\r\n##########"}
{"i": "5634566124470272", "t": "Consider a string A containing exactly X characters. A variant of A, A(k), can be obtained by doing a cyclic shift of A starting from position k (0 <= k < X). The number of characters after the shift in A(k) will remain the same as they were in A. Every j-th character (0 <= j <= X-1) of A(k) is equal to (k+j)%X character of A. We will call A a classic word if there are exactly M positions k such that A(k) = A\r You are given array Q containing exactly R strings. For each permutation s = (s[0], s[1], ..., s[R-1]) of integers between 0 and R-1, inclusive, we can define a string generated by this permutation as a concatenation Q[s[0]] + Q[s[1]] + ... + Q[s[R-1]]. Find the number of permutations that generate classic words. All indices in this problem are 0-based\r Constraints\r Set Q will contain between 1 and 8 elements, inclusive. Each element will have 1 to 20 characters, inclusive\r M will be between 1 and 200, inclusive\r Input Format\r Line 1: comma separated strings representing set Q\r Line 2: Integer M\r Output Format\r Number of permutations that generate classic words\r Sample Input\r CD,QCCD,QC\r 2\r Sample Output\r 3\r Explanation\r The classic words are \"CDQCCDQC\" and \"QCCDQCCD\". Permutation 0, 1, 2 generates the first, and 1, 2, 0 and 2, 0, 1 generate the second"}
{"i": "5728213188739072", "t": "Your friend has invented a new compound consisting of N elements. However, he has forgotten the amount of each element that goes into the recipe.\r For N-1 pairs of elements, he remembers the proportion in which the elements within each pair should be added to the compound. Fortunately, these N-1 proportions are sufficient to restore the recipe of the entire compound.\r You are given N-1 proportions as String. Each String is formatted \"#<a> and #<b> as <p>:<q>\" (quotes for clarity), which means that the mass of element <a> divided by the mass of element <b> in the cocktail must be equal to <p>/<q> (all elements are 0-indexed). Print exactly N elements, where the first line is the mass of element 0 and second line is the mass of element 1 and so on... such that all the given proportions are satisfied and the total mass is as small as possible. The total mass must be greater than 0.\r Input\r Line 1: N\r Line 2 .. N: proportion_i\r Output\r N lines of masses, as stated in the problem statement\r Input Explanation\r Line 1: N, the number of elements\r Line 2 to line N: N-1 proportions, format described in the problem statement\r Output Explanation\r Output will contain exactly N lines, each line is the mass of the element such that all the given proportions are satisfied and the total mass is as small as possible. The total mass must be greater than 0.\r Sample Input\r 3\r #0 and #1 as 9:8\r #1 and #2 as 9:8\r Sample Output\r 81\r 72\r 64"}
{"i": "5732617140830208", "t": "Consider a social website SocialX, where friends connect to each other, just as they do on Facebook\r Friendship on SocialX is symmetric (if X is a friend of Z, then Z is also a friend of X) however not transient (if X and Z are friends and Z and Y are friends, then X and Y are not necessarily friends)\r The term \"k-joined\" is defined as follows. If two people are friends, they are called 1-joined. For k >= 1, two people X and Z are called (k+1)-joined if X and Z are k-joined, or if there exists a person Y such that X and Y are k-joined and Y and Z are friends.\r \"Approachable Score\" is defined as follows. If two people X and Z are not friends, then their Approachable Score is the fewest number of people (other than themselves) who must be removed from the network in order for X and Z to not be 3-joined. The higher the Approachable Score, the more likely it is that X and Z know each other.\r Given a set of friends containing exactly K elements, where K is the number of people in the network. People are numbered from 0 to K-1. The j-th character of the i-th element of friends is '1' if i and j are friends, and '0' otherwise. Return the Approachable Score for personX and personZ\r Constraints\r Set of friends will contain exactly K (1 < K < 41) elements, where each element will contain exactly K characters. Each character will either be '0' or '1'\r friends[i][j] will always be equal to friends[j][i] and friends[i][i] will always be equal to 0\r friend[personX][personZ] will be equal to 0 and personX will never be equal to personZ\r Input Format\r Line 1: comma separated K elements representing friends\r Line 2: Integer representing personX\r Line 3: Integer representing personZ\r Output Format\r Integer representing Approachable Score\r Sample Input\r 0100,1010,0101,0010\r 0\r 3\r Sample Output\r 1\r Explanation\r Either remove person 1 or person 2 to get an Approachable Score of 1 for person 0 and 3"}
{"i": "5683991668588544", "t": "count the duplicates in a array of strings??"}
{"i": "5673160297938944", "t": "Write test cases for refrigerator?"}
{"i": "5737503739871232", "t": "Find the largest and smallest number in a list. The list is stored as two sections, one in ascending order and the other in descending order.\r input [ 2 3 4 5 6 7 10 9 8 7]\rsmallest : 2\rLargest 10"}
