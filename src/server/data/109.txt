{"i": "5148659814498304", "t": "Given an array , find the element (say X) that has all the elements less that it to its left side and all the elements greater to it on its right side. \rThe left and right elements of X need not be in sorted form."}
{"i": "5719035229503488", "t": "Find the maximum consecutive 1's in an array of 0's and 1's.\rExample: \ra) 00110001001110 - Output :3 [Max num of consecutive 1's is 3]\rb) 1000010001  - Output :1 [Max num of consecutive 1's is 1]"}
{"i": "5662608821583872", "t": "Write test cases on Whatsapp group chat"}
{"i": "5700369100308480", "t": "How do you do performance review of your team members?"}
{"i": "5748366702018560", "t": "How are Epic and User Stories associated?"}
{"i": "5662862962851840", "t": "Explain Agile methodologies in detail."}
{"i": "5682123542364160", "t": "What methodologies you follow to execute work?"}
{"i": "5694453319729152", "t": "Explain any bold decisions that you have taken so far?"}
{"i": "5676554848829440", "t": "What are the achievement you have made?"}
{"i": "5191712566673408", "t": "Do you use Pareto charts? And why? What is the ratio associated with it?"}
{"i": "5736514739765248", "t": "How would you identify training needs in your team?"}
{"i": "5192669069312000", "t": "Object Oriented Design Problem\r --------------------------------\r Design an OO parking lot. What classes and functions will it have. It should say, full, empty and also be able to find spot for Valet parking. The lot has 3 different types of parking: regular, handicapped and compact.\r  Use Case:\r 1. Customer are given a ticket that they can use to redeem to get their vehicle back\u00a0\r 2. Parking spots come in three sizes, small, med, large\u00a0\r 3. Thee types of vehicles, small[Two Wheeler], med[Car], large[Bus]\u00a0\r \u00a0 \u00a0 -a small vehicle can park in a small, medium, and large spot\u00a0\r \u00a0 \u00a0 -a medium vehicle can park in a medium and large spot\u00a0\r \u00a0 \u00a0 -a large vehicle can park in a large spot\r 4. There are multiple entry gate to park vehicle. So Vehicle should asign nearest posible parking spot"}
{"i": "5121658764394496", "t": "You are given an array of integers. Find the minimum difference between two prime numbers(Positive or negative) in the array when present with minimum time complexity and provide the test data to test the this code."}
{"i": "5734664078622720", "t": "Given an array of integers, design an algorithm that moves all non-zero integers to the end of the array. Minimize the number of writes or swaps."}
{"i": "5678573483458560", "t": "Give a large multi MB byte file in memory, a system handles delete requests for segments typically of the order of bytes. The system has a constraint that individual purge requests of byte segments are expensive, so that the no. of purges are a minimum.\r Eg. a 5 MB file receives delete requests for offsets (1, 100), (250, 550),(1000, 1200), (400, 600), (800, 900), (1100, 1150)\r Effective delete requests - (1, 100) , (250, 600), (800, 900), (1000, 1200)\r The users of the system always go by the absolute byte ordering of the file. Eg. if byte 1 is deleted, the users of the system will reference the actual byte 2 as byte 2.\r What data structure would you use to store these intervals such that the following operations are efficient 1. Looking up an interval 2. Inserting a new interval that has no overlap with existing ones 3. Inserting a new interval that has partial overlaps with existing intervals. This would involve collapsing the existing intervals with the new interval to form a single large interval. Eg. Interval cache: {(1, 100), (250, 550), (1000, 1200)} , new interval : (400, 700) -> Interval cache: {(1,100), (250, 700), (1000, 1200)}"}
{"i": "5691275580801024", "t": "How to verify the string which contains alpha-bates,parenthesis and signglle/double quote\r  Ex: AB(CD{\"GH\"}) is valid \r \"A()B' is invalid"}
{"i": "5710871637524480", "t": "Implement multiple stacks using a single contiguous block of memory"}
{"i": "5714977894694912", "t": "Write an efficient solution to give the next best available slot in a parking lot given that you need to minimize the effort to park and exit from the lot."}
{"i": "5731716992860160", "t": "Write a program to implement event bus"}
{"i": "5638201998835712", "t": "Design and implement a sender and receiver system where there can be multiple senders and receivers subscribed to Topics. Each event generated at sender should be received by all receivers subscribed to that topic. Bonus if you can implement group mechanism at receiver side where event is received by one of the receiver in group and received by all groups subscribed to that Topic."}
{"i": "5669609886711808", "t": "Implement in-memory file system"}
{"i": "5739974872793088", "t": "In memory cache implementation which supports concurrent operations for PUT, GET and DELETE"}
{"i": "5663205553602560", "t": "Stream of news events come; Need to find top 5 news at any time. use suitable data structure as score of news can dynamically increase or decrease."}
{"i": "5667544544313344", "t": "Implement thread safe generic typed hashmap."}
{"i": "5679789764509696", "t": "Determine if a point is inside a 2D convex polygon"}
{"i": "5650129794105344", "t": "Design and write algo for a bowling game wherein multiple games could be played in parallel and the scores to be shown for each game.  \r Detailed question\r Design the entire bowling alley system. One bowling game will be played by multiple players on a single lane.\r During the game,players and their scores will be maintained and shown by the system and winner will be declared at the end of the game.\rLikewise multiple games can be played in parallel on multiple free lanes.\r Some rules about bowling:\rA game consists of ten sets\rIn each set,the player has two opportunities to knock down ten pins.\rThe score for a set is the total number of pins knocked down,plus bonuses for strikes and spares.\rA spare is when the player knocks down all ten pins in two tries.If there is spare the player gets 5 bonus points.\rA strike is when the player knocks down all ten pins on his/her first try.If there is a strike the player gets 10 bonus points.\rIn the final set a player who rolls a spare or a strike is allowed to roll the extra balls to complete the set.However only a maximum of three balls can be rolled in the final set."}
{"i": "5070619788967936", "t": "Design rubik\u2019s cube and its operation (all rotations and checking final state)"}
{"i": "5735749430280192", "t": "Generate square of numbers in an array example [1,3,5] should come out as [1,9,25]."}
{"i": "6285101383024640", "t": "Given an Array of N elements and Integer K, write a function that returns true if the sum of any 2 elements of Array is K, false otherwise."}
{"i": "5692396030394368", "t": "Write code to decode strings. For example, String str = \"3[a2[bd]g4[ef]h]\", the output should be \"abdbdgefefefefhabdbdgefefefefhabdbdgefefefefh\".\r My solution is as follows.public class StringDecoder {\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\t\r\n\t\tString s = \"3[a2[bd]g4[ef]h]\";\r\n\t\t\r\n\t\tSystem.out.println(decode(s));\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic static String decode(String s){\r\n\t\t\r\n\t\tif(s == null || s.length()==0) return s;\r\n\t\t\r\n\t\tint indexOfFirstNumber = findIndexOfFirstNumber(s);\r\n\t\tint indexOfFirstBracket = findIndexOfFirstBracket(s);\r\n\t\tint indexOfClosingBracket = findIndexOfClosingBracket(s, indexOfFirstBracket);\r\n\t\t\r\n\t\tif(indexOfFirstNumber == -1) return s;\r\n\t\t\r\n\t\tString subStr1 = s.substring(0, indexOfFirstNumber);\r\n\t\tString subStr2 = decode(s.substring(indexOfFirstBracket+1, indexOfClosingBracket));\r\n\t\tString subStr3 = decode(s.substring(indexOfClosingBracket+1, s.length()));\r\n\t\t\r\n\t\tint duplicates = Integer.parseInt(s.substring(indexOfFirstNumber, indexOfFirstBracket));\r\n\t\t\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\t\tsb.append(subStr1);\r\n\t\t\r\n\t\twhile(duplicates>0){\r\n\t\t\tsb.append(subStr2);\r\n\t\t\tduplicates--;\r\n\t\t}\r\n\t\t\r\n\t\tsb.append(subStr3);\r\n\t\t\r\n\t\treturn sb.toString();\r\n\t}\r\n\t\r\n\r\n\tpublic static int findIndexOfFirstNumber(String s){\r\n\t\t\r\n\t\tint index = -1;\r\n\t\tfor(int i=0; i<s.length(); i++){\r\n\t\t\t\r\n\t\t\tchar c = s.charAt(i);\r\n\t\t\tif(c>=47 && c<=58){\r\n\t\t\t\tindex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn index;\r\n\t}\r\n\t\r\n\tpublic static int findIndexOfFirstBracket(String s){\r\n\t\t\r\n\t\tint index = -1;\r\n\t\tfor(int i=0; i<s.length(); i++){\r\n\t\t\t\r\n\t\t\tchar c = s.charAt(i);\r\n\t\t\tif(c=='['){\r\n\t\t\t\t\r\n\t\t\t\tindex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn index;\r\n\t}\r\n\t\r\n\tpublic static int findIndexOfClosingBracket(String s, int indexOfBracket){\r\n\t\tint index = -1;\r\n\t\t\r\n\t\tint numberOfBracket = 1;\r\n\t\t\r\n\t\tfor(int i=indexOfBracket+1; i<s.length(); i++){\r\n\t\t\t\r\n\t\t\tchar c = s.charAt(i);\r\n\t\t\tif(c == '[') numberOfBracket++;\r\n\t\t\t\r\n\t\t\tif(c==']'){\r\n\t\t\t\tnumberOfBracket--;\r\n\t\t\t\tif(numberOfBracket==0){\r\n\t\t\t\t\tindex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn index;\r\n\t}\r\n}"}
