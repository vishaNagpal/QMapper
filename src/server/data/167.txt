{"i": "6231377232003072", "t": "How would you increase efficiency of a hive query?"}
{"i": "5191500956696576", "t": "What is distribute cache in Hadoop?"}
{"i": "6110155001298944", "t": "What do you mean by combiner?"}
{"i": "6260157002547200", "t": "After map phase partition, shifting, sorting happen. What does it mean?"}
{"i": "5935286380920832", "t": "What is input split in hadoop."}
{"i": "5661697870135296", "t": "As I interviewing for Big data position. Asked Hadoop question :-\r Difference between TextInput vs Key Value format in Hadoop."}
{"i": "5752353087029248", "t": "Design Bing search."}
{"i": "5705473384775680", "t": "How Solr/Lucene or Elasticsearch work? For what purpose are they used?"}
{"i": "5200090354417664", "t": "What's Hbase, Pig, used for? Why do we need Hbase if we can use Hive to query Hadoop?"}
{"i": "5639783336378368", "t": "What are different phases of Map reduce operation - I think they were looking for split, combiners, partitioners, sorting phases of whole map reduce stage."}
{"i": "5082983809679360", "t": "My interview was for big data position for their Search team. They were looking for person with good Hadoop skill set :-\r 1. Can you describe Hadoop Architecture? What are various components of it (Primary/Secondary namednodes, data node etc)? Explain working of each."}
{"i": "5980138187522048", "t": "String encoding-decoding question. Given a digit sequence, return no. of ways it can be decoded.\r    Mapping : A->1, B->2, Z->26\r    For ex : Given a string \"123\", based on the mapping it can be decoded to following ways :-\r    (1) 1,2,3 -> A,B,C   (2) 12,3  -> L,C   (3) 1,23  -> A,W"}
{"i": "6226351583395840", "t": "What is REST? Can you explain it by giving examples."}
{"i": "6577841003036672", "t": "Description\r A prospective CS student is investigating how many semesters it will take to graduate from a variety of different universities. Each university provides a list of required courses, their prerequisites, and when each course is offered. Given this information, determine the minimum number of semesters to graduate.\r Consider the following example. A student is required to take 4 courses, mt42, cs123, cs456, and cs789. mt42 is only offered in the fall semester and has no prerequisites. Similarly, cs123 is only offered in the spring semester and has no prerequisites. cs456 is only offered in the spring semester and has both cs123 and mt42 as prerequisites. Finally, cs789 is offered in both fall and spring and has cs456 as its only prerequisite. The shortest time to graduate is 5 semesters, by taking mt42 in the fall, cs123 in the next spring, cs456 the following spring (since it is not offered in the fall) and finally cs789 the following fall.\r For this problem, there are only two semesters, fall and spring. Always start counting semesters from the fall.\r In addition to the fall/spring scheduling issues, there is one slight complication. In order to keep the dormitories full, each university limits the number of courses that can be taken in any semester. This limit appears as part of the input data. The third example below illustrates this issue.\r Input\r There are one to twenty-five data sets, followed by a final line containing only the integers -1 -1. A data set starts with a line containing two positive integers n, 1 <= n <= 12, which is the number of courses in this data set and m, 2 <= m <= 6, which is the maximum number of courses that can be taken in any single semester. The next line contains the n course identifiers. Each is a 1-5 character string from the set {a-z, 0-9}. Following the course identifiers is the individual course information. This consists of n lines, one line for each course, containing the course identifier, semester offered ('F'=Fall, 'S'=Spring, 'B'=Both semesters), the number of prerequisite courses, p, 0 <= p <= 5, and finally p prerequisite course identifiers. The first example data set below corresponds to the problem described above.\r Output\r The output contains one line for each data set, formatted as shown in the sample output.\r Sample Input\r 4 6\rcs123 mt42 cs456 cs789\rmt42 F 0\rcs123 S 0\rcs456 S 2 cs123 mt42\rcs789 B 1 cs456\r3 6\rmath1 comp2 comp3\rcomp3 S 1 comp2\rmath1 S 0\rcomp2 F 1 math1\r4 3\rm10 m20 c33 c44\rm10 B 0\rm20 B 0\rc33 B 0\rc44 B 0\r-1 -1\rSample Output\r The minimum number of semesters required to graduate is 5.\rThe minimum number of semesters required to graduate is 4.\rThe minimum number of semesters required to graduate is 2."}
{"i": "5147331781459968", "t": "Is there a difference between the terms \"sibling\" and \"cousin\" of a specified node in a Binary Tree/ Binary Search Tree? If yes, then what?"}
{"i": "5743196216754176", "t": "A file contain 10 ip's of the different machine.\rWrite a shell script where a function will connect with this different machine and find the memory usage of a process in that machine.\r funct(filename, process x)"}
{"i": "6331750248611840", "t": "Sorted array of integers and key = 2. \rReturn index at which this key is present in the array.\r in=1,2,2,2,2,2,3,4,5,6,7,8,9,10"}
{"i": "5179080884355072", "t": "Find the first unique occurrence of a word in a file.\rThe function should return the first unique occurrence of  word taking file name as input.\r Also what will be the efficient data structure if the first no-repeating word is at the end of file."}
{"i": "5735022524891136", "t": "Design and implement LRU Cache."}
{"i": "5144234740940800", "t": "public class StringUtilities {\r\n    /**\r\n     * Count the maximum depth of parenthesis nesting, i.e. \"abc(123(xyz))m(((n)))o\" -> 3.\r\n     *\r\n     * @param input\r\n     *            any string\r\n     * @return deepest parenthesization level\r\n     * @throws IllegalArgumentException\r\n     *             if input is null or contains a mismatch \"a)b(c\" or \"a(b\"\r\n     */\r\n    public static int nestedParenthesisDepth(String input)\r\n            throws IllegalArgumentException {\r\n        //...\r\n    }\r\n}"}
{"i": "5695475640434688", "t": "Given an array and is rotated n number of times find the number where the peak happens. The array is sorted in increasing order. Follow up question: how will you rearrange them in normal sorted order."}
{"i": "5745559254073344", "t": "Array = {5, 2, 1}     circular rotate array,  calculate sum by multiplying each array elements with index and find minimum sum from all of rotated arrays.    Time Complexity should be O(n)\r         5x index + 2 x index + 1xindex  = Sum \r   Step 1:     5x1 + 2x2 + 1x3    =    5+4+3 ==>  12\r   Step 2: (rotate array)  {2,1,5}\r                 2x1 + 1x2 + 5x3   = 2+2+15  ==>   19 \r  Step 3:   (rotate array) { 1,5, 2}\r                1x1 + 5x2 + 2x3 = 1+10+ 6 ==>  17 \r Step 4:  (rotate array)  {5,2,1}  same as input array stop and print minimum sum  1.e  12"}
{"i": "5765154941698048", "t": "/*\r Tree:\r      1\r     / \\\r    3   5\r   / \\   \\\r  2   4   7\r / \\   \\\r9   6   8\r ==========\rExpected Output:\r1\r35\r247\r968\r*/\rclass TreePrinter {\r   static class Node {\r    int value;\r    Node left;\r    Node right;\r    public Node(int value, Node left, Node right) {\r      this.value = value;\r      this.left = left;\r      this.right = right;\r    }\r  }\r   public void printTree(Node root) {\r    // implementation here\r    }"}
{"i": "5119852580700160", "t": "/*Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die. Given a flowerbed (represented as an array containing booleans), return if a given number of new flowers can be planted in it without violating the no-adjacent-flowers rule\rSample inputs\r Input: 1,0,0,0,0,0,1,0,0\r 3 => true\r4 => false\rInput: 1,0,0,1,0,0,1,0,0\r 1 => true\r2 => false\rinput: 0\r 1 => true\r2 => false  */\r public boolean canPlaceFlowers(List<Boolean> flowerbed, int numberToPlace) {\r     // Implementation here\r}"}
{"i": "5180510672257024", "t": "Implement Priority Queue"}
{"i": "5650758051561472", "t": "Implement Least Recently Used Cache for IPAddress lookup. Assume max cache size is 1000 but it should scale well with larger number\rKey of the cache is server name and value is IPAddress."}
{"i": "5088113577689088", "t": "Given a string left rotate it by given number of times with O(n) solution"}
{"i": "5711402352246784", "t": "Given a array where each element is maximum +-k index away from it's sorted position, find an algorithm to sort such array."}
{"i": "6318940508651520", "t": "Identify the outputClass A {\r\n}\r\n\r\nClass B {\r\n}\r\n\r\nB b = new B();\r\nA a = (A) b;\r\nsysout(b.getClass());\r\nsysout(a.getClass());"}
{"i": "5184442177945600", "t": "Given Two classes A & B. How will B know if an instance of A is already created?"}
