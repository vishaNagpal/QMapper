{"i": "5196745773416448", "t": "Write a program to reverse a string"}
{"i": "5104909843169280", "t": "What is the output of following code snippet?public static void main(String[] args){\r\n    int[][] data = {{123},{4,5,6}};\r\n    int[][] copy = data.clone();\r\n    \r\n    copy[0][0] = 100;\r\n    \r\n    System.out.println(data[0][0]);\r\n    System.out.println(copy[0][0]);\r\n    \r\n    copy[1] = new int[]{300,400,500};\r\n    \r\n    System.out.println(data[1][1]);\r\n    System.out.println(copy[1][1]);\r\n }"}
{"i": "5761590881157120", "t": "What would be the output of below code snippet?class Super {\r\n    int index = 5;\r\n    public void printVal(){System.out.println(\"Super\");}\r\n}\r\n\r\nclass Sub extends Super {\r\n    int index = 2;\r\n    public void printVal(){System.out.println(\"Sub\");}\r\n}\r\n\r\npublic class OopTest {\r\n    public static void main(String[] args){\r\n        Super sup = new Sub();\r\n        System.out.println(sup.index + \" \");\r\n        sup.printVal();\r\n    }\r\n}"}
{"i": "5632783335555072", "t": "Given a binary tree of integers, write code to store the tree into a list of integers and recreate the original tree from a list of integers. \r Here's what your method signatures should look like (in Java): \r List<Integer> store(Node root)\rNode restore(List<Integer> list)\r Example Tree: \r     5\r  /  \\\r 3     2\r/     / \\\r1    6   1"}
{"i": "5204715219451904", "t": "What would be the result of executing the below code snippet?public class CountDownLatchDemo {\r\n    public static void main(String[] args)throws InterruptedException {\r\n        final CountDownLatch latch = new CountDownLatch(3);\r\n        latch.countDown();\r\n        latch.countDown();\r\n        new Thread(){\r\n            public void run(){\r\n                try{\r\n                    Thread.sleep(3000);\r\n                }catch(InterruptedException ex){\r\n                    ex.printStackTrace();\r\n                }\r\n                latch.countDown();\r\n            };\r\n        }.start();\r\n        System.out.println(\"Before\");\r\n        latch.await();\r\n        System.out.println(\"After\");\r\n    }\r\n}"}
{"i": "5728854640427008", "t": "How many elements will the set object in the below snippet will contain after the program executes to last print statement?public class ShortSetTest {\r\n    public static void main(String[] args){\r\n        Set shortSet = new HashSet();\r\n        for(short i = 0; i < 100; i++){\r\n            shortSet.add(i);\r\n            shortSet.remove(i-1);\r\n        }\r\n        System.out.println(shortSet);\r\n    }\r\n}"}
{"i": "5690209330003968", "t": "Will the following class compile?public class WildCardGeneric {\r\n    private static void add(List<? extends Number> list){\r\n        list.add(4);\r\n        list.add(8);\r\n        System.out.println(list.get(0));\r\n    }\r\n}"}
{"i": "5727410055020544", "t": "What would the output of the following snippet?public class TrickyNum<X extends Number> {\r\n    private X x;\r\n    public TrickyNum(X x){\r\n        this.x = x;\r\n    }\r\n    private double getDouble(){\r\n        return x.doubleValue();\r\n    }\r\n    public static void main(String[] args) {\r\n        TrickyNum<Integer> a = new TrickyNum<Integer>(new Integer(1));\r\n        System.out.println(a.getDouble());\r\n    }\r\n}"}
{"i": "5679892013252608", "t": "For a given array, find the subarray (containing at least k number) which has the largest sum. \rExample:\r// [-4, -2, 1, -3], k = 2,   return   -1,  and the subarray is   [-2, 1]\r// [1, 1, 1, 1, 1, 1], k = 3, return   6, and the subarray is  [1, 1, 1, 1, 1, 1]\rtry to do it in O(n) time \rFollowup, if input is stream, how to solve it \rpublic int maxSubArray(int[] nums, int k) {}"}
{"i": "6319415327981568", "t": "Question 2: Write code for the following: given a text file containing this information (Date the customer logged-in, Tab, Customer ID)  Example: 04/11/2017 \\t 0003  04/12/2017 \\t 0003  04/13/2017 \\t 0004  04/13/2017 \\t 0003 04/13/2017 \\t 0003 04/15/2017 \\t 0004  \r How to get the list of those customers that log in on four consecutive days? \r Please give good solution"}
{"i": "5747579221442560", "t": "Question 1: Given input file with the following set of strings,  Download input file: https://www.google.com/basepages/producttype/taxonomy.en-US.txt \r Example: Electronics Electronics > Arcade Equipment Electronics > Arcade Equipment > Basketball Arcade Games Electronics > Arcade Equipment > Pinball Machine Accessories Electronics > Arcade Equipment > Pinball Machines Electronics > Arcade Equipment > Skee-Ball Machines Electronics > Arcade Equipment > Video Game Arcade Cabinet Accessories Electronics > Arcade Equipment > Video Game Arcade Cabinets Electronics > Audio Electronics > Audio > Audio Accessories Electronics > Audio > Audio Accessories > Audio & Video Receiver Accessories Electronics > Audio > Audio Accessories > Headphone & Headset Accessories Electronics > Audio > Audio Accessories > Headphone & Headset Accessories > Headphone Cushions & Tips Electronics > Audio > Audio Accessories > Karaoke System Accessories \r write a function that stores this information.  Your data structure should be able to provide information as  Electronics = 14  Electronics  > Arcade Equipment =  7 Electronics > Arcade Equipment > Video Game Arcade Cabinets = 1 Electronics > Arcade Equipment > Skee-Ball Machines = 1"}
{"i": "5646563067035648", "t": "What happens when you try to compile below class?public class EnumTest {\r\n    public EnumTest(){\r\n        System.out.println(\"Inside Constructor\");\r\n    }\r\n    public void printType(){\r\n        enum PrinterType {DOT,INK,LASER}\r\n    }\r\n}"}
{"i": "5652344898322432", "t": "Given below code snippet, what would be the output?public class DemoThread extends Thread {\r\n    private int x = 2;\r\n    public static void main(String[] args) throws Exception {\r\n        new DemoThread().method();\r\n    }\r\n    public DemoThread(){\r\n        System.out.println(\"test\");\r\n        x = 5;\r\n        start();\r\n    }\r\n    public void method() throws Exception {\r\n        join();\r\n        x = x - 1;\r\n        System.out.println(x);\r\n    }\r\n    public void run(){\r\n        System.out.println(\"run\");\r\n        x *= 2;\r\n    }\r\n}"}
{"i": "5724284392570880", "t": "For code snippet given below, what would be the output?String s8 = \"AB\";\r\n        String s9 = s8.intern();\r\n        if(s9.equals(s8) && s9 == s8)\r\n            System.out.println(\"All Equal\");\r\n        if(s9.equals(s8) && s9!=s8)\r\n            System.out.println(\"equals Equal\");\r\n        if(!s9.equals(s8) && s9==s8)\r\n            System.out.println(\"== Equal\");\r\n        if(!s9.equals(s8) && s9!=s8)\r\n            System.out.println(\"Nothing Equal\");"}
{"i": "5084168372355072", "t": "Find the label with max width of a tree. \r// 0      A\r//         /|\\\r// 1    B C D\r//       /| |  \\\r// 2    E F G   H\rAnswer is 2 here."}
{"i": "5177437882155008", "t": "find maximum contiguous subarray sum with size (the number of the element in the subarray) <= k\ra brute force method is very simple, can you do it better?\rpublic int maxSum(int[] nums, int k){\r}"}
{"i": "5173759511101440", "t": "I want to learn some big words so people think I'm smart.\r I opened up a dictionary to a page in the middle and started flipping through, looking for words I didn't know. I put each word I didn't know at increasing indices in a huge array I created in memory. When I reached the end of the dictionary, I started from the beginning and did the same thing until I reached the page I started at.\r Now I have an array of words that are mostly alphabetical, except they start somewhere in the middle of the alphabet, reach the end, and then start from the beginning of the alphabet. In other words, this is an alphabetically ordered array that has been \"rotated.\" For example:\r   String[] words = new String[]{\r    \"ptolemaic\",\r    \"retrograde\",\r    \"supplant\",\r    \"undulate\",\r    \"xenoepist\",\r    \"asymptote\", // <-- rotates here!\r    \"babka\",\r    \"banoffee\",\r    \"engender\",\r    \"karpatka\",\r    \"othellolagkage\",\r};\r Write a function for finding the index of the \"rotation point,\" which is where I started working from the beginning of the dictionary. This array is huge (there are lots of words I don't know) so we want to be efficient here."}
{"i": "5656534370484224", "t": "// Read4K - Given a function which reads from a file or\r// network stream up to 4k at a time, give a function which\r// which can satisfy requests for arbitrary amounts of data\rprivate int read4K(char[] buf) {\r  // GIVEN\r}\r // IMPLEMENT:\rpublic int read(char[] buf, int toRead) { }\r Due to network latency, if the read4K method return a value < 4k, it does not necessarily mean that we reach the End of File (EOF), in this case, you should continue to read the file until you reach toRead or EOF."}
{"i": "4871225370214400", "t": "Design entity(model) structure of a file systems. You don't have to write any interfaces, just various models and their properties."}
{"i": "5665596348825600", "t": "You have to desing a system for a shop kepper to keep his/her inventory managed. He/she have furniture at the begining, but he may add more items to it. His/her furnitures are wood char, wood table, steel chair, etc.\rEach furniture have one property, a boolean one, called isChildSafe. \r  Later, he said, what if the shopkeeper wants to add new type of items, such as phone or may be something else, and he/she might also wants to add two new properties, such as isFireSafe, isWaterSafe etc.\r How would you design extend to these types."}
{"i": "5162630311313408", "t": "You have to design a job scheduler. The job schedular should be able to accept all kind of jobs, small or long running. Multiple systems might be adding jobs to it and multiple systems should be able to execute jobs simultaneously.\rPlease list down the components and data flows between them, what kind of interfaces you will be having, what kind of retry logic you will be providing, storage and middle tier design was also asked."}
{"i": "5085709728743424", "t": "You are given set of strings, You have return anagrams subsets from it. An anagram set is that one where every string is an anagram of another string. If the subset contains only one string, don't include that in the result."}
{"i": "5181088604356608", "t": "You are given a NxN boolean matrix, where matrix(i,j) will be one if 'i' is a parent of 'j' in a tree, otherwise, it is zero.\rConstruct this tree."}
{"i": "4904590152564736", "t": "Design/Implement an LRU cache so that Read/Write/Find operation only takes constant time.\r Now, Let's say, we will be considering the frequency as well. It means to keep the most used processes and in a case of the tie, use lease recently used to remove an element. \r Now, as this new algorithm can cause many hits, or no new process will come to the cache if the last process of the cache has two hits., What can you do to prevent this, and how would you implement that."}
{"i": "5655840062177280", "t": "how to keep track of the sum in a sliding window for the data that are on disk \rrather than memory"}
{"i": "5753762363736064", "t": "Insert a node in a complete binary tree efficiently.\rit is not BST, it is just a regular binary tree\rpublic TreeNode insert(TreeNode root, int val){\r}\rthis my solution using bfs (O(n) time), is there any more efficient method?import java.util.*;\r\nclass TreeNode{\r\n    int val;\r\n    TreeNode left;\r\n    TreeNode right;\r\n    public TreeNode(int val){\r\n        this.val = val;\r\n    }\r\n}\r\nclass Solution{\r\n    public TreeNode insertCompleteTree(TreeNode root, int val){\r\n        if(root == null){\r\n            return new TreeNode(val);\r\n        }\r\n        Queue<TreeNode> q = new LinkedList<>();\r\n        q.add(root);\r\n        while(!q.isEmpty()){\r\n            int size = q.size();\r\n            for(int i = 0; i < size; i++){\r\n                TreeNode cur = q.remove();\r\n                if(cur.left == null){\r\n                    cur.left = new TreeNode(val);\r\n                    return root;\r\n                }else{\r\n                    q.add(cur.left);\r\n                }\r\n                if(cur.right == null){\r\n                    cur.right = new TreeNode(val);\r\n                    return root;\r\n                }else{\r\n                    q.add(cur.right);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public List<List<Integer>> levelOrder(TreeNode root) {\r\n        List<List<Integer>> res = new ArrayList<>();\r\n        if(root == null){\r\n            return res;\r\n        }\r\n        Queue<TreeNode> q = new LinkedList<>();\r\n        q.add(root);\r\n        while(!q.isEmpty()){\r\n            int size = q.size();\r\n            List<Integer> list = new ArrayList<>();\r\n            for(int i = 0; i < size; i++){\r\n                TreeNode cur = q.remove();\r\n                list.add(cur.val);\r\n                if(cur.left != null){\r\n                    q.add(cur.left);\r\n                }\r\n                \r\n                if(cur.right != null){\r\n                    q.add(cur.right);\r\n                }\r\n            }\r\n            res.add(list);\r\n        }\r\n        return res;\r\n    }\r\n    public static void main(String[] args){\r\n        Solution s = new Solution();\r\n        TreeNode root = null;\r\n        int[] nums = {1, 2, 3, 4, 5, 6, 7};\r\n        for(int num : nums){\r\n            root = s.insertCompleteTree(root, num);\r\n            System.out.println(s.levelOrder(root));\r\n        }\r\n    }\r\n}"}
{"i": "5688702199136256", "t": "A table has some number of balls at various positions on a line segment. \rAll are moving with same speed in one or the other direction. \rWherever a collision occurs they change direction. \rA ball falls from the edges of the table. \rFind the time when all balls fall of the table \rgiven initial position of each ball and speeds"}
{"i": "5123528929050624", "t": "given a graph: example -> A company holds 10% of B company\u2019s share, \rB company holds 5% of C company\u2019s share, A company holds 2% of C company\u2019s share, \rwhat percent of C company\u2019s share does A company hold?"}
{"i": "5725580264734720", "t": "// Design and implement key value system\r\n//\r\n// string -> string\r\n// Insert a key-value pair or modify a value\r\nvoid put(string key, string value);\r\n\r\n// Delete a key-value pair\r\nvoid delete(string key);\r\n\r\n// Gets a value given a snapshot\r\nstring get(string key, Snapshot snap);\r\n\r\n// Take a snapshot\r\nSnapshot takeSnapshot();\r\n\r\n// Delete a snapshot\r\nvoid deleteSnapshot(Snapshot snap);\r\n\r\n// put(k1,v1)\r\n// put(k2,v2)\r\n// put(k3,v3)\r\n// takeSnapshot -> snap1 { k1 -> v1, k2 -> v2, k3 -> v3 }\r\n// get(k1,snap1) -> v1\r\n// put(k1,v4)\r\n// delete(k3)\r\n// takeSnapshot -> snap2 { k1 -> v4, k2 -> v2 }\r\n// get(k1,snap2) -> v4\r\n// get(k1,snap1) -> v1\r\n// get(k3,snap2) -> XX\r\n// deleteSnapshot(snap1)\r\n// get(k1,snap1) -> XX\r\n\r\n// Space efficient is more important than time efficient, thus please use as small space as possible."}
{"i": "6322517502328832", "t": "Insert node with a given value in a circular sorted linked list."}
