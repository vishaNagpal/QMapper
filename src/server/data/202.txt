{"i": "5658407663042560", "t": "We have array of strings. Go through each element of array and eliminate duplicates if any string is having. You have to save in the same array."}
{"i": "5107825470603264", "t": "How do a free() knows how much memory has to be free.Suppose \rint *p=(int*)malloc(sizeof(int)*100);\rafter some operation,\rfree(p);\rNow how free() function knows from where to where memory has to be free?"}
{"i": "5714998152134656", "t": "Write test cases for one command from each category(db related):\r DDL command\rDML command\r and also, for\rSelect command"}
{"i": "5676796297084928", "t": "How would you implement virtual functions in C"}
{"i": "5767681294729216", "t": "How would you implement virtual functions in C?"}
{"i": "5181370343096320", "t": "How would you access private data member in a class? This class is defined in a library which you cannot modify. There are no friend functions."}
{"i": "5694426332528640", "t": "How to implement virtual functions in C?"}
{"i": "5080716844990464", "t": "Write a method that takes an int as input and outputs an int with the digits of the input in reverse, i.e. 12345 -> 54321."}
{"i": "5640653073547264", "t": "Write a function to determine if a binary tree is a true binary search tree and give the average performance of the function."}
{"i": "5688911997173760", "t": "Design an elevator system for a high rise building."}
{"i": "5701462562701312", "t": "Design an alarm clock."}
{"i": "5717613116129280", "t": "A Load Balancer has the following functions:getHost()\r\naddHost(String)\r\nremoveHost(String)Implement these functions using any data structure you wish. Also indicate the average performance for each function and what you expect to be its call count in a typical system with respect to each other of the three functions. In other words, how often do you expect getHost() to be called compared to addHost(...)?\r Constraints:\r Hosts are unique.\rgetHost() returns a random host from the host group"}
{"i": "5764087749279744", "t": "3.There is a NXM grid of pixels,and each pixel is represented by 3 bits,1 each for R,G and B color values.You are given the address of beginning of grid in a character pointer,and a position x,y on the grid.You have to change that positions bits to some other given bits."}
{"i": "5741426562301952", "t": "int a ;\r\nint main()\r\n{ \r\n    printf(\"%u\\n\",&a);}\rwhat will be the o/p of the above code if we run it 5 times, will it be same every time or not?"}
{"i": "5721098884743168", "t": "Given an input n, find the smallest number x such that x % n = 0 and sum of the digits in x is equal to n.\rNote: x is so large even long long int can't keep it.\r It is obvious that find the sum of digits using (x/10) gives timeout, so how can its complexity be reduced."}
{"i": "5652621536788480", "t": "write a function for a BST to implement best case search.If exact search key not available in BST then return best suited key.Ex- if a tree has keys 21 15 26 30 55 7 and if my search key is 25 then this function should return 26."}
{"i": "5687245684080640", "t": "Write a program to find the smallest number that can be formed by 0 and 9 which is divisible by a given number.\rFor example, if given number is 3 output should be 9,\rif given number is 2 output is 90, \rif given number is 10 output is 90,"}
{"i": "5692219524644864", "t": "Write a program to find the smallest number that can be formed by 0 and 9 which is divisible by a given number.\rFor example, if given number is 3 output should be 9,\rif given number is 2 output is 90, \rif given number is 10 output is 90,\rif given number is 7 output is 10^23."}
{"i": "5692687038545920", "t": "Suppose that each row of an n x n array A consists of 1's and D's such that, in any\rrow i of A, all the 1's come before any D's in that row. Suppose further that the\rnumber of 1's in row i is at least the number in row i+ 1, for i= 0, 1, ... .n - 2.\rAssuming A is already in memory, describe a method running in O(n) time (not\rO(n2) time) for counting the number of 1's in the array A."}
{"i": "5683649722712064", "t": "We have two strings A and B with the same super set of characters. We need to change these strings to obtain two equal strings. In each move we can perform one of the following operations:\r   1- swap two consecutive characters of a string\r  2- swap the first and the last characters of a string\r  A move can be performed on either string.\rWhat is the minimum number of moves that we need in order to obtain two equal strings?\rInput Format and Constraints:\rThe first and the second line of the input contains two strings A and B. It is guaranteed that the superset their characters are equal.\r1 <= length(A) = length(B) <= 2000\rAll the input characters are between 'a' and 'z'\r  Output Format:\rPrint the minimum number of moves to the only line of the output\r   Sample input:\raab\rbaa\r  Sample output:\r1\r  Explanation:\rSwap the first and last character of the string aab to convert it to baa. The two strings are now equal."}
{"i": "5754870212591616", "t": "Difference between a crash and exception.\r Difference between macros and inline functions.\r Mfc: message maps and virtual functions.\r Different calling convention.\r Late n early binding...\r Garbage collector algorithm. When gc will fail to clean the memory.\r How to know heap size, crash dump analysis, What is a stack n how to know stack memory size.\rCommands in windbg.\r Questions on Critical section, mutex, semaphores. Can we use mutex in single process and how?\r Working of MSIL and JIT COMPILER.\r Can a C# code, use c++ code and call kernel functions like createfile.\r Areas: dot net, oops, operating systems, thread synchronization.\r Difference in execution steps of c++ and c# code"}
{"i": "5738331535048704", "t": "How to impliment Google map\rData Structure and algorithm.\r 1. Zoom in/out\r2. horizontal/ vertical.\r Assumtion - all the image of earth with pixel\\Any other assumption is allowed"}
{"i": "5766134468968448", "t": "How google map implemented ? zoom in , zoom out, moving horizontal and moving vertically.\rGive data Structure and algorithm.\rGiven all the data from satellite which revolve around earth in spiral way."}
{"i": "5154085254725632", "t": "Given ten million numbers, each having 11 bits, find the most time efficient way to sort the numbers."}
{"i": "5649767531020288", "t": "Given an array and a number, find two integers that sums to the given number."}
{"i": "5757098663084032", "t": "How to test a website which is selling shoes?"}
{"i": "5668983114039296", "t": "Given a array\r{{ 4,7,3,6,7}}\r construct a triangle like\r{{81}}\r{{40,41}}\r{{21,19,22}}\r{{11,10,9,13}}\r{{ 4,7,3,6,7}}"}
{"i": "5725946191544320", "t": "Find the largest sum contiguous sub array. The length of the returned sub array must be at least of  length 2."}
{"i": "5735506788745216", "t": "Given an unsorted array of ints,sort the shortest sub-array which results in sorting of the whole array.\r Ex: \r\ti/p: [-1,0,4,3,2,1,7,8,9]\r\tBy sorting sub array [4,3,2,1] the whole Array is sorted.\r \ti/p: [10, 15, 20, 30, 25, 40, 35, 45, 50, 60]\r\tBy sorting sub array [30, 25, 40, 35] the whole Array is sorted.\r \ti/p: [-1,0,4,3,2,1,7,8,9,-2]\r\tShortest sub-arry to be sorted is [-1,0,4,3,2,1,7,8,9,-2]"}
{"i": "5744535078436864", "t": "Given a Tree (binary  and unbalanced)\r Find all the nodes in that tree which are 'n' levels up the leaf node...\r Eg:\r A->root\rA.left=B\rA.right=C\rB.left=D\rB.right=E\rC.right=F\rD.right=G\r then \r if 'n' as described in the above problem statement, is say n=2\r then \r answer should be :\r B(2 nodes up from G), A(2 nodes up from E & F)\r hence ans is B,A\r  My Algo was;\r 1)Perform a DFS (left,middle, right)\r2) when leaf node is encountered.. just move the stack pointer (without poping or jsut coy the stack of DFS to another stack and perform a real time pop operation) by 'n' times and then just print the node which it encounters.\r  code:\r int n=2;\rStack treeStack = new Stack();\r function find(){\r treeStack .push(rootnode);\r performDFS();\r }\r function performDFS(){\r if(currnetnode.left==null && currentnode.right==null){\r // this is a leaf node.\rStack tmpStack=copyStack(treeStack);\r // hard coded logic(two pop operations) without using a loop since i am usnig n=2 in  //this example\rtmpStack.pop();   // pop 1st element\relement = tmpStack.pop();   // print the 2nd element \rprint(element);\r }\rif(currnetnode.left!=null)\rtreestack.push(currentnode.left);\r if(currnetnode.right!=null)\rtree.stack.push(currentnode.right);\r  }"}
