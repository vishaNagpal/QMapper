{"i": "10220131", "t": "Tell about the differences between Microsoft's COM and Java RMI."}
{"i": "10220130", "t": "Design an algorithm for chatting between two clients. What about your procedure's scalability?"}
{"i": "10257695", "t": "Find an anagram do it in 0(n+m) complexity."}
{"i": "10248098", "t": "Given a Binary tree find total number of clusters in a binary tree.\r Cluster Definition: Assume there are two colors of node RED and BLUE. A start of cluster is when root, left and right have same color Node."}
{"i": "10244832", "t": "Partition a set of numbers into two such that difference between their sum is minimum, and both sets have equal number of elements.\r For example: {1, 4, 9, 16} is partitioned as {1,16} and {4,9} with diff = 17-13=4.\r Does greedy work here? First sorting, and then picking smallest and largest to fall in set 1, and picking 2nd smallest and 2nd largest to fall in set 2. \r I was asked to prove which I failed :("}
{"i": "10226099", "t": "What is wrong with following code?#include<cstdio>\r\nusing namespace std;\r\n\r\nclass Lock {\r\npublic:\r\n\tLock():isLooked(false) { }\r\n\tbool AcquireLock() { return isLooked ? false : (isLooked=true);}\r\n\tvoid ReleaseLock() {isLooked = false; }\r\nprivate:\r\n\tbool isLooked;\r\n};\r\n\r\ntemplate <typename T> \r\nclass Singleton {\r\nprivate:\r\n\tstatic Lock lock;\r\n\tstatic T* object;\r\nprotected:\r\n\tSingleton() { };\r\npublic:\r\n\tstatic T * Instance();\r\n};\r\n\r\ntemplate <typename T>\r\nT * Singleton<T>::Instance(){\r\n\tif (object == 0) {\r\n\t\tif(lock.AcquireLock()){\r\n\t\t\tobject = new T;\r\n\t\t\tlock.ReleaseLock();\r\n\t\t}\r\n\t}\r\n\treturn object;\r\n}\r\n\r\n\r\nint main() {\r\n\tint* singleton_foo = Singleton<int>::Instance();\r\n\treturn 0;\r\n}"}
{"i": "10229046", "t": "Given multiple sorted list, merger them into a new sorted list.\r The interviewer first asked for algorithm and time complexity.\r Then he asked me write code in a paper and then read to him."}
{"i": "10192988", "t": "How to add two sparse polynomials ?\rFind Height of a tree without using recursion ?"}
{"i": "10225980", "t": "Given an acyclic undirected unweighted connected graph, find its representation as a tree with the least height. Brute force is O(n^2). Come up with an O(n) solution"}
{"i": "10208931", "t": "Design a queue (FIFO) using only stacks (LIFO). The only supported operations on the stack are: Push(), Pop() and IsEmpty(). The final queue had to implement the operations Queue() and Dequeue(). The program had to be efficient and handle exceptions."}
{"i": "10176906", "t": "Design an algorithm to sort an array whose first n-sqrt(n) elements are already sorted. What is the complexity of the algorithm."}
{"i": "10214933", "t": "Design an algorithm to find all elements that appear more than n/2 times in the list. Then do it for elements that appear more than n/4 times."}
{"i": "10226751", "t": "Given an set of n integers and an integer x. Design an algorithm to check whether k integers add up to x in the given set.\rThe complexity should be O(n^(k-1) * logn)"}
{"i": "10217915", "t": "Design an algorithm to perform operation on an array\rAdd(i,y)-> add value y to i position\rsum(i) -> sum of first i numbers\rwe can use additional array O(n) and worst case performance should be O(log n) for both operation"}
{"i": "10212756", "t": "Q1) Write a program to calculate height of a binary tree non - recursively ?\r Q2) Asked which data structure should be used to store browser history.\r Q3) Find the anagrams with a huge list of words .\r Q4) Mirror a tree iteratively.\r Q5) Compute a+bx2+cx3+dx4+... efficiently (a,b,c...given)\r Q6) Find one missing alphabet in an array of 26 alphabets(one alphabet repeated twice)."}
{"i": "10217724", "t": "There are 3 friends say A, B, C. Of them, C knows one of A/B speaks always the truth and the other speaks always lies. One day, all of them meet with a car accident. Unfortunately, both A and B die on the spot, and C joins them a bit late. When C reaches the alien world, he wants to goto heaven. He only sees 2 exits. So, he assumes one exit for heaven and the other exit for hell. He also recognizes both A and B as security guards standing at each of the exits. Now, knowing one of A/B speaks truth and the other lies always, C needs to find way to heaven, by asking only ONE question to each of the security at the exits? How?"}
{"i": "10215731", "t": "Object oriented design to implement Kindle's Whisper feature."}
{"i": "10185970", "t": "What is the time complexity of this program?\r a[0..(n-1)] = array containing numbers from 0 to n-1 in random order\r leftExtreme = a[0]\r rightExtreme = a[0]\r ctr=0;\r for(i=1 to n-1) {\r         if(a[i] < leftExtreme) {\r                 leftExtreme = a[i];\r                 for(j=a[i] to leftExtreme) {\r                         ctr++;\r                 }\r         }\r         else if(a[i] > rightExtreme) {\r                 rightExtreme = a[i];\r                 for(j=rightExtreme to a[i]) {\r                         ctr++;\r                 }\r         }\r }"}
{"i": "10184902", "t": "Dramatic - You need to find if a given sentence (a line of text) is available in a given magazine. You can not reuse letters. Think like, you are asking for some ransom, putting someone at gun point.You grab a magazine (weekly) and start tearing/cutting letters to form the sentence \"I want blah blah money\". Write a function that tells the given magazine has all the letters/alphabets sufficiently to form the sentence."}
{"i": "10155763", "t": "Given millions of time intervals, compute the maximum weights and the time when maximum weights occurred. \r Time interval is defined as followings (s: starting time, e: ending time, w: weight). And pls note that s, e, and w are not necessary integer."}
{"i": "10166688", "t": "//  find the pair in an array .... that sum up to particular number"}
{"i": "10061917", "t": "I have two methods of an object, and they each access a critical section of code. I want to restrict access to the section so that in one method, I allow multiple threads to access the critical section. In the other method, I want only one thread to have access. If a caller calls the second method, it should lock out all clients from accessing the critical section in either of the two functions. Here is the basic structure of the class:\r class ClassThatNeedsFixing\r{\rpublic:\r        // Will allow many concurrent threads through, unless there is a\r        // call to the other method.\r        void AllowMany() {\r                // Here is the critical section that must be protected\r                ...\r        } \r        // Will lock out any client, including callers to the other method.\r        void AllowOne() {\r                // Here is the critical section that must be protected\r                ...\r        }\r private:\r        // Assume there are members here that need protecting\r        // above.\r        ...\r};\rIn order to solve this problem, you are provided with two classes: Mutex and Semaphore. They have the standard behavior of the concepts that share their class names. Here are the public interfaces for each of these classes: \rclass Mutex\r{\rpublic:\r        Mutex();\r        void Acquire();\r        void Release();\r};\rclass Semaphore\r{\rpublic:\r        // At it's creation, one can specify the count\r        // of the semaphore.\r        Semaphore(unsigned int count);\r                void Acquire();\r                void Release();\r};\r Fix the ClassThatNeedsFixing implementation so that the critical section is protected.\r Your solution will be graded on flexibility and robustness (i.e., we should be able to re-use your solution in a generic case and it should be exception safe). You are allowed to create as many classes/objects/templates/etc that you need. Feel free to use the STL if necessary. Document your code as you would for real-world maintainability."}
{"i": "10028673", "t": "A common problem is to generate the intersection of two sequences. A sequence is a sorted list of objects that are ordered according to some comparison operation. I need two functions (or one function with some type of switch parameter) that provide an intersection of two sequences. In one case, I want to only output an intersection of the sequence, but if there are duplicate values in the sequence, only output one object. In the other, preserve duplicates. For example, take two sequences:\r         A: 1, 3, 3, 7, 7, 7, 8\r        B: 2, 3, 7, 7, 9\r The output in the non-duplicate preserving case should be: 3, 7. For the duplicate preserving case, the output should be: 3, 7, 7.\r Your solution will be graded on flexibility, robustness, and scalability. You are allowed to create as many classes/objects/templates/etc that you need. Document your code as you would for real-world maintainability. You can use STL concepts, but the STL is unavailable to you.\r The definition of a sequence and/or iterating through a sequence is not provided to you as part of this test question. It is up to you to determine how you want callers to pass in a sequence and how the caller will receive output. The solution should be flexible enough that the caller can easily adhere to a sequence definition, and once you have specified the API, assume that callers will provide a sequence in sorted order. If the caller does not adhere to your pre-conditions, it is the caller's fault, not yours (i.e., you don't have to test that a sequence is sorted). But, do try and make it easy enough for a caller to reuse."}
{"i": "10130982", "t": "How to set up a LAN"}
{"i": "10111210", "t": "Find two numbers(a and b) from integer array such that a + b = x, where x is input along with array. I have solution with o(n^2) with linear/brute force. But i was just wondering can we do it in n*log n or n or just log n.\r P.S. No range specified for numbers for array. We need very general solution"}
{"i": "10111205", "t": "Given an array of unsorted integers , how to find duplicates in O(n)"}
{"i": "10130965", "t": "Jump Game:\rGiven an array start from the first element and reach the last by jumping. The jump length can be at most the value at the current position in the array. Optimum result is when u reach the goal in minimum number of jumps.\r For ex:\rGiven array A = {2,3,1,1,4}\rpossible ways to reach the end (index list)\ri) 0,2,3,4 (jump 2 to index 2, then jump 1 to index 3 then 1 to index 4)\rii) 0,1,4 (jump 1 to index 1, then jump 3 to index 4)\r Since second solution has only 2 jumps it is the optimum result."}
{"i": "10130928", "t": "implement a telephone directory where you have to associate each person with a phone number."}
{"i": "10129916", "t": "difference between release build and debug build. Did you hear about memory leaks? how do they occur?"}
{"i": "10129915", "t": "write a function to return the number of bits set in the given byte."}
