{"i": "5640877024215040", "t": "On a very large rotated sorted array with one or more duplicates, find the index of a particular number:  20,30,30,45,60,60,5,17,17,19"}
{"i": "5697202567512064", "t": "How would you architect a client based recommendation feature(based on customer history) on product detail page?"}
{"i": "5753043115048960", "t": "Design Customers who viewed this also viewed that for an online shopping portal"}
{"i": "5166756926586880", "t": ".      In an unsorted array of numbers that occurs an odd number of times except one that occurs an even number of times, find the number that occurs an even number of times"}
{"i": "5750423923195904", "t": "Design a thread safe hash table from ground up.\r Follow up question: How do you design it without using any locks."}
{"i": "5758442090266624", "t": "Given a doubly linked list, copy the list.\r Edit:\rStruct node{ \rnode *pNext;\rnode *pPrev; \rnode *pRandom; \r}; \r pRandom has connection to any random nodes. \rWrite a program to clone this list."}
{"i": "5197316961075200", "t": "(To write in Objective-C; I will write the EXACT question)\r Given a dictionary of words, return an array of the words whose match. (i.e. pattern \"c.t\" match with \"cat\", \"cut\", etc. because the dot notation stand for ANY character).\r  SUGGEST: use suffix tree, for(for()) is not a good solution."}
{"i": "4797493623652352", "t": "Print the output of linked list in the reverse order without altering the actual linked list.\rFirst try it without recursion and then with recursion\rOriginal linked list A->B->C->D\r Output should be DCBA"}
{"i": "4903109016944640", "t": "Algorithm to check whether given sequence is arithmetic progression or geometric progression"}
{"i": "6258441244901376", "t": "Algorithm to check whether given series is arithmetic progression or geometric progression"}
{"i": "5722011103920128", "t": "I want to make a graph problem that use object-oriented java.\rExample: dijkstra,Kruskal"}
{"i": "4842381232832512", "t": "*\r*  *\r*  *  *\r*  *  *  *  write a program in java??"}
{"i": "5721114529497088", "t": "Table 1; transaction_id,  price\rTable 2: transaction_id,  zipcode\rQuery to  find the avg price per zipcode\rQuery to  show zipcodes that have an avg price more than $5."}
{"i": "5079441650745344", "t": "Ebay lowers its listing fee  for one of the product ( bikes), and sees an increase in avg sales price. Explain  why?"}
{"i": "5758157347356672", "t": "What is difference between  Having and where clause?"}
{"i": "5649641508962304", "t": "what all design patterns are used in designing a shopping cart and explain?"}
{"i": "5727053395525632", "t": "How do you normalize shopping cart tables?"}
{"i": "5073439735939072", "t": "Password storage rather than storing in DB."}
{"i": "5141209186041856", "t": "How the tables are stored(different tables structure)"}
{"i": "5089838692827136", "t": "Design a shopping cart."}
{"i": "5700077242810368", "t": "package jp.co.worksap.global;\rimport java.util.NoSuchElementException;\r/**\r* The Queue class represents an immutable first-in-first-out (FIFO) queue of objects.\r* @param <E>\r*/\rpublic class ImmutableQueue<E> {\r/**\r* requires default constructor.\r*/\rpublic ImmutableQueue() {\r// modify this constructor if necessary, but do not remove default constructor\r}\r// add other constructors if necessary\r/**\r* Returns the queue that adds an item into the tail of this queue without modifying this queue.\r* <pre>\r* e.g.\r* When this queue represents the queue (2, 1, 2, 2, 6) and we enqueue the value 4 into this queue,\r* this method returns a new queue (2, 1, 2, 2, 6, 4)\r* and this object still represents the queue (2, 1, 2, 2, 6) .\r* </pre>\r* If the element e is null, throws IllegalArgumentException.\r* @param e\r* @return\r* @throws IllegalArgumentException\r*/\rpublic ImmutableQueue<E> enqueue(E e) {\rreturn null;\r}\r/**\r* Returns the queue that removes the object at the head of this queue without modifying this queue.\r* <pre>\r* e.g.\r* When this queue represents the queue (7, 1, 3, 3, 5, 1) ,\r* this method returns a new queue (1, 3, 3, 5, 1)\r* and this object still represents the queue (7, 1, 3, 3, 5, 1) .\r* </pre>\r* If this queue is empty, throws java.util.NoSuchElementException.\r* @return\r* @throws java.util.NoSuchElementException\r*/\rpublic ImmutableQueue<E> dequeue() {\rreturn null;\r}\r/**\r* Looks at the object which is the head of this queue without removing it from the queue.\r* <pre>\r* e.g.\r* When this queue represents the queue (7, 1, 3, 3, 5, 1),\r* this method returns 7 and this object still represents the queue (7, 1, 3, 3, 5, 1)\r* </pre>\r* If the queue is empty, throws java.util.NoSuchElementException.\r* @return\r* @throws java.util.NoSuchElementException\r*/\rpublic E peek() {\rreturn null;\r}\r/**\r* Returns the number of objects in this queue.\r* @return\r*/\rpublic int size() {\rreturn -1;\r}\r}"}
{"i": "5701270706847744", "t": "Normally where singleton design pattern used in a project?"}
{"i": "4877498227621888", "t": "what is low level design and high level design in realtime java?"}
{"i": "5635798225387520", "t": "what are the top 10 coding standards/code reviews in java?"}
{"i": "5655640772968448", "t": "Spring following by default singleton scope..so if we are using clone() is there anything happend?if anyone knows please tell me the answer"}
{"i": "5700878052884480", "t": "Solve Travelling salesman problem using Iterative Deepening Search Algorithm.\r Edit:\rYou have been given distance between each pair of cities and the number of cities"}
{"i": "6208255961333760", "t": "How to find non- common elements between two string arrays. Eg: String a[]={\"a\",\"b\",\"c\",\"d\"};\r\t\tString b[]={\"b\",\"c\"};\r O/p should be a,d"}
{"i": "5645051262664704", "t": "You have the following function:\rF(m, n) = F(m-1, n-1) + F(m, n-1)\rm, n - positive integer numbers > 0\rF(1, n) = 1\rF(m, 1) = 1\rYou need to write this function. The problem is that if x=1000000 and y=1000000, for instance, the number of recursive calls will be extremely large."}
{"i": "5653937818435584", "t": "Consider a regular polygon with N vertices labelled 1..N. In how many ways can you draw K diagonals such that no two diagonals intersect at a point strictly inside the polygon? A diagonal is a line segment joining two non adjacent vertices of the polygon.\r   Input:\r The first line contains the number of test cases T. Each of the next T lines contain two integers N and K.\r   Output:\r Output T lines, one corresponding to each test case. Since the answer can be really huge, output it modulo 1000003.\r   Constraints:\r 1 <= T <= 10000\r 4 <= N <= 10^9\r 1 <= K <= N\r   Sample Input:\r 3\r 4 1\r 5 2\r 5 3\r   Sample Output:\r 2\r 5\r 0\r   Explanation:\r For the first case, there are clearly 2 ways to draw 1 diagonal - 1 to 3, or 2 to 4. (Assuming the vertices are labelled 1..N in cyclic order).\r For the third case, at most 2 non-intersecting diagonals can be drawn in a 5-gon, and so the answer is 0."}
{"i": "5085923024830464", "t": "Question was very similar to this one\rhttp://www.hackerearth.com/thoughtworks-hiring-challenge/algorithm/swap-it-2/\r Bob loves sorting very much. He is always thinking of new ways to sort an array.His friend Ram gives him a challenging task.He gives Bob an array and an integer K .The challenge is to produce the lexicographical minimal array after at most K-swaps.Only consecutive pairs of elements can be swapped.Help Bob in returning the lexicographical minimal array possible after at most K-swaps.\r Input: The first line contains an integer T i.e. the number of Test cases. T test cases follow. Each test case has 2 lines. The first line contains N(number of elements in array) and K(number of swaps).The second line contains n integers of the array.\r Output: Print the lexicographical minimal array.\r Constraints:\r 1<=T<=10\r 1<=N,K<=1000\r 1<=A[i]<=1000000\r Sample Input (Plaintext Link)\r 2\r 3 2\r 5 3 1\r 5 3\r 8 9 11 2 1\r Sample Output (Plaintext Link)\r 1 5 3\r 2 8 9 11 1\r Explanation\r After swap 1:\r 5 1 3\r After swap 2:\r 1 5 3\r {1,5,3} is lexicographically minimal than {5,1,3}\r Example 2:\r Swap 1: 8 9 2 11 1\r Swap 2: 8 2 9 11 1\r Swap 3: 2 8 9 11 1"}
