{"i": "282675", "t": "how to do a spell checking program and give suggestion to possible correct spelling?"}
{"i": "282674", "t": "give you a set of points and a 3-D matrix;identify if any comb in the set is equal to the square plane.\rhow to implement it?\rand  the lowest complexity?"}
{"i": "280673", "t": "In our indexes, we have millions of URLs each of which has a link to some page contents, that is, URL->contents. Now, suppose a user types a query with wild cards *, which represent 0 or multiple occurrences of any characters, how do you build the indexes such that such a type of query can be executed efficiently by finding all corresponding URLs->contents efficiently. For example, given a query http://www.*o*ve*ou.com. You need to find iloveyou.com, itveabcu.com, etc. I got stuck for this problem during my interview even though I got all of other problems solved. Let me list a few things that I have tried, please help me with more efficient algorithms. Thanks a lot! This is not just for the interview any more, but for solving the interesting problem (at least I think so).\rA few possible solutions proposed by me:\r1) Using * to split the query into several words, for example, *o*ve*ou => o, ve, ou, and then search o, ve, ou separately and then combine the results\uff0cthis seems a good way but I cannot figure out an efficient way. This may be more suitable to find pattern for a single URL, however, the problem here is for millions of URLs. We should avoid scanning all URLs.\r2) Soring URLs? Not sure how to deal with wild cards then.\r3) Suffix tree? Build a suffix tree for each URL, then for the partitioned words, search the suffix tree? But how? This also looks like a possible solution, but how? I did not figure it out.\r4) Finally, when I tried all the above methods and did not please the interviewer, I asked him if I can use UNIX grep? He said definitely NO!\rOk, guys, please help me! This question is really tough for me. But maybe very easy for you guys! Please help!"}
{"i": "280666", "t": "Sort a huge list of numbers ,each of which is of a fixed size,in O(n)time"}
{"i": "279709", "t": "In a given binary tree,find the largest subtree that's also a BST."}
{"i": "279677", "t": "Given a sentence reverse words of the sentence.\rI am a fool \rto\r I ma a loof"}
{"i": "278721", "t": "How would you find out all the books purchased in Bangaalore on a given day."}
{"i": "279676", "t": "Given a sentence containing anagrams, find the anagram pair and print it as <cat,tac> types"}
{"i": "279675", "t": "Given a Binary Tree(not a BST) find the maximum element."}
{"i": "278718", "t": "\"Simple Parallel Crypto\"\r We need a utility that will perform a simple XOR crypto transform.  They key will be given as a set of bytes in an external file and the number of bytes in the key will dictate the \"chunk size\".   The plain text data will be given on stdin and the utility must break it into chunk-size sections and XOR it against the key and write the cypher text it to stdout.  After each chunk is processed the key is rotated left by one bit to make a new key.  This means that the key will repeat every N chunks, where N is the number of bits in the key.  The plain text may not be a multiple of the chunk size in length.  The plain text may also be very large, far exceeding the available memory+swap space in the system.\r In addition to just performing the algorithm, the utility needs to scale so that multiple chunks of plain text can be efficiently processed in parallel on multi-core/multi-CPU machines.   As such, a number of threads must be created to process chunks of data concurrently.  Regardless of the number of threads, the output cypher text must remain the same.\r Any errors/status must come out on stderr.\r Required Command Line Options:\r\t-k <filename>       Specify the key file\r  \t-n #                Number of threads to create\r Example:\r   The keyfile contains two bytes:     0xF0 0xF0\r   The plain text file has the bytes:  0x01 0x02 0x03 0x04 0x11 0x12 0x13 0x14\r    encrypt -k keyfile -n 1 < plain > cypher\r    The cypher text has the bytes:      0xF1 0xF2 0xE2 0xE5 0xD2 0xD1 0x94 0x93\r  Implementation Details/Notes:\r The utility can be written in C/C++.    If C/C++, it should build and run on a POSIX system (like Linux or Mac OS X).  A good way to generate keyfiles and plain text files is as follows:\r dd if=/dev/urandom of=plain bs=4096 count=4096\rdd if=/dev/random of=keyfile bs=4096 count=1"}
{"i": "278717", "t": "How SpinkLocks work in SMP and UP architectures."}
{"i": "279673", "t": "Addition of two signed characters, what happens the carry bit, and to the signed bit. Can the carry bit be over written on a signed bit?"}
{"i": "278715", "t": "Find number of friday 13th's from today to the end of 2012."}
{"i": "279672", "t": "What is the most efficient way of representing a number in the multiple of 256? (Clue - How do you clear a bit?) - Anyone has an answer to this."}
{"i": "278712", "t": "You are given a pointer that points to an array of elements. The elements could be int/float/string/char. Write a program to add/concatenate all the elements of the array."}
{"i": "277697", "t": "Difference between Macro and inline?\rWhy static is not used to define global/local buffer?\rwrite a program to print Fibonacci series?\rwhat is the C++ equivalent of linked list?"}
{"i": "277695", "t": "Design n stacks using single array.. \rArray size is N"}
{"i": "277690", "t": "Design a data structure which has the following features\r-> push the data\r-> pops the last inserted data [LIFO]\r-> Gives the minimum\rAll of the above operations should have a complexity of O(1)"}
{"i": "277687", "t": "Program solution for 'game of life' (3X's in an nXn grid. Initial stage - 3 x's horizontal next to each other. Next step - alternate to vertical 3 x's center one stays at the same position.  Stages repeat. I coded using arrays, interviewer was interested in a solution without the use of arrays."}
{"i": "278687", "t": "Write a function to add an array of numbers."}
{"i": "277686", "t": "Assuming you have a web mapping service (e.g google map) that works perfectly well in USA. If you want it to work in other countries, what technical problems do you foresee?\r A pretty open end question. One possible answer the interviewer gave was that the address system could be different."}
{"i": "278685", "t": "Assuming you have 1 billion (or any arbitrary large number) files sitting in a machine. Given a phone number, how do you find files that have the number in it?\rRather than actually give him an algorithm, the interviewer was looking for some ideas."}
{"i": "276686", "t": "Describe the entities of a blogging system like facebook"}
{"i": "276685", "t": "You are the MMU of your computer and have the flexibility of managing memory assignment at will i.e. dynamically..\rDesign a strategy to optimize the number of memory locations to be used for incoming data that will be resident in memory from time t0 to t1(the memory will be available after that).\rThe data to be resident will have its own residency time T(i) to T(j) in a particular time period and if a memory location is occupied, it can not be assigned to incoming data.\rYou can create memory location dynamically for incoming data and have to generate a strategy for optimizing this #. Incoming data can not wait."}
{"i": "275663", "t": "Hi all\rcan someone here explain how iPhone testing is done in QTP?\rPls elaborate what software methodolgies used for iPhone testing?\rHow database testing done in mobile applications?\r Thanx \rSnigdha."}
{"i": "274691", "t": "how is padding beneficial"}
{"i": "273699", "t": "Saw this question in one of the algo communities.\r Amazon telephonic interview question on Matrix\rInput is a matrix of size n x m of 0's and 1's. eg:\r1 0 0 1\r0 0 1 0\r0 0 0 0\r If a location has 1; make all the elements of that row and column = 1. eg\r1 1 1 1\r1 1 1 1\r1 0 1 1\r Solution should be with Time complexity = O(n*m) and space complexity = O(1)"}
{"i": "274675", "t": "how to find out the maximum disjoint-edge paths between two vertices s,t in a graph? Does your solution give maximum number of paths, validate?"}
{"i": "273671", "t": "Write a thread safe singleton class"}
{"i": "273670", "t": "Write a function to find the longest common sequence of leaf nodes among two binary trees. Optimize for time and space."}
