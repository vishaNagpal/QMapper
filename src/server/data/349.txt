{"i": "14547726", "t": "We have a text editor application where we can choose 1)between 100s of\rdifferent fonts like arial, calibri, etc.. 2)different text sizes 3) different formatting such as bold, Italics, regular, etc..\r Imagine that the application is similar to word(there we will have these options). Now give different test cases to test this application."}
{"i": "14549727", "t": "what pattern can we expect for microsoft written test? or like from what areas can we expect questions?"}
{"i": "14542708", "t": "There is a big file of words which is dynamically changing. We are continuously adding some words into it. How would you keep track of top 10 trending words at each moment ?"}
{"i": "14549725", "t": "Given two char arrays X=\"ZTANBMBLAUCY \" and Y =\"GABVCBKLAMNC\", write an algorithm to find the longest subsequence that is present in both of them.\rIn the above case the common subsequence is \"ABBAC\". \rAlso describe the time complexity of your algorithm."}
{"i": "14551695", "t": "Generate a hashtable for storing the Phone book data having the tuples (Name, phone\rnumber, mail id).\rFor the initial hash, you may use the hash function defined as (sum of ASCII values of all\rthe characters in the name field ) modulo m, where m is the size of your hashtable.\rCompare the performance of the hashtable if\ra) separate chaining is used,\rb) open addressing with linear probing is used,\rc) open addressing with quadratic probing is used."}
{"i": "14540674", "t": "given a n*n matrix A[]of distinct integers, find a index i,j such that a[i][j]<a[i+1][j],a[i][j]<a[i][j+1],a[i][j]<a[i-1][j],a[i][j]<a[i][j-1],\rtime complexity should be less than O(n^2)"}
{"i": "14550667", "t": "An unsorted array is given, where there is no specific range in which the elements occur. There is only one duplicate element present in it. Let it is a[i]. It should be within the half of the size of the array from where it appears for first time. i.e. the duplicate element should be within (i+(arr_size/2)), at ith index it appears for 1st time. Find the duplicate element with minimum number comparisons."}
{"i": "14551662", "t": "how do you create a duplicate of a DoublyLinkedList in which the .next is okay but .prev can point to any node in the link list"}
{"i": "14529684", "t": "double factorial of a number  N \rexample: N!!"}
{"i": "14522681", "t": "1)find first N factorial primes  (not prime factorials)"}
{"i": "14524681", "t": "write efficient program to find the sum of x^y + y^ and x^y - y^x and x^y/y^x and x^y*y^x"}
{"i": "14533681", "t": "Given an array A of size 26*26. Determine whether each row and column of the array consists of set {a,b,c,d,.....z} where each element occurs exactly once"}
{"i": "14530680", "t": "Test cases for finger print reader say in a laptop to login. Here you can swipe your finger to have a secured login. e.g. I will swipe my finger and the system will allow me to login."}
{"i": "14520685", "t": "find longest increasing sub sequence in 2d array.\r(bit more expl..)\rex: finding length of the snake in snake game \r---------\rthe sequence must not be diagonally.\rbut it can be any like top-bootm,bottom-left-top ........ \rincreasing means one step\rex: 10,11,12,13 (correct)\r      12,14,15,20(wrong) \rEx:  input: consider 4x4 grid \r                 2    3     4      5\r                 4   5   10   11\r                20  6    9    12\r                 6   7    8     40\r output : 4 5 6 7 8 9 10 11 12"}
{"i": "14525677", "t": "given a float print the smallest float number keeping decimal position constant.....i.e. if number is 3120.434 smallest will be 1023.344....\rfunction signature float funcName(float num)"}
{"i": "14534667", "t": "if you have 10 records in table , you run query and got answer and next day data is inserted into table it becomes 12 records now i want to operation on only updated records (means 11th and 12 th records )"}
{"i": "14527665", "t": "Given a string, find out whether the string contains any repeated characters or not. For example, 'abcd' does not contain any repeated character 'abcdaefgh' contains repeated character ('a' is repeated twice).\r As part B, I was asked if suppose it is given that string contains no more than 20 characters, will you change your algorithm in anyway to improve memory/time performance. Then he specifically added that there is a constraint on memory."}
{"i": "14518684", "t": "design an efficient algorithm for \rSuppose you are given a n\u00d7n matrix M storing numbers. You have to design an O(n3) algorithm to find\ra sub-matrix whose sum is maximum sum over all possible submatrices of M. In C langauge"}
{"i": "14506695", "t": "Design a crawler\rconstrains- a website can ban you if there are more than 5 parallel requests on that website at a time."}
{"i": "14507684", "t": "Given an array A storing n elements and a parameter k which is a positive integer, an element of A\ris said to be k-majority of A if it appears more than\rn\rk\rtimes in A. Design an algorithm which computes\ra k-majority element, if exists, in array A. The algorithm must have O(nk) time complexity."}
{"i": "14506672", "t": "How would you design a client/server chess game, where clients can connect from multiple/different UIs?"}
{"i": "14518667", "t": "Given a node in a BST, find the next biggest node. Node can be left child, right, root, etc. Code this."}
{"i": "14508672", "t": "You have a set of numbers from 1 to n+1. One number is missing; find the missing number. How about 2 missing numbers?"}
{"i": "14518666", "t": "Write Preorder traversal of a BST, iteratively using a Stack?"}
{"i": "14514667", "t": "write your own implementation of hashtable , write interface and implementation for same eg. get,put and delete function .\rfollow up question : suppose you have hashtable of size 4 and its full . you then delete 2 elements from it. how will you reuse the space . implement linear probing collision resolution technique in this hash table ."}
{"i": "14508671", "t": "Suppose  program's runtime is 12N2 + logn + 4000 . how will you denote this in Big O notation . no matter how big n is , you will always have 4000 added to it . \rexplain your big O too."}
{"i": "14519662", "t": "Given an array with positive, negative and zeros, arrange the given array such that negatives are on left, zeros in the middle and positives on the right."}
{"i": "14486167", "t": "if apple is for 40 cents, banana is for 60 cents and grapefruit is for 80 cents then what pear is for???"}
{"i": "14466159", "t": "Given a doubly linked list with a data item, a previous and a next ptr along with another pointer \"child\" that may point to the head of another doubly linked list of same type(it will lead to a general tree type of structure) or it may be null. Flatten the tree into a linked list... minimum space and time complexity(order n). The doubly linked lists's head and tail are given."}
{"i": "14474161", "t": "You have a linked list in which each node is another linked list. How do you find the 7th most unique element in the among all the nodes in the most optimal time ?"}
