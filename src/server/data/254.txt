{"i": "5878624968245248", "t": "Given a number of arrays where:-\rArr-1={1,2,3,4,5,6,7,8,9 ... N}\rArr-2 is formed by eliminating all the elements that satisfy x*2 from Arr-1 (x belongs to natural numbers) ie.\rArr-2={1,3,5,7,9,11,13,15,17,19 ... }\rSimilarly Arr3 is formed by eliminating all the elements that satisfy x*3 from Arr2 (x belongs to natural numbers) i.e. \rArr3={1,3,7,9,13,1519,21,25,27 ... }\rArr-k is formed by eliminating x*k elements from Arr-(k-1).\r Given number \"z\" and Array suffix \"k\" Find if z exists in Arr-k\r(with as space and time minimum complexity as possible)"}
{"i": "5640130266136576", "t": "Calculate number of DISTINCT palindromic substrings in a string with help of suffix array or a trie.\rLike if aba is string the their are 3 distinct palindromic subsrings:{a,aba,b}"}
{"i": "5083698865111040", "t": "Given a amount and several denominations of coins, find all possible ways that amount can be formed? eg amount = 5, denominations = 1,2,3.     \rAns- 5 ways\r1) 1,1,1,1,1 \r2) 1,1,1,2 (combinations aren't counted eg 1,2,1,1 etc)\r3) 1,1,3 \r4) 1,2,2 \r5) 2,3"}
{"i": "5643620463935488", "t": "Identifying the number of occurrences of each  palindrome in a file"}
{"i": "5131792298278912", "t": "We have a fictitious multi-level marketing scheme where a member can recruit one or more other members. At the end of the month, member\u2019s payout is calculated at 10% of his direct sales (items the members sells\rthemselves) and 4% of sales generated by his recruits and their recruits.\rWrite a function that calculates the monthly compensation for all members given the original member. You can assume a member can only be recruited by a single existing member.\r Given the following interface, please implement the MemberPayoutUtil.calculatePayout function.public interface Member {\r\n    public double getMonthlySales();\r\n    private Collection<Member> getRecruitedMembers(); }\r\n \r\n\r\npublic class MemberPayoutUtil {\r\n    public static double calculatePayout(Member member) {\r\n        // Implement me!\r\n    }\r\n}"}
{"i": "5766928975003648", "t": "A node which has following fields\r   a) data\r  b) next_ptr\r  c) prev_ptr\rcan be used to represent doubly linked list, binary tree or none. Given a random pointer recognize whether it forms DLL, Binary Tree or none."}
{"i": "4799926751985664", "t": "Consider a binary tree for which root node and a target node are given to you. Give the next sibling of the target.(let the target be in level k, then you need to give the immediate node which is in level k)"}
{"i": "5099279882387456", "t": "Given a large file which contains m rows and n columns. Given a column no, sort the column in such a way that corresponding rows also sorted"}
{"i": "5937589047525376", "t": "Given a 2D matrix which contains 0\u2032s and 1\u2032s. Given two points of matrix whose value is 1. Find the path(with only 1\u2032s) between the given points. Can anyone suggest a good algorithm for this ?"}
{"i": "6114699053629440", "t": "given a N x N matrix find the no. of times  a word is present in that matrix. constraints you can move in 3 directions from one cell 1. forward , 2. down 3. diagonal . Find all teh occurance of all the word"}
{"i": "5952632975785984", "t": "Write a program to get character count, word count, line count from a file using any programming language?"}
{"i": "4943998208704512", "t": "Printing diagonals of a matrix"}
{"i": "5259277396606976", "t": "How would you structure the game of life (classes, functions etc...)? How would you structure the board if it was played on a sphere?"}
{"i": "6688746397237248", "t": "Find the degree of separation between two people (e.g. LinkedIn's connected feature)"}
{"i": "5161466495762432", "t": "Given an array, divide it into two parts for monte carlo simulations, with 80% of them as training and the rest as testing."}
{"i": "4821862626361344", "t": "You are given two arrays, how to you find the common elements in them?\r My answer: Make a hashmap for one array with the entries as keys and their presence (0 or 1) as values. Then run through the elements of the other array to see which elements match. \r Complexity: O(m+n) where m and n are the lengths of each array."}
{"i": "5291404775391232", "t": "I have a linked list .The first half that is the left side is sorted and the 2nd half -right side is sorted independently.How do I sort them in with out using  seperate linked list .I need an efficient solution"}
{"i": "5944094580801536", "t": "Look at the following pseudo-code, which computes the n-th Fibonacci number:\r int fibonacci(int n)\r{\rif (n == 0)\r{\rprint(0)\rreturn 0\r}\rif (n == 1)\r{\rprint(1)\rreturn 1\r}\rreturn fibonacci(n - 1) + fibonacci(n - 2)\r}\r If one calls fibonacci(3), then the following will happen:\r* fibonacci(3) calls fibonacci(2) and fibonacci(1) (the first call).\r* fibonacci(2) calls fibonacci(1) (the second call) and fibonacci(0).\r* The second call of fibonacci(1) prints 1 and returns 1.\r* fibonacci(0) prints 0 and returns 0.\r* fibonacci(2) gets the results of fibonacci(1) and fibonacci(0) and returns 1.\r* The first call of fibonacci(1) prints 1 and returns 1.\r* fibonacci(3) gets the results of fibonacci(2) and fibonacci(1) and returns 2.\r In total, 1 will be printed twice and 0 will be printed once.\r We want to know how many times 0 and 1 will be printed for a given integer N. \r INPUT\rThe first line contains an integer T, denoting the number of test cases.\rThe next T lines contain an integer N. \r OUTPUT\rFor each test case, print one line of output which contains 2 integers separated by a space. The first integer is the number of times 0 is printed. The second integer is the number of times 1 is printed. \r CONSTRAINTS\r1 <= T <= 50\r0 <= N <= 40 \r SAMPLE INPUT\r2\r0\r3 \r SMAPLEOUTPUT\r1 0\r1 2"}
{"i": "5736487320551424", "t": "If you look at the following pseudo-code, which computes the n-th Fibonacci number:\r int fibonacci(int n)\r{\rif (n == 0)\r{\rprint(0)\rreturn 0\r}\rif (n == 1)\r{\rprint(1)\rreturn 1\r}\rreturn fibonacci(n - 1) + fibonacci(n - 2)\r}\r If one calls fibonacci(3), then the following will happen:\r* fibonacci(3) calls fibonacci(2) and fibonacci(1) (the first call).\r* fibonacci(2) calls fibonacci(1) (the second call) and fibonacci(0).\r* The second call of fibonacci(1) prints 1 and returns 1.\r* fibonacci(0) prints 0 and returns 0.\r* fibonacci(2) gets the results of fibonacci(1) and fibonacci(0) and returns 1.\r* The first call of fibonacci(1) prints 1 and returns 1.\r* fibonacci(3) gets the results of fibonacci(2) and fibonacci(1) and returns 2.\r In total, 1 will be printed twice and 0 will be printed once.\r We want to know how many times 0 and 1 will be printed for a given integer N. \r INPUT\rThe first line contains an integer T, denoting the number of test cases.\rThe next T lines contain an integer N. \r OUTPUT\rFor each test case, print one line of output which contains 2 integers separated by a space. The first integer is the number of times 0 is printed. The second integer is the number of times 1 is printed. \r CONSTRAINTS\r1 <= T <= 50\r0 <= N <= 40 \r SAMPLE INPUT\r2\r0\r3 \r SMAPLEOUTPUT\r1 0\r1 2"}
{"i": "6195664773971968", "t": "Given 78 cents (target) you need to tell how many ways it is possible to make the change using 25 cents(quarter), 10 cents(nickel), 5cents(dime), 1cents(penny)"}
{"i": "4663708324200448", "t": "Given following definition, implement hashmapPublic class HashMap\r\n{\r\n\tPublic void put(object key, object value);\r\n\tPublic void get(object value);\r\n\r\n}"}
{"i": "5667346534367232", "t": "Given a sorted array with duplicates, move the distinct elements to the top\r Ex: 1,1,2,3,4,4,5   -> 1,2,3,4,5"}
{"i": "5744046060339200", "t": "The way a Knight\r Given a chessboard, consisting of n\u00d7n cells, several of them are cut. Find the path of minimum length for a Knight from one cell to another. The Knight can\u2019t go through cut cells. \r Specifications \r Input \r The first row is set to the number n (2 \u2264 n \u2264 50). Each of the next n lines contains n symbols. The symbol # denotes the cut cell, the point - not cut cell, the symbol @ denotes the initial and final cell of the Knight's path (the chessboard contains two such characters). \r Output If the path can not be constructed, print \"Impossible\". Otherwise display the same map as the input, but check all Knight intermediate positions with symbol @.\t\r Example\rExample input\r 5\r.....\r.@@..\r.....\r.....\r.....\r5\r@..@.\r..##.\r.....\r.....\r.....\r5\r@....\r..#..\r.#...\r.....\r....@\r  Example output\r Sample 1\r...@.\r.@@..\r....@\r.....\r.....\rSample 2\r@..@.\r..##.\r.@..@\r..@..\r@....\rSample 3\rImpossible"}
{"i": "5773825484521472", "t": "Write a method in Java to: \rFind all set of permutations from N number of ArrayLists. Each ArrayList has a different length. \rEach permutation is formed by picking one item from each input ArrayList.\rYou have to exhaust ALL permutations.\rEach  permutation is a Set, so the order of the items does not matter. For  example [a1,b1,c1] is the same permutation as [c1,b1,a1]. \r Example:\r Input: N number of array lists with different length\r[a1,a2,a3....]\r[b1,b2....]\r[c1, c2... ]\r ...\rOutput: ALL permutations\r[a1, b1,  c1...], \r[a1,b1,c2..]\r....\rNote: \rThe above example is just a sample of potential input to illustrate the  output. You have to write code to solve for generalized input."}
{"i": "6039019800494080", "t": "Reimplement this code so that its results will always be the same, but that it does not cause a stack overflow on large inputs. Your solution must still implement the Folder interface.\r Coding\rYour class must be named iteration.MyFolderpackage iteration;\r\n\r\nimport java.util.Queue;\r\n\r\npublic class MyFolder<T, U> implements Folder<T, U>\r\n{\r\n    public U fold(U u, Queue<T> ts, Function2<T, U, U> function)\r\n    {\r\n        if(u == null || ts == null || function == null)\r\n            throw new IllegalArgumentException();\r\n\r\n        if (ts.isEmpty()) {\r\n            return u;\r\n        }\r\n\r\n        // The recursive implementation will overflow the stack for\r\n        // any data set of real size, your job is to implement a\r\n        // non-recursive solution\r\n        // return fold(function.apply(ts.poll(), u), ts, function);\r\n        return null;\r\n    }\r\n}\r\n\r\npackage iteration;\r\n\r\nimport java.util.Queue;\r\n\r\npublic interface Folder<T, U>\r\n{\r\n    U fold(U u, Queue<T> list, Function2<T, U, U> function);\r\n}\r\n\r\n\r\npackage iteration;\r\n\r\npublic interface Function2<T, U, R>\r\n{\r\n    R apply(T t, U u);\r\n}"}
{"i": "6235114367352832", "t": "I want to calculate number of DISTINCT palindromic substrings in a string.How to do it?\rLike if aba is string the their are 3 distinct palindromic subsrings:{a,aba,b}\rlength of string could be 10^5 range.So i dont think O(n^2) solution will work.So interviewer wanted some better algorithm."}
{"i": "4791215081914368", "t": "I want to calculate number of DISTINCT palindromic substrings in a string.How to do it?\rLike if aba is string the their are 3 distinct palindromic subsrings:{a,aba,b}\rlength of string could be 10^5 range.So i dont think O(n^2) solution will work.So the interviewer required some better algorithm.But i know only O(n^2) one."}
{"i": "5670081354792960", "t": "You have n - 1 numbers from 1 to n. Your task is to find the missing number.\r I.e. \rn = 5\rv = [4, 2, 5, 1]\rThe result is 3."}
{"i": "6260576544096256", "t": "Given an array with numbers, your task is to find 4 numbers that will satisfy this equation: \rA + B + C = D"}
{"i": "5152893422272512", "t": "You have a dictionary which is an array of words and array of strings.\r Write two functions\r 1. Prepare the array of strings to be searched in the dictionary\r2. Check if the string contains all valid words or not."}
