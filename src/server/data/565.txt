{"i": "188992", "t": "Given a very large arrray (size not known) and your algorithm will fetch every k^n element (I mean the sequences index values are k,k^2,k^3). Now, what is the order of your algorithm?"}
{"i": "188966", "t": "Without using an additional linked list arrange elements such that all even numnbers are placed after odd numbers"}
{"i": "189793", "t": "How many processes are created in this snippet?\rmain()\r{\rFork();\rFork() && fork () || fork ();\rFork ();\r}\r I got the solution as 15. Need to draw to explain better."}
{"i": "188942", "t": "Suppose you want to implement an ADT on a set of integers S with the following operations:\r  \u2022   insert (k ) - Places k into S\r  \u2022   extract min(S ) - Removes the smallest element from S\r  \u2022   extract max(S ) - Removes the largest element from S\r  \u2022   min(S ) - Returns (but does not remove) the smallest element from S\r  \u2022   max(S ) - Returns (but does not remove) the largest element from S\rExplain how to do this so min and max take O(1) time while insert, extractmin, and extractmax\rtake O(log n) time."}
{"i": "188919", "t": "convert Binary tree to binary search tree in place."}
{"i": "189740", "t": "write a macro that can take variable arguments"}
{"i": "188918", "t": "write your own random number generator that takes as an argument number n and returns the random number between 0 and n any use of library random function is forbidden"}
{"i": "188893", "t": "How can you think of a way to implement a stack using BST"}
{"i": "188891", "t": "consider 1,2,3,4,5,6,..... infinite ...\r intialize\r jump=2.\rthen 2,4,6,8 .... gets removed.\r remaining: 1,3,5,7,9,11 ...\r jump=3.\rthen 5,11, ... gets removed.\r reamining: 1,3,7,9,13,15 ..\r  we carry on for jump infinitely. here 1,3 are 'blessed' as they will not be removed.\r now,given a number 'n', propose a algorithm to find out weather it is a blessed number or not."}
{"i": "188873", "t": "Find the first occurrence of an integer in an array of sorted integers."}
{"i": "189707", "t": "Find the transpose of a square matrix using recursion"}
{"i": "188858", "t": "Q> how to run functions before calling main."}
{"i": "189700", "t": "1> complexities of the following loops:\r a>\r for (int i=0; i < n; i++)\r for (int j=0; j<n ; j *=2 )\r   int k = i*j;\r b> for (int i=0; i < n; i++)\r for (int j=0; j<n ; j +=2 )\r   int k = i*j;\r c> for (int i=0; i < n; i++)\r for (int j=0; j<n ; j *=3 )\r   int k = i*j;"}
{"i": "189699", "t": "You have a sorted array then you randomly rotate the array several number of times. now you have find the smallest element in the array. \rknown facts: 1> you know earlier array was sorted\r             2> rotations"}
{"i": "188856", "t": "What is the difference between pointer and reference. Where do we use reference instead of pointer?"}
{"i": "189676", "t": "Consider a binary tree.Now print out the preorder and inorder traversal by one pass through every node."}
{"i": "189664", "t": "class Base{\t\t\r\n\t\tint a;\r\n\tpublic:\r\n\t\tint b;\r\n\t\tBase(){a = 10; b = 11;}\r\n\t\tvirtual ~Base(){};\r\n\t\tclass Derived;\r\n\t\tfriend Derived;\r\n\t};\r\n\tclass Derived: private Base{\r\n\tpublic:\r\n\t\tDerived(){cout<<b<<endl;}\r\n\t\tvoid p(Base b){cout<<b.a<<endl;};\r\n\t\tvirtual ~Derived(){};\r\n\t};\r\n\r\nint main(){\r\n\tBase b;\r\n\tDerived d;\r\n\td.p(b);\r\n\treturn 0;\r\n}Can this code be compiled and why?"}
{"i": "188804", "t": "Having an int array, which size is infinite (no way to find out), how do you do a binary search?"}
{"i": "187792", "t": "you have an array of n integers, how would you find the integer pairs which sum to m? complexity?"}
{"i": "188800", "t": "Implement a queue that is FIFO. Explain the classes and methods used. \r  I explained a queue program that has an array that contains elements. A function push to add elements and a function pop to remove elements. I mentioned that \"pop\" will check to see that the next position to popped has non-null value. \r  Interviewer asked \"What if I want to add null values to my queue? what if I dont want size limitations enforced by an array?\"\r  I understand that my solution is not optimal. I would appreciate your thoughts on an optimal solution. \r  Thanks to careercup and all its users who share their questions/thoughts."}
{"i": "187770", "t": "Write thread safe getInstance function of Singleton class."}
{"i": "188781", "t": "In an integer array, find maximum sum of a sub array (sub arrays length can be anything <= the array length)"}
{"i": "188780", "t": "Convert a BST to doubly linked list in ascending order with out using additional space.\rActually the leftChild and rightChild pointer should point to previous and next nodes in the list."}
{"i": "188779", "t": "I have a stack which contains some integer data. I want to find out the min[or max] value from Stack in O(1) time. Any idea?"}
{"i": "188778", "t": "What should be the best way to invert a stack, without using any other EXTRA data structure, like a Stack2, or a temporary stack. Thus no stack1-stack2 or stack-queue-stack implementation in the answer. You just have access to push/pop feature of a standard stack."}
{"i": "188777", "t": "Is there any algorithm using comparisons that check array duplication in O(n) time limit? i.e., Suppose we have a array of type double. Then I need a function like thisbool has_duplicate(double *arr, int len)that works in O(n) time in the worst case and checks whether it has to equal elements or not."}
{"i": "187766", "t": "I want to calculate the factorial for numbers in the range 1 to 100. For small numbers, the function works but for bigger numbers for example 100! it returns incorrect result. Any ways to handle factorial of large numbers in C ?."}
{"i": "188776", "t": "I have an array of values which is almost, but not quite sorted, with a few values displaced (say, 50 in 100000). How to sort it most efficiently?"}
{"i": "187688", "t": "How would you design a concurrency system for a linux shared memory given that-\r-there are 1000s of readers\r-because of the large num of readers and writers, they should not be allowed to obtain locks and block large number of threads."}
{"i": "187687", "t": "Why should you not call a virtual method from within a derived class constructor?"}
