{"i": "3282662", "t": "give an example of an application a binary tree is used for"}
{"i": "3313661", "t": "What is the difference between function overwritting and function overloading"}
{"i": "3285663", "t": "There is an array with odd elements, and we know beforehand that only one element occurs odd times. Other elements are replicated even times in the array. How to find that single element? Extra requirements: Using C to implement on the whiteboard and propose test cases."}
{"i": "3266662", "t": "Excel labels its rows with letters. For example row 0 is labeled 'A', row 1 is labeled 'B', row 26 is labeled 'AA', and so on. \r Design, and implement in C, an algorithm that will map any row number, such as 2842, into into its proper row designation. For instance row 2842, maps to the designation 'DEI'"}
{"i": "3296661", "t": "How to merge K sorted list in O(N*log(K)) time, Each of list has N elements.\r sorry... Here N means the total number of elements ."}
{"i": "3264661", "t": "Write a Code to merge N sorted array."}
{"i": "3185687", "t": "Input integer iIn is given as input.\rOutput is also an integer iOp.\r The string must contain only the following characters.\r'A' and \r'B'\r The string formation must follow these rules.\r 1. The number of A's and B's in the string are equal.\r2. For any prefix of the string, the number of A's must be greater than or equal to\rthe number of B's.\r Given iIn, then find the number of possible string which match this criteria iOp.\rEg,\r AB\r ABAB\rAABB\r  AAABBB\rABABAB\rAABBAB\r...\r  Any suggestions towards solving this question is welcome. \r A Brute force method can solve the problem.\rBut when the input becomes larger, the algorithm might eventually get slow. So a better solution is to be\rsuggested."}
{"i": "3217700", "t": "Given a text file and a function getNextWord(), which returns a next word read and NULL if EOF is reached. A comparison function to compare two strings bool isEqual(char* str1, char* str2) is also given. Create a link list, which has following node type : struct Node{\r            Node* next;\r            int freq;\r            char* str;\r          }; \rThe list must be sorted according to freq and algo must work in less than O(n2)."}
{"i": "3248676", "t": "what are the various ways to terminate a process by itself normally and abnormally. Also the ways to kill the process by another process in unix"}
{"i": "3197694", "t": "What are the different file types avilable in unix system"}
{"i": "3253672", "t": "Write a funtion to find out longest palindrome in a given string"}
{"i": "3209695", "t": "Write a program to print all the combinations of a given array of elements."}
{"i": "3197693", "t": "Implement linkedlist operations without using pointers. They want all the operations of linkedlist like add at any position or delete at any position to be supported"}
{"i": "3247668", "t": "what s the name of the doubly linked list with no data field............."}
{"i": "3214677", "t": "A graph is given. You need to design a data structure with minimum space complexity such that it does the follows\r --> Finds whether nodes u and v have a path in between them in O(1) time.\r --> Finds whether there is a path of length k between u and v in O(k) time.\rThe same data structure to be used for both the purposes."}
{"i": "3251667", "t": "I was interview for a Test lead. There were 6 round in total and all the rounds were as expected and question which were asked were as expected, like given a scenario how would you test.\rThis algo question I was not able t crack so, posting it.\rThere is an array (with +ve integer) we need to sort the array ONLY with the help of the following function.\rFlip(Array a, int size, int flipPos)\rso if the array is \ra = 3,2,6,8,1,9\rand i call \rFlip(a, 6, 3)\rthen a = 6,2,3,8,1,9.\rAny ideas in how to proceed.\rHe told me that you can find the largest or smallest element on o(n) time and then go ahead wth that.\rThanks."}
{"i": "3170692", "t": "Design a elevator"}
{"i": "3181691", "t": "How will design an algorithm to get Least Recently Used (object) in a Cache {see LRU Cache in wiki}"}
{"i": "3185682", "t": "Implement stack using two queues."}
{"i": "3173697", "t": "Sort a stack using recursion."}
{"i": "3242682", "t": "what are volatile and transient modifiers??"}
{"i": "3219686", "t": "Input : Two large singly linked lists representing numbers with most significant digit as head and least significant as last node.\r Output: Difference between the numbers as a third linked list with Most significant digit as the head.\r Eg:\r---\rInput:\rA = 5->4->2->0->0->9->0->0\rB = 1->9->9\rOutput:\rC = 5->4->2->0->0->7->0->1 \r Required complexity : \rO(n) \r Constraint: \rReversing linked list is NOT allowed"}
{"i": "3230685", "t": "What is the difference between dynamic loading and dynamic linking??"}
{"i": "3180687", "t": "Given a boolean matrix with all the true elements on left side in the row so that each row can be broken into two parts left part containing only true elements and right part containing only false elements. Find the row with max number of true elements in it."}
{"i": "3190687", "t": "Given a root and a node of a binary tree, write a function which finds all the nodes which are a 'k' distance from the given nodes. (distance can be upwards and downwards)"}
{"i": "3227685", "t": "Given a normal dice and a dice with blank faces, fill in the blank dice with numbers from 0-6 so that the probability of each number coming up, when you roll the two dice together, is equal."}
{"i": "3210695", "t": "static functions can call only other static functions and static variables then how does public static void main(String args[]) function is successful to call non-static functions and also non static variables?"}
{"i": "3234679", "t": "How to find no. of times each character is repeated with less time complexity.."}
{"i": "3220677", "t": "[2] There is a bank which give the 100% rate of interest (annual). you have 1 dollar today with you and you deposit that in the bank.\rafter how much time would you become the richest man."}
{"i": "3191680", "t": "[1] Design a layer in front of a system which cache the last n requests and the responses to them from the system.\rwhat data structure would you use to implement the cache in the later to support following operations.\r[a] When a request comes look it up in the cache and if it hits then return the response from here and do not pass the request to the system\r[b] If the request is not found in the cache then pass it on to the system\r[c] Since cache can only store the last n requests, Insert the n+1th request in the cache and delete one of the older requests from the cache\r The objective is to achieve all the three operations in O(1)."}
