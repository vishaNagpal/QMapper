{"i": "315745", "t": "Given a 32-bit binary number, what is the quickest way to find the position of the most significant 1 bit?"}
{"i": "311132", "t": "Given a sequence of ascending integers that start at 1 and one integer is missing from the sequence, what is the quickest way to find the missing integer?"}
{"i": "315744", "t": "Given a cube of dimensions 10 x 10 x 10, if the outer layer is stripped off, how many units remain?"}
{"i": "311117", "t": "#include<stdio.h>\r   #define TOTAL_ELEMENTS (sizeof(array) / sizeof(array[0]))\r  int array[] = {23,34,12,17,204,99,16};\r   int main()\r  {\r      int d;\r       for(d=-1;d <= (TOTAL_ELEMENTS-2);d++)\r          printf(\"%d\\n\",array[d+1]);\r       return 0;\r  }\rwhat is wrong ??"}
{"i": "315714", "t": "How will you dynamically allocate 2D array? Use 2 malloc and then do the same thing using only 1 malloc."}
{"i": "311103", "t": "Design a TV remote control for children less than 6 years old."}
{"i": "315713", "t": "Write a function to generate all possible n pairs of balanced parentheses. For example, if n=1\r{}\rfor n=2\r{}{}\r{{}}"}
{"i": "315708", "t": "Program 2: Implement an elevator system"}
{"i": "315707", "t": "Program 1: Find the number with highest frequency in an array."}
{"i": "315706", "t": "In a telephonic interview:\r1. Advantages and disadvantages of recursions\r2. Comparison of BT and BST\r3. BFS and DFS - advantages and disadvantages\r4. how to detect a loop using DFS\r5. shortes path algorithm"}
{"i": "315673", "t": "Did you use any Maven repository like nexus? How Maven is better than ANT"}
{"i": "315672", "t": "How inheritance works in Hibernate, for example 1. Map one table per concrete class. explain all"}
{"i": "311074", "t": "Generate a random number for SSN i,e int of xxx-xx-xxxx (9 digits), then write a function that checks if xxx and xx and xxxx and the total xxx-xx-xxxx is a prime number and return true or false. What is the complexity of the algorithm?"}
{"i": "315664", "t": "boggle solver problem: given a NxN matrix of letters, print all the valid words. You can make assumption on the dictionary to support hasPrefix, isWord etc. How would u write the recursive function in order to search word efficiently?"}
{"i": "311055", "t": "#include<stdio.h>\r#define FUN(x,y) x##y\rint main()\r{    \r         int val1=10;\r         int val2=20;\r         printf(\"%d\\n\",FUN(val1,val2));\r         return 0;\r}\rwhat is the output of the program?"}
{"i": "311053", "t": "How to find minOfStack()in O(1). restriction is: pop()and  push() should be in O(1) only."}
{"i": "311042", "t": "Write a code to clear nth bit in an integer."}
{"i": "311041", "t": "Write a code to reverse words in a sentence of words. for ex: I am a boy --> boy a am I."}
{"i": "311039", "t": "scope of x,y,p,q and where respective variables are stored.\r static int x;\rint y;\r void foo()\r{ \rstatic int p;\rint q;\r}"}
{"i": "311877", "t": "What is the use of volatile keyword in C?Gave a standard answer,asked to elaborate more.Don't know how."}
{"i": "311038", "t": "How is concurrency handled in operating systems?Difference between Mutex and Semaphores in context of threads and processes."}
{"i": "311033", "t": "how would u implement mutex?"}
{"i": "311870", "t": "how would you design a parking lot?"}
{"i": "311032", "t": "find most often seen string from a log file"}
{"i": "311869", "t": "struct node{\r   struct node* next;\r   struct node* reference;\r}\r duplicate the list by: \rstruct node* duplicate(struct node* original)\r how to handle the \"reference\" in the new list?"}
{"i": "311009", "t": "class A1 {\rpublic:\r  int upper;\r  int lower;\r  A1( int i ) : lower( i ), upper( lower+1 ) { };\r};\r what is wrong with the above code?"}
{"i": "311004", "t": "class A {\r  // ...\r};\r class B : public A {\r  // ...\r};\r void fct( A a ) { /* ... */ };\r int main() {\r  B b;\r  fct( b );\r};\r what could be the errors because of this code?"}
{"i": "310994", "t": "You are given two arrays \rint Array1[n], Array2[n];\r Each array contains numbers which are half even and half odd. Write C code that will return two arrays one having only even numbers and other having only odd numbers. You are not allowed to use additional data structures like hash,array etc but can use temp variables. The solution should have O(n) complexity."}
{"i": "311842", "t": "You have a database which catalogs all the buildings in NY. You decide to use a 4 byte integer value as unique identifier for the table. Will it work ? \r (The answer would reduce to finding number of buildings in NY)"}
{"i": "311841", "t": "What types of data structures can you use for Look ups? If you have an associative array A with index \"hello\". How is A[\"hello\"] actually evaluated , as in how does system map to a memory location using index \"hello\""}
