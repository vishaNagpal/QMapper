{"i": "9694896", "t": "how to allocate memory for string of unknown/arbitrary length during execution?\r.\r.\rmodify the following code & resultant code should allocate of any given input of arbitrary length\rchar* getstring(){\rchar* s;\rgets(s);\rreturn s;\r}"}
{"i": "9655653", "t": "given an UNSORTED real number array x1,x2,...,xn, how to find the max distance of two neighbouring numbers in the number axis. Is there any method with O(n) time complexity?\rsee an example\rgiven x[]={2.0,1.0,9.0,-3.5}\rthen the answer is 7.0, because on the number axis, it is -3.5,1.0,2.0,9.0 from left to right.\rdistance between two neighbouring numbers are 1-(-3.5),2-1,9-2.\rso the answer is 9-2=7"}
{"i": "9548366", "t": "given a file of vast size that can not fit into the main memory, given a value 'k', find the k minimum values from the file."}
{"i": "9659067", "t": "find the maximum subtree in a given binary tree which is a binary search tree (face to face)"}
{"i": "9646842", "t": "Given an N-Ary tree, WAP to find the minimum depth of the tree. (face to face round)"}
{"i": "9691840", "t": "Given an infinite size array with only 0s and 1s and sorted. find the transition point where 0s end or 1s start (written test question. coding)"}
{"i": "9548362", "t": "Given a binary tree, write a code that returns the difference between sum of nodes at even level and sum of nodes at odd level. Root is considered at level 0. (written test question. coding.)"}
{"i": "9693753", "t": "RSA EMC security division interview.\rOverall some people in this team seems are not smart enough to stay in this team since they are there since they don't have anywhere else to go. The company is pretty not flexible and not creative compared to other big IT companies such as Google or Amazon. To my surprise, there are quite many old people who unnecessarily paid a lot. If you're young and just graduated from school, I don't recommend this company."}
{"i": "9691709", "t": "45 Minute telephone interview:\r Given a large list of 2D Points (x,y) find the k closest points to a target P(x,y).\r - Implement the solution \r- Explain the running time\r- Explain how you can optimize your code\r- Explain some decisions behind why you chose to write your code that way."}
{"i": "9694673", "t": "Is int i = 2 atomic?"}
{"i": "9689832", "t": "You have to give the number times characters appear while scanning/traversing a long text.. like a book.\rThe interviewer indicated that it can be done using an array of 32(assume only lowercase alphabets) WITHOUT using the ascii values to increment the element in the array..\rHow is this possible without using ascii values of the characters?how would one differentiate among the characters then?\r Any suggestions?"}
{"i": "9689667", "t": "difference between smoketesting&sanitytesting with examples"}
{"i": "9664671", "t": "explain about the functionnal testing with examples?"}
{"i": "9688667", "t": "what is software testing with examples?"}
{"i": "9561837", "t": "remove duplicates from a sorted linked list"}
{"i": "9652667", "t": "Given an infinite sorted array containings only 0 and 1 . Find the point where 0 to 1 transition happening...."}
{"i": "9678697", "t": "Given an integer n, write code to calculate n+1, without using +,-,++,--,*,/"}
{"i": "9539861", "t": "Given 2 linked lists, merge them in-place, so that 1st element is from list1, 2nd from list2, 3rd from list1, 4th from list2, and so on.."}
{"i": "9643697", "t": "Given n arrays, find n number such that sum of their differences is minimum. For e.g. if there are three arrays\r A = {4, 10, 15, 20}\rB = {1, 13, 29}\rC = {5, 14, 28}\r find three numbers a, b, c such that |a-b| + |b-c| + |c-a| is minimum. Here the answer is a = 15, b = 13, and c = 14"}
{"i": "9633686", "t": "write a C program to create a bitmap of any size as determined by user. Say user says 64k bitmap, then create 64k long bitmap. Have set and unset methods."}
{"i": "9679682", "t": "Reorder 1st string based on  2nd string.\reg: (tractor,car) \r output: carrtto or carrott or carrtot. The order of letters not in common doesn't matter."}
{"i": "9679681", "t": "Memory management in PHP"}
{"i": "9633678", "t": "Pass by value and pass by reference in PHP"}
{"i": "9672248", "t": "Find Sophie\rAfter a long day of coding, you love to head home and relax with a loved one. Since that whole relationship thing hasn't been working out for you recently, that loved one will have to be your cat, Sophie. Unfortunately you find yourself spending considerable time after you arrive home just trying to find her. Being a perfectionist and unable to let anything suboptimal be a part of your daily life, you decide to devise the most efficient possible method for finding Sophie.\r Luckily for you, Sophie is a creature of habit. You know where all of her hiding places are, as well as the probability of her hiding in each one. You also know how long it takes you to walk from hiding place to hiding place. Write a program to determine the minimum expected time it will take to find Sophie in your apartment. It is sufficient to simply visit a location to check if Sophie is hiding there; no time must be spent looking for her at a location. Sophie is hiding when you enter your apartment, and then will not leave that hiding place until you find her. Your program must take the name of an input file as an argument on the command line.\r   Input Specifications\r The input file starts with a single number, m, followed by a newline. m is the number of locations available for Sophie to hide in your apartment. This line is followed by m lines, each containing information for a single location of the form (brackets for clarity):\r <location name>  <probability>probability is the probability that Sophie is hiding in the location indicated. The sum of all the probabilities is always 1. The contents of these lines are separated by whitespace. Names will only contain alphanumeric characters and underscores ('_'), and there will be no duplicate names. All input is guaranteed to be well-formed. Your starting point is the first location to be listed, and in effect it costs you no time to check if Sophie is there.\r The file continues with a single number, c, followed by a newline. c is the number of connections that exist between the various locations. This line is followed by c lines, each of the form:\r <location name>  <location name>  <seconds> The first two entries are the names of locations and seconds is the number of seconds it takes you to walk between the them. Again these lines are whitespace-delimited. Note that the locations are unordered; you can walk between them in either direction and it will take the same amount of time. No duplicate pairs will be included in the input file, and all location names will match one described earlier in the file.\r Example input file: \r4\rfront_door    .2\rin_cabinet    .3\runder_bed     .4\rbehind_blinds .1\r5\rfront_door under_bed     5\runder_bed  behind_blinds 9\rfront_door behind_blinds 5\rfront_door in_cabinet    2\rin_cabinet behind_blinds 6\r   Output Specifications\r Your output must consist of a single number followed by a newline, printed to standard out. The number is the minimum expected time in seconds it takes to find Sophie, rounded to the nearest hundredth. Make sure that the number printed has exactly two digits after the decimal point (even if they are zeroes). If it is impossible to guarantee that you will find Sophie, print \"-1.00\" followed by a newline instead.\r Example output: \r6.00"}
{"i": "9608562", "t": "Gattaca\rYou have a DNA string that you wish to analyze. Of particular interest is which intervals of the string represent individual genes. You have a number of \"gene predictions\", each of which assigns a score to an interval within the DNA string, and you want to find the subset of predictions such that the total score is maximized while avoiding overlaps. A gene prediction is a triple of the form (start, stop, score). start is the zero-based index of the first character in the DNA string contained in the gene. stop is the index of the last character contained in the gene. score is the score for the gene.\r   Input Specification\r Your program will be passed the name of an input file on the command line. The contents of that file are as follows.\r The first line of the input contains only n, the length of the DNA string you will be given.\r The next ceiling(n / 80) lines each contain string of length 80 (or n % 80 for the last line) containing only the characters 'A', 'C', 'G', and 'T'. Concatenate these lines to get the entire DNA strand.\r The next line contains only g, the number of gene predictions you will be given.\r The next g lines each contain a whitespace-delimited triple of integers of the form\r <start> <stop> <score> representing a single gene prediction. No gene predictions will exceed the bounds of the DNA string or be malformed (start is non-negative and no more than stop, stop never exceeds n - 1).\r Example Input: \r100\rGAACTATCGCCCGTGCGCATCGCCCGTCCGACCGGCCGTAAGTCTATCTCCCGAGCGGGCGCCCGATCTCAAGTGCACCT\rCACGGCCTCACGACCGTGAG\r8\r43  70  27\r3   18  24\r65  99  45\r20  39  26\r45  74  26\r10  28  20\r78  97  23\r0   9   22\r   Output Specification\r Print to standard out the score of the best possible subset of the gene predictions you are given such that no single index in the DNA string is contained in more than one gene prediction, followed by a newline. The total score is simply the sum of the scores of the gene predictions included in your final result.\r When constructing your output, you may only consider genes exactly as they are described in the input. If you find the contents of a gene replicated elsewhere in the DNA string, you are not allowed to treat the second copy as a viable gene. Your solution must be fast and efficient to be considered correct by the robot.\r Example Output: \r100"}
{"i": "9670311", "t": "It's A Small World\rAs a popular engineer, you know many people in your home city. While traveling around town, visiting your friends, you realize it would be really handy to have a program that tells you which of your friends are closest based upon which friend you are currently visiting.\r Being an engineer who is interested in writing software that is useful to everyone, you decide to write a general solution to your quandary. Each of your friends lives at a unique latitude and longitude. For the purposes of this program, the world is flat, and the latitude and longitude are for all intents and purposes Cartesian coordinates on a flat plane. For example, in our flat world, lat 45, long -179 is not as close to lat 45, long 179 when compared to lat 45, long 170.\r Write a program that takes a single argument on the command line. This argument must be a file name which contains the input data. Your program should output the nearest three other friends for each friend in the list. You are virtually a celebrity and your friend list can be astoundingly huge. Your program must exhibit better than quadratic asymptotic growth in runtime as a function of the size of your friend list, and be robust and resource efficient.\r   Input specifications\r The input file consists of multiple lines, all of which follow the same format. Each line has three values separated by an amount of white space. The first value is the unique id number of that friend, expressed as an integer. The second value is the latitude of that friend, expressed as a rational number. The third and last value is the longitude of that friend, expressed as a rational number. Every friend lives at a unique combination of latitude and longitude (e.g. no two friends will ever share the exact same values). Each line ends with a single new line, except for the last line of the file, which may or may not have a terminating new line.\r Example input file: \r1  0.0      0.0\r2  10.1     -10.1\r3  -12.2    12.2\r4  38.3     38.3\r5  79.99    179.99 You are guaranteed that your program will run against an input file that is well formed, and has at least four lines. You are also guaranteed that your list of friends have unique distances between one another; no two distinct pairs of friends will have the same distance between them.\r   Output specifications\r In the order presented in the input file, output the nearest three friends for each friend. Each line of output should start with the integer id of the friend followed by a single space character, and then the list of three nearest other friend ids followed by a single new line. Even the last line of the output should terminate in a new line. This list should be comma-delimited, with no spaces. The list must be in order of proximity, with the closest of the three being first, and the farthest of the three being last.\r Example output: \r1 2,3,4\r2 1,3,4\r3 1,2,4\r4 1,2,3\r5 4,3,1"}
{"i": "9608559", "t": "find missing numbersin given billion number.( numbers lie between 1-k)"}
{"i": "9674230", "t": "Sort 10 GB file using 2 GB memory. and  complexity"}
{"i": "9672072", "t": "print a tree layer by layer"}
{"i": "9663203", "t": "given a series of stock prices in an array. Pick when to buy and when to sell to gain max profit.\r(This a the worst experience for me ever! It is just a simple max sum problem. The interviewer came in with his computer and kept smiling at it while his phone rings all the time. I couldn't even think. This guy totally screwed my interview.)"}
