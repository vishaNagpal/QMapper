{"i": "4773069298073600", "t": "Using a Java data structure, eliminate all unnecessary/stop words from a string. Assume you are given the string\r\"To be or not to be - that is the question: Whether it is nobler in the mind to suffer, the slings and arrows of outrageous fortune. Or to take up arms against a sea of troubles, and by opposing end them\"\rThe unnecessary words to remove are \"a\", \"be\", \"to\", \"the\", \"that\", \"this\", \"or\"\rSo the resulting string should be like this\r\"not - is question: Whether it is nobler in mind suffer\u2026"}
{"i": "5977760749060096", "t": "Given two parameters (a target string and a source string), write code that returns the number of times characters found in the source string occur in the target string.\r For example, if target=\"Hello world\" and source=\"llld\" then return 4"}
{"i": "4851860842217472", "t": "What are some ways to crack a cryptohash? Is your method efficient, or are there better ways?"}
{"i": "6039706693271552", "t": "What language are you most comfortable with? (I answered C/C++)\r What's an unordered map, and how is it implemented?"}
{"i": "4808015567912960", "t": "Design a controller for kids.\r (This is a PM interview question, so you're supposed to clarify a lot to clear ambiguity before you get to an answer)"}
{"i": "4818944212860928", "t": "Given an int, write code to return the number of bits that are 1 in O(m) time, where m is the number of bits that are 1."}
{"i": "6215390451466240", "t": "Create the mirror image of a binary tree."}
{"i": "5133335818928128", "t": "For a given US based phone number, write a function to return all possible alphanumberic words that can be formed with that number, based on the keypad of a standard phone.\r For example, one possible value for 1-800-623-6537 could be 1-800-MCDNLDS"}
{"i": "6321181669982208", "t": "Given a number N, write a program that returns all possible combinations of numbers that add up to N, as lists. (Exclude the N+0=N)\r For example, if N=4 return {{1,1,1,1},{1,1,2},{2,2},{1,3}}"}
{"i": "5630478283440128", "t": "How would you create a stack backtrace once an exception has occurred on an x86 platform?\r EDIT: Sorry, I should have mentioned that you don't have GDB or any debugging tools. You're supposed to implement everything from scratch in assembly."}
{"i": "5170966342664192", "t": "Implement a synchronized queue for multiple threads, avoiding race conditions and deadlocks\r EDIT: There was a tougher follow up btw: If you use any synchronization mechanisms, how might they be implemented at the assembly level?"}
{"i": "4893522998067200", "t": "In 1-9 keypad one key is not working. If some one enters a password then not working key will not be entered. You have given expected password and entered password. Check that entered password is valid or not\rEx: entered 164, expected 18684 (you need to take care as when u enter 18684 and 164 only both will be taken as 164 input)"}
{"i": "5159745572831232", "t": "Given a string, and the letters are NOT DISTINCT, print out all possible permutations. The solution must be optimized so don't implement the naive O(n!) solution."}
{"i": "6543214668414976", "t": "Write a function called FooBar that takes input integer n and prints all the numbers from 1 upto n in a new line. If the number is divisible by 3 then print \"Foo\", if the number is divisible by 5 then print \"Bar\" and if the number is divisible by both 3 and 5, print \"FooBar\". Otherwise just print the number.\rfor example FooBar(15) should print as follows:\r1\r2\rFoo\r4\rBar\rFoo\r7\r8\rFoo\rBar\r11\rFoo\r13\r14\rFooBar\r I know, easy right? ;)"}
{"i": "5428361417457664", "t": "You have three jars filled with candies. One jar is filled with banana candies, one jar is filled with lemon candies and one jar has a mix of both. All the jars are mislabelled (i.e. all the jars have wrong labels about what kind of candies they contain).\rAll the candies look very similar in shape, size and color and they even smell the same. The only way to distinguish them is by tasting.\rYou have to eat one and only one candy to determine the correct jar labels. You can eat that one candy from any jar you want as long as you eat only one in total."}
{"i": "6373438369300480", "t": "How do you protect your object of your class being deleted by the clients?"}
{"i": "5926847669862400", "t": "please tell me about a good website data structure in c++???"}
{"i": "5753320253685760", "t": "when we have to override equals and hashcode in java..?\rwhat will happened if you dont override .. Explain with program."}
{"i": "6559804516466688", "t": "Suppose I have some (lng, lat) coordinate. I also have a big list of ranges,\r [ { northeast: {lng, lat}, southwest: {lng, lat} } ... ]\r How can I most efficiently determine which bucket the (lng, lat) point goes into?\r Also, on a design perspective. Would it make more sense for the \"list of ranges\" to be on some database like mysql, monodb, or on something like memcached, redis?"}
{"i": "5639700014432256", "t": "why strings are immutable ? \rhow many objects will be created in \rString temp = \"A\" + \"B\" + \"C\" ;\rexplain your answer in detail."}
{"i": "5684278553739264", "t": "Given s string, Find max size of a sub-string, in which no duplicate chars present."}
{"i": "5120188823371776", "t": "Find a sub-sequence in a list of numbers where sum of sub sequence is maximum. Numbers can be positive or negative"}
{"i": "5743007936544768", "t": "Find all the anagrams in a mail content."}
{"i": "6282862240202752", "t": "Given an integer array. Perform circular right shift by n.\rGive the best solution."}
{"i": "6040572397617152", "t": "C={1,2,2,3,4,5}\rSum=5\r subset;\r{1,2,2}\r{1,4}\r{2,3}\rusing exhaustive force in java\r ideas"}
{"i": "5141606751535104", "t": "You are given a List containing all the Symbols of the periodic table.\rYou are also given a List containing all the words in the English dictionary.\r How do you find the longest word that can be made using symbols of the periodic table?\r Note: Symbols can be 1 or 2 chars long (for eg. O => oxygen, Fe => Iron)"}
{"i": "5473959910834176", "t": "You are given  two string named str1 and str2. Your task is to find  the  minimum window in str1 which contains all characters from string str2."}
{"i": "5141226646929408", "t": "Given two strings remove duplicates and test it"}
{"i": "5783246948270080", "t": "Given a function to reverse a linked list write code to test the function"}
{"i": "5947744195706880", "t": "Remove common characters from two strings and print the common characters and test cases"}
