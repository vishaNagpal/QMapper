{"i": "6018738030641152", "t": "Define amazing number as: its value is less than or equal to its index. Given a circular array, find the starting position, such that the total number of amazing numbers in the array is maximized.\rExample 1: 0, 1, 2, 3\rOuptut: 0. When starting point at position 0, all the elements in the array are equal to its index. So all the numbers are amazing number.\rExample 2: 1, 0 , 0\rOutput: 1. When starting point at position 1, the array becomes 0, 0, 1. All the elements are amazing number.\rIf there are multiple positions, return the smallest one.\r should get a solution with time complexity less than O(N^2)"}
{"i": "5140671963856896", "t": "Given 'n' circles (each defined by center and radius)\r Write an algorithm to detect if circles intersect with any other circle in the same plane\r Better than O(n^2) complexity"}
{"i": "5695352763056128", "t": "Return the pivot index of the given array of numbers. The pivot index is the index where the sum of the numbers on the left is equal to the sum of the numbers on the right. Input Array {1,2,3,4,0,6}"}
{"i": "5142855417856000", "t": "Given a sorted array, and given a number n, find number of times n occurs in the array."}
{"i": "5733359197093888", "t": "Given the village of a map represented as a 2D grid containing houses,bushes and open-spaces, write a program to find a point for conducting a meeting in the map. Such point should be minimum from all the houses in the village.\r Eg.# # # # #\r\n# # A   #\r\n#    B  #\r\n#       #\r\n#    #  #\r\n#   C   #\r\n# # # # ## -> represents the bushes\rA, B, C -> position of houses\r I provided a O(n*a*b) approach, where n-> no. of houses , a,b->dimensions of the grid.\r The interviewer asked me for some special cases. Can it be done more efficiently?"}
{"i": "5721669436964864", "t": "With given Binary Tree below, traverse the tree and print the tree from bottom up order\r\t1 \r       / \\\r      2   3\r     /\\   /\\\r    4  5 6  7\r output: 4567231\r Hint: the traverse  is called \"Level Order Tree Traversal\"\r I hope someone memorize this traversal and pass the exam and all these companies judging canditates with one algorithm could think they hired the best canditate."}
{"i": "5719799180034048", "t": "Write an algorithm that returns any duplicate in an array of integers. The algorithm must run in O(n) time and O(1) space. (hint: the integers in the array are not greater than the size of the array)."}
{"i": "5654879138742272", "t": "Given the linked list is sorted, implement a method for insert and element in such a way that the list remain sorted."}
{"i": "5694990643625984", "t": "Implement  a linked list and all its basic operations (add, delete, remove and insert)"}
{"i": "5682151442874368", "t": ""}
{"i": "5658567240581120", "t": "Program to increment the vavue of array element by 1 and cost require to each  increment value us 1 print cost"}
{"i": "5682945474953216", "t": "Using that data structure, devise an algorithm to compute the dot product between two sparse matrices."}
{"i": "5654271400869888", "t": "What data structure would you use to store the entries of a sparse matrix?"}
{"i": "5722046857216000", "t": "We are given a book with N number of pages and two words. Find the distance(in pages) between the first occurrence of first word and first occurrence of second word. For Example, you are given the book \"Thinking in C++\" and two words 1. \"Inheritance\" whose first occurrence is in page 220 and 2. \"Polymorphism\" whose first occurrence is in page 350, the result would be 130. You can take your decision to choose how the data structure of the book would be."}
{"i": "5762815223660544", "t": "Create a function to calculate the height of an n-ary tree."}
{"i": "5206090691117056", "t": "You have a matrix that is sorted as such: For each value, every index to its right and below it must be larger than the current space's value. Likewise, all entries to its left and above it must be smaller than the current value. How would you go about searching this matrix for a specific number, given its sorted nature?"}
{"i": "5767660752076800", "t": "Just a disclaimer: I doubt you will ever get this interview question. My interviewer even started off by saying, \"Hmm, well this isn't really fair, but...\" So don't place too much stock in whether or not you can solve this.\r Question: You have a group of pigs and buckets of food for said pigs. There are 1,000 buckets of food, and exactly 1 of them is poisoned. Your goal is to determine, by the end of 1 hour, which bucket is poisoned.\r The poison takes 30 minutes to kill a pig, and you'd like to kill as few pigs as possible. The number of pigs you can test is limitless, and you can assign a number to each bucket and each pig so that you know exactly which pig ate from which bucket(s). You determine which buckets to feed to which pigs, but you have no timer and no way to guesstimate the time. What is the minimum number of pigs you need to use to solve the problem?"}
{"i": "5700340897808384", "t": "Magical binary strings are non-empty binary strings if the following two conditions are true:\rThe number of 0's is equal to the number of 1's.\rFor every prefix of the binary string, the number of 1's should not be less than the number of 0's.\rA magical string can contain multiple magical substrings. If two consecutive substrings are magical, then we can swap the substrings as long as the resulting string is still a magical string. Given a magical binary string, str, perform zero or more swap operations on its consecutive magical substrings such that the resulting string is aslexicographically large as possible. Two substrings are considered to be consecutive if the last character of the first substring occurs exactly one index before the first character of the second substring.\r -----\r Input Format\ra single binary string, str.\r Constraints\rIt is guaranteed that str is a binary string of 1's and 0's only.\r1 \u2264 length(str) \u2264 50\rIt is guaranteed that str is a magical string.\r Output Format\rFind a string denoting the lexicographically largest magical string that can be formed from str.\r Sample Input 0\r11011000\r Sample output\r11100100\r Explanation of sample\rGiven the magical string str = 11011000, we can choose two consecutive magical substrings, 1100 and 10, to swap such that the resultant string, str' = 11100100, is the lexicographically largest possible magical string possible. Thus, we return the value of str', which is 11100100, as our answer.\r ."}
{"i": "5719952523788288", "t": "How would you design Amazon Lockers?\r Amazon Lockers - Customers can use these lockers to have their products delivered. These lockers are physically available to customers at the same or several nearby zip codes."}
{"i": "5091687660519424", "t": "The amazon site was working just fine until yesterday. But in the past 24 hours processing the customer orders is taking a really long time.\r How would you debug and fix the issue?\r When I asked if anything had changed in the past 24 hours, I was told several new products had been added after which the performance issues were noticed."}
{"i": "5736619949686784", "t": "Given the root of a Binary Tree along with two integer values. Assume that both integers are present in the tree.\rFind the LCA (Least Common Ancestor) of the two nodes with values of the given integers.\r2 pass solution is easy. You must solve this in a single pass."}
{"i": "5655380106412032", "t": "You are given 2 lists - \rList 1: List<Demand> is a list of Demand objects.\rList 2: List<Supply> is a list of Supply objects.\r Return a result fulfillment List<Demand,List<Supply>>.\r This means each demand could be satisfied by more than one supplies.class Demand\r\n{\r\nDate startDate;\r\nDate expirationDate;\r\nint quantity;\r\n}\r\n\r\nclass Supply\r\n{\r\nDate startDate;\r\nDate expirationDate;\r\nint quantity;\r\n}The Demand and Supply refers to that of groceries. You must map supplies to a demand only if the supply still has at least 3 days remaining to its expiration before the demand can be fulfilled.\rA demand is said to be fulfilled 24 hours after all demands have been mapped to correspondingly available supplies."}
{"i": "5659999612174336", "t": "Given a string with only parenthesis. Check if the string is balanced.\rex - \r1) \"<({()})[]> is balanced\r2) \"<({([)})[]> is not balanced"}
{"i": "5751671394140160", "t": "Write code for the partition subroutine in Quicksort."}
{"i": "5761956498636800", "t": "How would you Design a HashTable?\rIn what ways would you attempt to address collisions?"}
{"i": "5167873535246336", "t": "For this problem, we would like you to think of a single line of text, and justify that text into a bu\ufb00er,where the \ufb01rst character of the line of text is in the \ufb01rst spot in the bu\ufb00er and the last character of textis in the speci\ufb01ed slot in the buffer.\rIn ruby, you might de\ufb01ne this function as follows:def justify(line, length)It might be called like this:puts justify(\"The quick brown fox jumps over the lazy dog.\", 52)It produces a string that looks like this:The  quick  brown  fox  jumps  over  the  lazy  dog.\r\n1234567890123456789012345678901234567890123456789012\r\n(You have 7 characters remaining in the buffer)"}
{"i": "5738147615866880", "t": "What is indexing in a database? \rWhat are the underlying data structures you think are involved in indexing of a database?\rWhat are some upsides and downsides of using indexing?"}
{"i": "5683398594002944", "t": "Given an array of integers. Find the surpasser count of each element of the array.\r\"A surpasser of an element of an array is a greater element to its right\"\rex - \rInput:  [2, 7, 5, 3, 0, 8, 1]\rOutput: [4, 1, 1, 1, 2, 0, 0]"}
{"i": "5675315331334144", "t": "Given an array of integers and a sum 'S'. Find 2 integers in the array that add up to S."}
{"i": "5769433499828224", "t": "Find the first unrepeated character in a given string. Solve this in a single pass."}
