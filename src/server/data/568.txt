{"i": "180691", "t": "Design a efficient cache, supporting retrieval of maximum element in cache along with other normal cache operations.\rSuggest data structures to be used,also tell the complexities for each of the operations."}
{"i": "182666", "t": "Do iterative post and in order traversal without keeping visited flag"}
{"i": "181680", "t": "How do u implement quicksort and mergesort algorithms without using recursion!!!\r please explain the logic n write the code"}
{"i": "175871", "t": "write an algorithm to reverse a binary tree."}
{"i": "175869", "t": "explain DMA uptill finest detail"}
{"i": "176841", "t": "What is polymorphism?"}
{"i": "176840", "t": "What is an Abstract class? What is the difference between abstract class and interface?"}
{"i": "176839", "t": "Write a function that takes a string as an argument and returns the number of unique words in the string. Now write test cases to test this function."}
{"i": "176837", "t": "When we declare a variable in C as volatile, what are the assembly level differences in the program, as in , when the code is converted by the compiler to an assembly level program, what are the differences???"}
{"i": "175806", "t": "A,B and C are one-dimensional arrays of size 100,50, and 200 respectively. Construct a program flowchart and corresponding pseudocode for an algorithm to store the first 100 numbers (1,2,3,4,5,..100) into array A, the first 50 positive odd numbers (1,3,5,7,..) into array B, and reciprocal of each position [C(5)=1/5] into array C.  After all the arrays have been defined, output each array.  Notice that no input is required.  Be sure to plan a well-structured, modular program."}
{"i": "176811", "t": "Given an array of m+n elements in the range 1 to n ie(m elements are repeated). Find the duplicate elements.\rTime Complexity: O(m+n)\rSpace Complexity: O(m)"}
{"i": "175791", "t": "How will you merge two large files each containing a date field, a sequence number and one or more english word per line? The words are:\rCase 1: sorted\rCase 2: unsorted\r The result should be sorted"}
{"i": "176791", "t": "Write a code to swap every two bits in a byte. (Using bit operators) eg: Input: 10 01 11 00 Output: 01 10 11 00"}
{"i": "176777", "t": "IN Hash is lookup always O(1). Explain why ?\rIterative preorder,post and inorder traaversal of a Binary tree?\rfinding common ancestor in a non binary tree ?"}
{"i": "176775", "t": "Among different sorting algorithms which one is best and why?"}
{"i": "175762", "t": "Design oxford english dictionary."}
{"i": "176762", "t": "\u2022\tCode should be in C or C++ and should be \u2018production quality\u2019. I.e. has to check for errors at runtime, and cannot overflow or underflow buffers or corrupt memory.\r\u2022\tPls include a paragraph explaining how you would test this:\r\u2022\tImplement a routine that processes packets from the network over a reliable TCP connection:\r HRESULT ProcessData(PBYTE pDataBuffer, IN ULONG cbBufferSize)// you need to implement this routine\r Information:\r typedef struct tag_HEADER\r{\r    ULONG cbTotalPacketLen;  \r         ULONG cbThisChunkLen;\r#define FLAG_FIRST_CHUNK_IN_PACKET   1\r#define FLAG_LAST_CHUNK_IN_PACKET    2\r   ULONG flags;\r} CHUNK_HEADER;\r The format the server sends will be a sequence of PACKETs.\rEach packet is broken up into a sequence of one or more CHUNKs. Each Chunk starts with a CHUNK_HEADER.\rThe first CHUNK in a packet has \u2018flags\u2019 field set to FLAG_FIRST_CHUNK_IN_PACKET.\rThe last chunk that has \u2018flags\u2019 FLAG_LAST_CHUNK_IN_PACKET sets.\rChunks in the \u2018middle\u2019 of packet will have neither flag set.\rA chunk can be any size up to 16384 bytes. A packet can be any size unbounded.\r The \u2018total\u2019 length of the packet will be cbTotalPacketLen, each chunk in the packet will have this same length set in the chunk header.\rThe \u2018length\u2019 of the current chunk will be always \u2018cbThisChunkLen\u2019.\r The ProcessData(...) routine will be called many times, with whatever data has arrived from the network. The network is reliable so data will arrive in sequence it was sent. However as this is a TCP stream, not a message there is no guarantee that the call to ProcessData will correspond to a complete chunk. I\r That is important point, ProcessData may be called many times for even one CHUNK. And may be called with an arbitrary number of bytes each time ranging from just one byte.\r Your goal: with ProcessData(\u2026) is to implement a routine that reads the stream and the CHUNKs and from that reconstructs a _complete_ Packet (i.e. has data from all chunks in the packet). Once a packet is constructed you should pass it to a routine:\r HRESULT ProcessPacket(PBYTE pPacketBytes, IN ULONG cbCompletePacketSize); //you do not need to implement this. Just call it EVERY time you have a completed packet."}
{"i": "175750", "t": "In a computer which has a word size of 4 bytes, how do we read just a single byte?"}
{"i": "176761", "t": "Provide an example of synchronous and asynchronous signals"}
{"i": "175749", "t": "What signal is generated on divide by 0?"}
{"i": "175748", "t": "What do we mean by 64 bit architecture? What are the advantages and disadvantages of 64 bit architecture?"}
{"i": "176760", "t": "From which type of memory does shared segment come?"}
{"i": "175747", "t": "What happens when the following piece of code is executed?\r Char *ptr;\rWhile(1) ptr = malloc(1024*1024);"}
{"i": "175746", "t": "In execution is it possible for an old process to get control back?"}
{"i": "175745", "t": "In byte addressable memory, what is the smallest size of data accessible? Is it byte? what about bool?"}
{"i": "176759", "t": "There were 3 racers A, B and C. When A finished the race, B was 8 mts behind A and C was 16 mts behind A. When B finished the race, C was 10 mts behind B. Assuming that three of them ran at constant speed, find the length of the track."}
{"i": "175738", "t": "Write a program that print numbers 1to 100 which are divided by 2 and 5."}
{"i": "176752", "t": "Explain what is meant by synchronous and asynchronous bus."}
{"i": "175711", "t": "Write a Java program that prints the size of a non-primitive Java object."}
{"i": "176727", "t": "To check whether one linked list is reverse of the other without taking extra space o(n) space."}
