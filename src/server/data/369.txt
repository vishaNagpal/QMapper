{"i": "13727770", "t": "Green Bricks asked this question for the post of project leader for their upcoming project.\rproject engineer has to be in java.\rgreen bricks also offered attractive salary.\rthe problem was as follows:\r Given a set of figures and a board (a 2D array), you are required to figure out if all the figures can be placed on the board such that no two figures overlap each other. A figure can be of any shape and is represented using a matrix of 0s and 1s. The 1s in the matrix indicate the solid part that makes the figure. \r Note: \rOverlapping of 0s of figure A with 1s and 0s of figure B is allowed. \rThe figures provided are to be fitted as is without any rotation. \rThere is only one figure per matrix. \rThe matrix describing the figure will not have any empty row or column. \rInput specification:\rThe first line contains two integers M and N (0<=50 and 0<=50), the dimensions of the board. The board is empty at the start. \rThe second line contains an integer F (0<=F<=10), indicating the number of figures followed by F figures. \rEach figure has two integers R and C, the dimensions of the matrix containing the figure followed by R lines containing C integers 0's or 1's separated by a space. \rOutput specification:\rIf all the given figures fit onto the board then print YES followed by the number of empty cells on the board, separated by a space. If all the pieces cannot be fitted on the board together then print NO. \rSample Input and Output:\r Input:\r4 4\r3\r1 1\r1\r4 3\r0 0 1\r1 1 1\r0 0 1\r0 1 1\r4 3\r1 1 1\r1 0 0\r1 1 1\r1 0 0\r  Output:\rYES 0\r this was the sample input output case.\ryou have to make the program for this which should also work on the following test cases.\rTest Case 1:\r4 4\r3 \r1 1 \r1 \r4 3 \r0 0 1 \r1 1 1 \r0 0 1\r0 1 1\r4 3\r1 1 1\r1 0 0\r1 1 1\r1 0 0 \rTest Case 2: \r4 4 \r2 \r4 4\r0 0 0 1\r0 0 1 0\r0 1 0 0\r1 0 0 0\r4 4\r1 1 1 1\r1 1 1 1\r1 1 1 1\r1 1 1 1 \rTest Case 3: \r8 8\r8 \r2 2\r1 1\r1 1\r2 2\r1 1\r1 1\r2 2\r1 1\r1 1\r2 2\r1 1\r1 1\r2 2\r1 1\r1 1\r2 4\r1 1 1 1\r1 1 1 1\r4 4 \r1 1 1 1 \r1 1 1 1\r1 1 1 1\r1 1 1 1\r4 8\r1 1 1 1 1 1 1 1 \r1 1 1 1 1 1 1 1 \r1 1 0 0 0 0 0 0\r1 1 0 0 0 0 0 0 \r  you have to figure out the answers.\r regards,\rjohn"}
{"i": "13727766", "t": "How would you eliminate and print duplicate elements of an array of 5 billion 32-bit signed integers"}
{"i": "13718775", "t": "Reverse K elements of a linked list.\rSolved on 31st May.\rIt still has one bug, if the number of elements in a linked list are not a multiple of K, then it truncates the linked list at a multiple of K.\r1->2->3->4->5->6 becomes\r3->2->1->6->5->4  for K=3\r Eg. if K=5 and number of elements is 12, it will reverse till 10 th element and then truncate it.   so when the reversed list is printed, only 10 elemtns with every 5 revesed is shown, need to fix this.package ThreadPkg;\r\n\r\nimport java.util.*;\r\n\r\nclass link\r\n{\r\n    int data;\r\n    public link nextlink;\r\n    link(int d1)\r\n    {\r\n        data = d1;\r\n    }}\r\n\r\nclass List{\r\n    \r\n    link head;\r\n    static int rev;\r\n    link revhead;\r\n    List(){\r\n    head = null;\r\n    Scanner scan1 = new Scanner(System.in);\r\n    rev = scan1.nextInt();\r\n   }\r\n\r\n    \r\n    boolean isEmpty(link head)\r\n    {\r\n        return head==null;\r\n    }\r\n    \r\n    void insert(int d1)\r\n    {\r\n        link templink = new link(d1);\r\n        templink.nextlink = head;\r\n        head = templink;\r\n    }\r\n    \r\n    void printlist(){\r\n        link head1 = head;\r\n        while(!isEmpty(head1))\r\n            {\r\n            System.out.print(head1.data + \" \");\r\n            head1 = head1.nextlink;\r\n            }\r\n        System.out.println();\r\n            }\r\n\r\n    void reverse()\r\n    {\r\n        boolean flag=true;\r\n        revhead = head;\r\n        link previous=revhead,temp=null,temp2=null;int i=1;\r\n        while(true)\r\n    {\r\n     i++;\r\n        \r\n    for(int j=0;j<(2*rev-1);j++)\r\n    {\r\n        if(isEmpty(previous))\r\n        {\r\n     // \tprevious=temp2;\r\n        \tbreak;\r\n        }\r\n        temp2=previous;\r\n        previous=previous.nextlink;\r\n        \r\n    }\r\n        \r\n            for(int k=0;k<rev;k++)\r\n            {\r\n       if(isEmpty(revhead))\r\n        {\r\n            return;\r\n        }\r\n             \r\n        \t\ttemp = revhead.nextlink;\r\n                revhead.nextlink = previous;\r\n                previous = revhead;\r\n                revhead = temp;\r\n            }\r\n            \r\n        if(flag){\r\n            head=previous;\r\n        flag=false;\r\n        }\r\n         previous=temp;\r\n        }\r\n       \r\n    }\r\n    }\r\n\r\nclass RevKLinkedList {\r\n\r\n    public static void main(String[] args) {\r\n        \r\n        \r\n    \tList list1 = new List();\r\n        \r\n        list1.insert(10);\r\n        list1.insert(20);\r\n        list1.insert(30);\r\n        list1.insert(40);\r\n        list1.insert(50);\r\n        list1.insert(60);\r\n        list1.insert(70);\r\n        list1.insert(80);\r\n        list1.insert(90);\r\n        list1.insert(100);\r\n        list1.insert(110);\r\n        list1.insert(120);\r\n        list1.printlist();\r\n        list1.reverse();\r\n        list1.printlist();\r\n        }\r\n}"}
{"i": "13719754", "t": "Given a matrix of size n x m filled with 0's and 1's\re.g.:\r1 1 0 1 0\r0 0 0 0 0  \r0 1 0 0 0\r1 0 1 1 0\r if the matrix has 1 at (i,j), fill the column j and row i with 1's\ri.e., we get:\r1 1 1 1 1\r1 1 1 1 0  \r1 1 1 1 1\r1 1 1 1 1\r complexity: O(n*m) time and O(1) space\rNOTE: you are not allowed to store anything except\r'0' or '1' in the matrix entries"}
{"i": "13720752", "t": "How to find popular cost of the books,\rsay book1 $10\rbook2 $20\rbook3 $40\rbook4 $50\rbook5 $10\rbook6 $20\r We can use any algorithm to find the popular cost.\r(i think most repeated cost)"}
{"i": "13725757", "t": "A newly established university in New York has its campus located in a remote corner of the city. The university offers several courses and students are required to take a certain number of these courses. Each course publishes its schedule of lectures on a day-wise basis, i.e., it publishes the days of the week on which it holds lectures. Each course chooses exactly three days of the week for lectures. Travelling to the university is a nuisance and all the students who attend courses there, seek to minimise the number of days that they should have to travel. Given each course's schedule, you have to help the students decide on a combination of courses, such that they minimise the number of days that they have to travel to the university. \rThe university has strict attendance norms and it insists that students should attend all the lectures that their respective course offers. \rAssume that the number of courses required will never be greater than the number of courses offered. In addition, there will be a unique combination of days, which allows the students to take the required number of courses and minimise travel. \rInput specification:\rFirst line will contain total number of courses (T) and the number of courses you are required to register (R) for. \rThe next T lines will each contain name of the course and those days on which the lectures for the course are held. The first word on each line is the name of the course and the rest of the words are three-letter words signifying the days of the week. E.g., \"Physics MON WED FRI\". \rOutput specification:\rYou should output the names of the days on which the student is required to go to the University to attend lectures. These should be printed on a single line in sorted order (SUN to SAT) with a single whitespace as a separator. Terminate the output with a newline. \r Sample Input and Output:\r Input:\r6 3\rPhysics        MON WED TUE\rChemistry   TUE WED THU\rBiology        WED SAT THU\rEconomics  MON FRI WED\rEnglish        TUE WED FRI\rHistory  MON THU FRI\r Output:\rMON TUE WED FRI\r  Input:\r6 2\rPhysics        SUN TUE WED\rChemistry   TUE WED THU\rBiology       THU WED FRI\rEconomics  MON WED FRI\rEnglish       THU TUE WED\rHistory       FRI MON THU\r Output:\rTUE WED THU"}
{"i": "13722732", "t": "The second round interview: Implement a binary tree with the given interface, then discuss the implementation via remote desktop and phone./*\r\n * An interface for an sorted binary tree.\r\n * \r\n * The interface provides methods for inserting values, checking if certain values are contained and iterating over the elements.\r\n * Note: Implementing classes should provide an iterator that traverse the inserted object in the sorted order.\r\n */\r\npublic interface IBinTree<V extends Comparable<V>> extends Iterable<V> {\r\n\t/*\r\n\t * Insert an object into the binary tree. Note: The tree should be sorted, inserting the same object twice is allowed but the insert is expected to be stable.\r\n\t */\r\n\tvoid insert(V obj);\r\n\t/*\r\n\t * Batch-insert multiple elements.\r\n\t */\r\n\tvoid insert(Vector<V> vec);\r\n\t/*\r\n\t * Check if the object is already in the tree. Return true if it is, false otherwise. \r\n\t */\r\n\tboolean contains(V obj);\r\n}"}
{"i": "13718763", "t": "The first round: Phone interview + online coding:\r \ufeffYou are given an array of n integers, each of which may be positive, negative or zero. Give an algorithm to identify the start and end index, i and j, of the interval whose elements form the maximal sum of all possible intervals. Assume j >=i\r   e.g. {1  3  -8  2  -1  10  -2  1} -> i=3 , j=5 \u2013 sum = 11\r   Example non-maximal sum intervals:\r i=0, j=5 \u2013 sum = 7\r i=2, j=4 \u2013 sum = -7"}
{"i": "13721727", "t": "I know about the classic \"Tortoise and Hair\" algorithm to detect cycle in a LinkedList. What is a similar fast way (without using hashtables) for finding the node at which the cycle starts i.e. the node with 2 incoming edges and one outgoing edge? I got asked this during an interview and she did not bother to tell me the answer!"}
{"i": "13728731", "t": "An application given to you, but you dont have any documents for that appln. You need to test that application... How will you do??\r Also, if you analyze the appln and find the flow for it how will you ensure that the flow u found is the right one??"}
{"i": "13721725", "t": "Given set of N integers (both +ve and -ve), find the continuous subset where the sum is maximum. Return the start and end indices."}
{"i": "13718748", "t": "Given random integers in N number of files , with each file having set of integers (count different in each set). To find if the sum of all these integers divisible by 8 or not ? Optimize your solution."}
{"i": "13718746", "t": "What is conditional compilation ? Please explain it with an example."}
{"i": "13721720", "t": "write a program that displays the its source code as its output."}
{"i": "13722716", "t": "create an array and remove all the duplicates in the array.no duplicates are allowed in the array.display the contents of the array finally after the duplicates are removed."}
{"i": "13723715", "t": "You have a list of coins of some denominations(d1<d2...<dk). You have unlimited supply of these coins. Find out the how can u make a sum S using minimum number of coins. \rDP solution was required as he was not satisfied with greedy approach."}
{"i": "13726731", "t": "In this problem, you have to implement a variation of Insertion Sort as described below.\rSuppose X is an array of N positive integers to be sorted. In this scheme, another array Y is used to store the\rsorted integers. This array is to be viewed as a circular array, ie. index (N-1)+1 = index 0 and index 0-1 =\rindex N-1. The sorted integers get stored in a circular manner in Y, ie, it is possible that the index of the\rsmallest integer may be greater than the index of the largest integer.\rEg. 6 8 _ _ _ 1 2 4 5 is a view of the array Y sometime into the algorithm. \u2019_\u2019 indicates unused locations of\rthe array. Smallest integer 1 is at index 5, largest integer 8 is at index 1. So the sorted array in Y is to be\rgenerated by printing the contents from index 5 to 1, assuming the array wraps around at the end, ie. after\rindex 8, the next index is 0.\rAssume that h holds the index of the smallest integer in Y and t holds the index of the largest integer in Y.\rInitially,\r     1. h = t = 0\r     2. Y[0] = X[0] ie. the first integer in X[] is copied as the first integer in Y[].\r     3. All other elements in Y[] are initialised to a dummy value -1.\rThe rest of the integers in X[] are now inserted one by one into Y[] such that Y[] always contains a sorted\rlist of integers, with the smallest integer at index h and the largest at index t. This is done in the following\rmanner:\rLet I be the next integer from X[] to be inserted into Y[]. Scan the array Y downwards from index h (with\rwrap-around at the end) till index t and find out the place in Y[] where I has to fit in. If I fits in at either end\rof the list, then insert it at the appropriate place in Y[]. Modify either t or h as appropriate to indicate the new\rarray structure; ie. either t is incremented or h is decremented (with wrap-around).\rIf I fits in somewhere in the middle of the list, then I should be inserted by shifting all the S smaller integers\rone place to the left or by shifting all the L larger integers one place to the right, depending on the number of\rintegers to be shifted. That is, if S < L, the smaller integers should be shifted one place to the left and if S >=\rL, the larger integers should be shifted one place to the right. Again either h or t should be modified\rappropriately.\rExample\rIntegers to be sorted X[]: 25 57 37 48 12 92 86 33\rContents of Y[] after inserting each integer from X[]:\r                                           Initially (t=0, h=0)\r25 \u20131 \u20131 \u20131 \u20131 \u20131 \u20131 \u20131\r                                           57 fits in at end (t=1)\r25 57 \u20131 \u20131 \u20131 \u20131 \u20131 \u20131\r                                           37 fits in middle, S=1, L=1, so shift 57 right. (t=2)\r25 37 57 \u20131 \u20131 \u20131 \u20131 \u20131\r                                           48 fist in middle, S=2, L=1, So shift 57 right. (t=3)\r25 37 48 57 \u20131 \u20131 \u20131 \u20131\r                                           12 fits in at beginning, circular property, (h=8, t=3)\r25 37 48 57 \u20131 \u20131 \u20131 12\r                                           92 fits in at end (t=4).\r25 37 48 57 92 \u20131 \u20131 12\r                                           86 fits in middle, S=5, L=1, so shift 92 right, (t=5).\r25 37 48 57 86 92 \u20131 12\r                                           33 fits in middle, S=2, L=5, so shift 12, 25 left (h=7, t=5).\r33 37 48 57 86 92 12 25\rInput Specification\rThe input will consist of a single line containing an integer N followed by the N integers to be sorted. All\rintegers are positive and are separated by a single space. There will be no duplicates among the N integers.\rOutput Specification\rThe output should consist of N lines, each line containing N integers. The N integers are the contents of Y[]\r(ie. Y[0] to Y[N-1]) after the insertion of each integer from X[]. All integers on a line should be separated by\ra single space. N will be less than 50.\rSample Input/Output\rInput\r8 25 57 37 48 12 92 86 33\rOutput\r25 -1  -1 -1 -1 -1 -1 -1\r25 57  -1 -1 -1 -1 -1 -1\r25 37  57 -1 -1 -1 -1 -1\r25 37  48 57 -1 -1 -1 -1\r25 37  48 57 -1 -1 -1 12\r25 37  48 57 92 -1 -1 12\r25 37  48 57 86 92 -1 12\r33 37  48 57 86 92 12 25"}
{"i": "13717711", "t": "Rain strikes and the roads are flooded, Mr X has to get home from work. Your task is to make sure he\rreturns home in the shortest time.\rConsider the roads as a graph with crossings as nodes, and the path between two nodes as an edge. Assume\rthe graph is undirected and the nodes are numbered, 1 to V (V <= 50).\rThe input consists of :\r    1. An integer H on a line, this is the height of Mr X.\r    2. Two integers N and M on the next line, where, N is the number of edges in the graph. M is the\r        number of nodes in the graph.\r    3. A sequence of N lines each having 4 integers : C1 C2 T D where, C1, C2 are the nodes (or\r        crossings), T is the time it takes to go from C1 to C2. D is the water depth along the edge(or road)\r        from C1 to C2.\r        Note: The depth D has to be less than the height of Mr X for him to be able to take the road.\r    4. Two integers S and E indicating the node at which Mr X starts and where he is expected to go to,\r        respectively.\rAs output you have to give the shortest path starting at S, listing each vertex in the order and ending with E\rthat Mr X can take. Assume that there will be at least one way to reach the destination and that the shortest\rpath is unique.\rSample Input/Output\rInput\r5\r10 7\r1 2 10 4\r1 4 6 3\r1 5 8 2\r2 3 2 1\r3 7 1 2\r2 6 1 3\r4 6 4 4\r6 7 2 5\r5 4 2 6\r5 7 6 1\r1 7\rOutput\r1 2 3 7"}
{"i": "13721700", "t": "Consider a hash table of size N, numbered 0 to N-1. You have to insert integers into this table using the\rhashing technique given below:\rLet i be the integer to be inserted. Compute the index j of the location where the insertion is to be made as j\r= i mod N. If this location is empty then put the element at this position else recompute the next location as\rfollows:\rRemove the right most digit of i. Using the new value of i, recompute j = i mod N.\rIf the digit removed was odd, then move j locations forward from the current location else move j locations\rbackward from the current location (assume 0 as even). Note that this move will wrap around both the edges\rof the table.\rKeep doing this till you either find a free location or all the digits of i have been removed. When i comes to\ronly one digit, and its rightmost digit is removed, the number remaining is zero - therefore, this will lead to a\rzero-step move.\rIf all digits of i have been removed and yet unable to find a free location, from the last location tried, start\rmoving in the direction corresponding to the last digit removed. Keep moving till you detect a free location.\rAssume that the number of integers inserted is not more than the table size.\rInput Specification\rThe first line will contain just one integer. This will give the table size, N. On the next line will be the list of\rpositive integers that need to be inserted into the table. The integers will be separated by a space each, and\rthe last integer will be -1 indicating end of input. (-1 is not to be inserted into the table).\rOutput Specification\rThe output should contain, for each integer, the locations that were checked while inserting that integer\r(including the location in which the integer was finally inserted). The locations checked for each of the\rintegers should be output on a line by itself, separated by one space each, each line being terminated by a\rnew line.\rSample Input/Output\rInput\r7\r38 52 145 16 179 4 -1\rOutput\r3\r3   5\r5   5 4\r2\r4   0\r4   4 3 2 1"}
{"i": "13725708", "t": "On last sunday in the interview round this question was asked.\r An older person has a very old computer at his house. It is so old that there is no notion of virtual memory in the operating system. Instead it uses a simple memory allocation technique called the 'Best Fit Algorithm'. The BFA works like this:\rWhenever a request comes in for some memory space, the OS looks for the smallest, continuous empty space, which can satisfy it, and allocates a portion of this region to the program making the request. If such space cannot be found, the program is terminated and all the memory used by the program is freed. Any program can get terminated due to two reasons:\rThe program exits\rEnough memory is not available to start the program or keep it running\rAll memory requests that come in at the same time-instant are processed in ascending order of process-id. If while processing, a program is terminated for lack of memory, all memory held by it is freed before processing any other request and no further memory requests by the terminated program are considered. All termination is also done in order of process-id.\rYou have to write a program to simulate this algorithm and print out the number of processes that were terminated due to lack of memory.\rNote:\r1.No process will request for memory before its start-time or after its end-time.\r2.All memory sizes are specified in KB.\r3.The memory is linear in nature, i.e., addresses do not wrap around. It starts at zero and goes up to N-1 KB.\r4.At a given time unit, all processes that have reached end-time will be terminated (and memory freed) before other memory requests are serviced.\r5.The total free space available in memory might be enough to satisfy a request, however the OS will terminate the process if a continuous region of empty space is not found\rInput specification:\rFirst line has an integer N (0 < N <= 1000), size of the memory in KB.\rSecond line of input will have integer P (0 <= P <= 20), the total number of processes to be run on the system.\rNext P lines will have data for each process in the following format:\r<process-id> <start-time> <end-time> <initial-memory>\rThese input lines will be sorted in ascending order of the process-id.Process-id will be unique integers greater than zero.\rNext line will have integer R (0<= R <= 20), which specifies the subsequent memory requests by any process.\rNext R lines have the following format:\r<process-id> <request-time> <memory-required>\rOutput specification:\rAn integer specifying the number of processes that were terminated due to lack of memory\rSample Input and Output:\r Input:\r100\r4\r1 3 7 20\r2 0 4 30\r3 0 3 70\r4 0 10 25\r2\r3 2 30\r2 2 10\r Output:\r2\r Input:\r10\r2\r1 0 8 4\r2 0 3 2\r3\r1 1 2\r2 1 2\r1 4 4\r Output:\r1"}
{"i": "13723703", "t": "In 1000 wine bottles stack 10 are poisoned given 10 rats what is the minimum number of tries to find the poisoned one. Rat dies once it licks the poisoned wine."}
{"i": "13722691", "t": "You are given a string. You need to find the longest substring with unique characters in O(n) time"}
{"i": "13722689", "t": "write a program for consumer and producer threads accessing shared queue, given primitives\rCreateEvent\rEnterCriticalSection/ EndCriticalSection\rSleep\rWait\rSetEvent etc"}
{"i": "13726713", "t": "A file contains set of anagram. print the output as list of similar word one by one.\re.g. plates stop staple pots meat not pot team\rOutput:-\r1. Plates, staple\r2. pots, stop   .... etc"}
{"i": "13727698", "t": "An older has a very old computer at his house. It is so old that there is no notion of virtual memory in the operating system. Instead it uses a simple memory allocation technique called the 'Best Fit Algorithm'. The BFA works like this: \rWhenever a request comes in for some memory space, the OS looks for the smallest, continuous empty space, which can satisfy it, and allocates a portion of this region to the program making the request. If such space cannot be found, the program is terminated and all the memory used by the program is freed. Any program can get terminated due to two reasons: \rThe program exits \rEnough memory is not available to start the program or keep it running \rAll memory requests that come in at the same time-instant are processed in ascending order of process-id. If while processing, a program is terminated for lack of memory, all memory held by it is freed before processing any other request and no further memory requests by the terminated program are considered. All termination is also done in order of process-id. \rYou have to write a program to simulate this algorithm and print out the number of processes that were terminated due to lack of memory. \rNote: \r1.No process will request for memory before its start-time or after its end-time. \r2.All memory sizes are specified in KB. \r3.The memory is linear in nature, i.e., addresses do not wrap around. It starts at zero and goes up to N-1 KB. \r4.At a given time unit, all processes that have reached end-time will be terminated (and memory freed) before other memory requests are serviced. \r5.The total free space available in memory might be enough to satisfy a request, however the OS will terminate the process if a continuous region of empty space is not found \rInput specification:\rFirst line has an integer N (0 < N <= 1000), size of the memory in KB. \rSecond line of input will have integer P (0 <= P <= 20), the total number of processes to be run on the system. \rNext P lines will have data for each process in the following format: \r<process-id> <start-time> <end-time> <initial-memory> \rThese input lines will be sorted in ascending order of the process-id.Process-id will be unique integers greater than zero. \rNext line will have integer R (0<= R <= 20), which specifies the subsequent memory requests by any process. \rNext R lines have the following format: \r<process-id> <request-time> <memory-required> \rOutput specification:\rAn integer specifying the number of processes that were terminated due to lack of memory \rSample Input and Output:\r Input:\r100\r4\r1 3 7 20\r2 0 4 30\r3 0 3 70\r4 0 10 25\r2\r3 2 30\r2 2 10\r  Output:\r2\r Input:\r10\r2\r1 0 8 4\r2 0 3 2\r3\r1 1 2\r2 1 2\r1 4 4\r  Output:\r1"}
{"i": "13730689", "t": "With a linked list data structure, find if a given string is palindrome or not."}
{"i": "13727691", "t": "Explain singleton."}
{"i": "13722679", "t": "Given two arrays a1={1,2,3,4} and a2={5,6,7,8}, add the two array and return a new array n={6,9,1,2}"}
{"i": "13724688", "t": "In javascript, what is the difference between \"==\" and \"===\" operator?"}
{"i": "13729674", "t": "Write an algorithm to find the top 10 frequently occurring words in a book."}
