{"i": "6001815795531776", "t": "asked me to solve Knapsack Problem", "k": ["solve knapsack problem", "knapsack problem", "solve knapsack", "problem", "knapsack"]}
{"i": "5472001514799104", "t": "Asked to explain how to check Binary tree is BST?\r\tthen asked me to write whole code of it.", "k": ["check binary tree", "tree is bst", "check binary", "binary tree", "bst"]}
{"i": "6614501470240768", "t": "Find Nodes which are at \"K\" distance from given node.\rexplain logic and write full code with all boundary conditions.", "k": ["find nodes", "find", "distance", "nodes", "node"]}
{"i": "4673691648524288", "t": "Find In order predecessor in BST.\rexplain logic and write full code with all boundary conditions.", "k": ["predecessor in bst", "find in order", "order predecessor", "bst", "find"]}
{"i": "5389078581215232", "t": "Given two strings a and b, find whether any anagram of string a is a sub-string of string b. For eg: \rif a = xyz and b = afdgzyxksldfm then the program should return true.", "k": ["anagram of string", "sub-string of string", "string", "find", "strings"]}
{"i": "5987839971950592", "t": "Implement a sorting algorithm for a single linked list.", "k": ["single linked list", "implement a sorting", "linked list", "sorting algorithm", "single linked"]}
{"i": "5642266903314432", "t": "Given a mapping configuration such as:\r 1:a\r2:b\r...\r26:z\r And a string like \"12632\", print the number of different ways you can map such string to alphabet characters.\r For example, given \"111\" the answer is 3 because you can make \"aaa\", \"ak\" and \"ka\" different mappings. However, given \"101\" the answer is 1 because you can only make \"ja\" as a possible mapping (01 is not valid).", "k": ["mapping configuration", "configuration", "answer", "make", "print the number"]}
{"i": "5742219382226944", "t": "Print all paths of a binary tree from root to leaf.\r Later, extend the solution to work with graphs, careful attention to cycles which you should print as paths as well (without printing visited nodes twice).", "k": ["root to leaf", "binary tree", "tree from root", "leaf", "printing visited nodes"]}
{"i": "5837582990573568", "t": "given a board with black (1) and white (0), black are all connected. find the min rectangle that contains all black.\r example:\r0 0 0 0 0\r0 1 1 1 0\r0 1 1 0 0\r0 1 0 0 0\r0 0 0 0 0\r the min rectangle contains all black (1) is the rectangle from (1,1) - (3, 3)", "k": ["min rectangle", "black", "rectangle", "find the min", "board with black"]}
{"i": "5644198027984896", "t": "Given an array of Integers, and a range (low, high), find all continuous subsequences in the array which have sum in the range. Is there a solution better than O(n^2)?", "k": ["find all continuous", "array of integers", "continuous subsequences", "integers", "low"]}
{"i": "4827656025538560", "t": "Write a class that displays average of stock prices for a given stock symbol for the last 10 minutes. We have a service that sends stock updates about 5000 times per second. The structure of the message is :Message {\r\n long timestamp;\r\n  String symbol; // E.g. AAPL\r\n  double price;\r\n}", "k": ["write a class", "class that displays", "displays average", "minutes", "aapl double price"]}
{"i": "5171150330003456", "t": "Given k integers i_0, i_1, i_2, i_3,...i_k, find all possible expressions which uses + - * / and () to generate a result equals to target X.\r() has the highest priority.", "k": ["generate a result", "result equals", "equals to target", "highest priority", "find"]}
{"i": "5642979331014656", "t": "Generate all numbers in ascending order which are having factors as 2,3 and 5. Discuss various approaches.", "k": ["generate all numbers", "numbers in ascending", "ascending order", "generate", "discuss various approaches"]}
{"i": "5179782140526592", "t": "You are trying to control an on-screen keyboard (e.g. on a television) that looks like this:\r a b c d e \rf g h i j\r...\r You can issue the following commands to move the cursor and select letters:\r\u2018u\u2019 - up\r\u2018d\u2019 - down\r\u2018l\u2019 - left\r\u2018r\u2019 - right\r\u2018!\u2019 - select letter\r You are given an input string and the length of the rows in the on-screen keyboard. You must produce the sequence of commands needed to type out the input string on the specified keyboard, e.g.:\r\u201caci\u201d, 5 -> \u201c!rr!dr!\u201d", "k": ["on-screen keyboard", "keyboard", "input string", "control an on-screen", "select letters"]}
{"i": "5841660122497024", "t": "Given a dictionary of words, and a set of characters, judge if all the characters can form the words from the dictionary, without any characters left.\rFor example, given the dictionary {hello, world, is, my, first, program},\rif the characters set is \"iiifrssst\", you should return 'true' because you can form {is, is, first} from the set;\rif the character set is \"eiifrsst\", you should return 'false' because you cannot use all the characters from the set.\r P.S. there may be tens of thousands of words in the dictionary, and the chars set length could be up to hundreds, so I really need some efficient algorithm.", "k": ["characters left", "characters", "set", "characters set", "dictionary"]}
{"i": "6216353069400064", "t": "Rearrange an array so that arr[i] becomes arr[arr[i]] with O(1) extra space", "k": ["extra space", "rearrange an array", "arr", "rearrange", "extra"]}
{"i": "5738477828177920", "t": "Queue implementation in Java.", "k": ["implementation in java", "queue implementation", "java", "queue", "implementation"]}
{"i": "5634264741707776", "t": "Given an array of integer, find the minimum in the sliding window of size 4, in most optimal way.\rex [2,1,3,4,6,3,8,9,10,12,56]\rOutput : [1,1,3,3,3,3,8.....]", "k": ["array of integer", "find the minimum", "window of size", "sliding window", "output"]}
{"i": "5693294772224000", "t": "Design an iterator for a given stream of integers, with next() and hasnext() being called in any sequence, but skipping any 0's in the stream.", "k": ["design an iterator", "stream of integers", "design", "integers", "hasnext"]}
{"i": "5749936800923648", "t": "Find if a given array has any duplicates, with O(n) complexity", "k": ["complexity", "find", "duplicates", "array"]}
{"i": "5740921664569344", "t": "Given n array return true if there exist a element from each array whose sum is zero", "k": ["array return true", "return true", "exist a element", "array return", "array whose sum"]}
{"i": "5687586760687616", "t": "Machine coding round : (Time 1hr)\r expression is given and a string testCase, need to evaluate the testCase is valid or not for Expression\r Expression may contain letters [a-z]\rExpression may contain \".\"( '.'  represents any char in [a-z])\rExpression may contain '*'( '*' has same property as in normal RegExp)\rExpression may contain '^' ( '^' represents start of the String)\rExpression may contain '$' ('$' represents end of String )\r Sample cases (Exp, testCase, Result)  below\r 1. ab, ab , true\r2. a*b , aaaaaab , true\r3. a*b*c*, abc , true\r4. a*b*c , aaabccc, false\r5. ^abc*b, abccccb , true\r6 ^abc*b, abbccccb , false\r7 ^abcd$, abcd , true\r8 ^abc*abc$ , abcabc, true\r9 ^abc.abc$, abczabc , true\r9 ^ab..*abc$, abyxxxxabc, true", "k": ["machine coding round", "expression", "expression expression", "true", "abc"]}
{"i": "6363955794542592", "t": "Coding in Computer : (Time 1hr)\r Expression is given and a string testCase, need to evaluate the testCase is valid or not for Expression\r Expression may contain letters [a-z]\rExpression may contain \".\"( '.'  represents any char in [a-z])\rExpression may contain '*'( '*' has same property as in normal RegExp)\rExpression may contain '^' ( '^' represents start of the String)\rExpression may contain '$' ('$' represents end of String )\r Sample cases (Exp, testCase, Result)  below\r 1. ab, ab , true\r2. a*b , aaaaaab , true\r3. a*b*c*, abc , true\r4. a*b*c , aabccc, false\r5. ^abc*b, abccccb , true\r6 ^abc*b, abbccccb , false\r7 ^abcd$, abcd , true\r8 ^abc*abc$ , abcabc, true\r9 ^abc.abc$, abczabc , true\r9 ^ab..*abc$, abyxxxxabc, true", "k": ["coding in computer", "expression expression", "expression", "true", "abc"]}
{"i": "4815271118241792", "t": "Given a couple of integer arrays A = {2, 4, 3, 5, 6, 8} & B = {9, 2, 7, 6} - Return the intersection of these arrays.\r Once I provided a solution (which was n squared -O (n^2)) he followed up by asking me if I could make it linear (O(n)).", "k": ["return the intersection", "couple of integer", "integer arrays", "return", "arrays"]}
{"i": "6482098667913216", "t": "Write a method which will accept a string and return true if the string is a palindrome and false if it isn't.\r Special conditions: \ra) your method should consider lower case and upper case characters to be the same.\rb) your method should ignore special characters and white spaces, for e.g. if your input were the strings were  \"Madam, I'm Adam!!\", then you should consider it a palindrome and hence return true ignoring case and special characters. Same with inputs like \"Ma'am\", \"boB\" etc should return true.", "k": ["return true", "palindrome and false", "method", "special characters", "return"]}
{"i": "6279758597849088", "t": "Write a function  accepting a string with numbers and letters that reverses the letters of the string but leave numbers in the same position. \r Example input:   str1ngw1thnumb3rs\rExample output: srb1mun1htwgn3rts", "k": ["write a function", "function accepting", "leave numbers", "accepting a string", "reverses the letters"]}
{"i": "5755781177671680", "t": "Given an input integer array, write a function that returns an array such that all the low numbers in the input array are sorted before all the medium numbers in the input array, which come before all the high numbers in the array.\r You can assume that someone has written functions for you like:\r public boolean isLow(int input);\rpublic boolean isMedium(int input);\rpublic boolean isHigh(int input);\r You can also assume that every int will fall into one (and only one) of these categories.\r For example:\rif < 0 is low, > 100 high, 0-100 medium\rinput: [3, -1, 105, 108]\rvalid outputs: [-1, 3, 105, 108] or [-1, 3, 108, 105]\r */\rI was able to solve this in linear time and linear space. How can it be done in linear time with constant space??", "k": ["input integer array", "public boolean", "input array", "array", "integer array"]}
{"i": "5945705571024896", "t": "Compare time complexity of insert and search functions in HashMap, Array, Linked List and Queue", "k": ["compare time complexity", "linked list", "list and queue", "compare time", "functions in hashmap"]}
{"i": "5674452213825536", "t": "Find largest element in an array", "k": ["find largest element", "find largest", "largest element", "find", "array"]}
{"i": "5654773747417088", "t": "Given two extremely large numbers - each number is stored in a Singly Linked list, with the MSB at the head. You are not allowed to reverse the Linked lists. Write a program to multiply them in optimum space and time.", "k": ["singly linked list", "extremely large numbers", "singly linked", "linked list", "extremely large"]}
