{"i": "5131437827162112", "t": "Given two arrays were digits of one array represent a number,maxmise the number by replacing it with elements of second array.\reg:\rarr={3,1,4,5,6}\rrep={1,9,5,2,3}\r after replacement\rarr={9,5,4,5,6}\rone digit of rep can be used to replace only once.", "k": ["represent a number,maxmise", "number,maxmise the number", "number by replacing", "array represent", "array"]}
{"i": "5707928940052480", "t": "Write a program to process the matrix. If an element is 0 at ith row and jth column, then make the whole ith row and jth column to 0.\r Constraints:\rSpace complexity should be O(1)\rTime complexity - Only single pass is allowed. Note that single pass is not O(n). This is single pass : An element will read and written only ones.\r Edit:\r Recursion is not allowed since it is O(n) space on stack", "k": ["write a program", "process the matrix", "program to process", "row and jth", "single pass"]}
{"i": "5629932333957120", "t": "Consider the problem of building a wall out of 21 and 31 bricks (horizontalvertical dimensions) such that, for extra strength, the gaps between horizontally-adjacent bricks never line up in consecutive layers, i.e. never form a \"running crack\".\r There are eight ways of forming a crack-free 93 wall, written W(9,3) = 8.\rCalculate W(32,10).\r I need solution for this in  C / C++ asap\r.\rThanks much in advance for your help.\r Vivek.", "k": ["horizontalvertical dimensions", "running crack", "extra strength", "consecutive layers", "problem of building"]}
{"i": "5690448221831168", "t": "To find 5th prime number after 3. suppose input is 3    5 output should be 17\r #include <stdio.h>\rint main(void) {\r\tint x;\r\tfor(; scanf(\"%d\",&x) > 0 && x != 42; printf(\"%d\\n\", x));\r\treturn 0;\r}", "k": ["prime number", "int main", "find", "prime", "suppose input"]}
{"i": "5133958972964864", "t": "Given three arrays A,B,C containing unsorted numbers. Find three numbers a, b, c from each of array A, B, C such that |a-b|+|b-c| +|c-a| is minimum.", "k": ["unsorted numbers", "numbers", "unsorted", "find", "minimum"]}
{"i": "5751533595525120", "t": "Problem:\r8 balls, where 7 have equal weight, one does not. Find minimum times to use a scale to find ball that is not equal weight.\r Interviewer answer: weight 6 balls. Choose balls from lighter side. Total two attempts. This is the average case but not the best case.\r This is not true in all cases and the interviewer did not see this...\r Best case:\rPick two balls. One may weight less, so the lighter ball is found with one attempt. This is the best case.\r Worst case: If first two balls are equal, weight 6 balls. Choose balls from lighter side. Weight again.  Total three attempts.", "k": ["balls", "weight", "case", "equal", "equal weight"]}
{"i": "5125942617833472", "t": "Given a 2D matrix which contains 0\u2019s and 1\u2019s. Given two points of matrix whose value is 1. Find the path(with only 1\u2019s) between the given points", "k": ["matrix", "points", "find the path", "find", "path"]}
{"i": "5673390490779648", "t": "Counting the islands. \r  Given a map N x N, 2-D array\r 0 - sea\r X - land\r  Land is connected by 4-Neighbor connections, i.e.: above, down, left and right.\r  00000000000000000000000000000000000\r 00000000000000000000000000000000000\r 00000000000000000000000000000000000\r 0000000000000000000X000000000000000\r 000000000000000000XXX00000000000000\r 000XX000000000000000000000000000000\r 000XXXX0000000000000000000000000000\r 0000000X000000000000000000000000000\r 00000000000000000000000000000000000\r 000000000000000000000X0000000000000\r 00000000000000000000000000000000000\r 00000000000000000000000000000000000\r 00000000000000000000000000000000000\r 00000000000000000000000000000000000\r 00000000000000000000000000000000000\r 00000000000000000000000000000000000\r 00000000000000000000000000000000000\r 00000000000000000000000000000000000\r  Output of this map: 4 (totally 4 islands on the map)", "k": ["land land", "counting the islands", "map", "land", "counting"]}
{"i": "5693954190213120", "t": "Number list compressing.\rGiven an sorted array. Input: sorted number list\r 1, 2, 3,10, 25, 26, 30, 31, 32, 33\r  Output: find consecutive segments\r print: 1-3, 10, 25-26, 30-33", "k": ["number list compressing", "list compressing", "compressing", "number list", "output"]}
{"i": "5770232071192576", "t": "There is a graph which represent average number of days the defects spent in status over a \r duration of time say in progress, ready for Qa etc. For example the X asis of the graph \r will project the daily/weekly/monthly duration and the y axis would be the count of days. \r List the test condtions to test and certify this graph", "k": ["represent average number", "represent average", "average number", "defects spent", "spent in status"]}
{"i": "6194445454147584", "t": "A registration form, to get user details has phone number field. This field is javaScript \r validated to get only numbers as input. But internally in the database they are stored as \r text. Do think there is an issue ? High/Medium/Low ? Justify", "k": ["registration form", "user details", "details has phone", "phone number field", "phone number"]}
{"i": "5197865670410240", "t": "The client sends a string to server and the server respnds with the same string appended \r with date and time. List down the tests", "k": ["date and time", "client sends", "appended with date", "server respnds", "string appended"]}
{"i": "6264812856147968", "t": "Kth largest element\rConsider that there are 2 lists that contain numeric values S1 and S2. the developer has \r written a program to find the kth largest element in the merge of two sorted sequences S1 \r and S2. The developer has written a program implementing the same. List down the test \r conditions to test and certify", "k": ["kth largest element", "kth largest", "largest element", "developer has written", "written a program"]}
{"i": "5687910701465600", "t": "The truck monitoring app is installed on the truck driver's phone. This app sends the \r location info back to the truck supervising application. there is a supervisor who monitors \r the route, drop off locations and time for the trucks from the head office to make sure the \r SLA's with the vendors(time, location, goods sign off) are honored. List the test cases and \r certify this application", "k": ["truck driver phone", "truck monitoring app", "driver phone", "truck supervising application", "truck monitoring"]}
{"i": "5723093194506240", "t": "Given an array of task and k wait time for which a repeated task needs to wait k time to execute again. return overall unit time it will take to complete all the task. \rExample: \r1. A B C D and k = 3\rans: 4 (execute order A B C D)\r2. A B A D and k = 3\rans: 6 (execute order A B . . A D)\r3. A A A A and k =3 \rans: 13 (A . . . A . . . A . . . A)\r4. A B C A C B D A and k = 4\rans: 11 (A B C . . A .C B D A )", "k": ["wait time", "repeated task", "ans", "wait", "task"]}
{"i": "5682612859305984", "t": "Post order traversal for an N-ary tree iterative way.\rGiven,\rstruct Node {\r   int val;\r   vector<Node*> children;\r};\r Without modifying original structure.", "k": ["n-ary tree iterative", "post order traversal", "n-ary tree", "post order", "order traversal"]}
{"i": "5743262360928256", "t": "Post order traversal for an N-ary tree iterative way.\rGiven,\rstruct Node {\r   int val;\r   vector<Node*> children;\r};\r To simplify you can modify the structure.", "k": ["n-ary tree iterative", "post order traversal", "n-ary tree", "post order", "order traversal"]}
{"i": "5648941121011712", "t": "Given an array of strings with only lowercase letters   , create a function that returns an array of those same strings, but each string has its letters rearranged such that it becomes a palindrome (if possible, if not, return -1)", "k": ["create a function", "lowercase letters", "letters rearranged", "array", "returns an array"]}
{"i": "5662387321438208", "t": "You are given a board with N rows and M columns. In this board you have to place exactly 1 bishop in each row. There are also some obstacles in some of the cells where you can't place a bishop. Bishops can only move diagonally but they can't go to a cell where there is any obstacle. Two bishops can attack each other if one of them can move to the cell of the other bishop. Now you have to count the number of ways that you can place bishops in the board.\r Note: Two bishops can attack each other if one of them can move to the cell of the other bishop in a single move without passing any obstacles.\r Input Format\r The first line of the input contains two integers N and M. The following N lines contain M characters each, the description of the board. Each cell of the board is either '.' which means that this cell is free or '*' which means that this cell contains an obstacle.\r Constraints\r 1<=N,M<=10\rOutput Format\r Print only one integer representing the number of ways to put exactly one bishop in each row such that no two bishops attack each other.\r Sample Input\r 3 3\r..*\r.**\r.*.\rSample Output\r 2", "k": ["cell", "bishop", "bishops", "board", "move"]}
{"i": "5164197555994624", "t": "Connect nodes at same level of a binary tree recursively using O(1) space (we can ignore stack space used for recursion)\r Tree node is like following.struct node {\r\n  int data;\r\n  struct node* left;\r\n  struct node* right;\r\n  struct node* nextRight;\r\n}Initially, all the nextRight pointers point to garbage values. Your function should set these pointers to point next right for each node. You can use only constant extra space.", "k": ["binary tree recursively", "struct node", "ignore stack space", "nextright pointers point", "binary tree"]}
{"i": "5666913143226368", "t": "Write a function that takes two integer-valued arrays A and Q and computes a minimum length subarray A[i:j] that sequentially covers Q. Assume all elements in Q are distinct.", "k": ["minimum length subarray", "write a function", "integer-valued arrays", "computes a minimum", "minimum length"]}
{"i": "5630275595796480", "t": "In a string detect the smallest window length with highest number of distinct characters. For eg.\rA = \u201caabcbcdbca\u201d, then ans would be 4 as of \u201cdbca\u201d", "k": ["smallest window length", "distinct characters", "string detect", "detect the smallest", "smallest window"]}
{"i": "5141072378331136", "t": "Design a system for capturing screenshots of various devices- Tablets, laptop, desktop, mobile, etc.\rThey can differ over resolutions and sizes, and can capture screenshots on their own. Design a system which can query those screenshots and store the images generated in a file system", "k": ["tablets", "laptop", "desktop", "mobile", "design a system"]}
{"i": "5703272457306112", "t": "There are 10 coin producing machines which produces a coin of weight x grams. Out of those, 2 machines are defective and produces coins of x-1 grams. How to find those two defective machines. \r Then extend this question to a total of n machines and out of those m machines are defective.", "k": ["coin producing machines", "coin producing", "machines", "grams", "producing machines"]}
{"i": "5689855918997504", "t": "there are N employee sitting in consecutive cubicles , we have to send a few of them to onsite , but each time we send one employee onsite , his cubicle becomes empty , now the other employees from both side of that empty cubicle stops working until they are given a gift .\rthe gifts are given in both sides of the empty cubicle until we reach the end or found another cubicle ,\r Input \u2013 number of cubicle , and index numbers of people to be sent\routput- min number of gifts needed", "k": ["cubicle stops working", "empty cubicle stops", "min number", "sitting in consecutive", "stops working"]}
{"i": "5684960058933248", "t": "How would you implement X-ray for Kindle? X-ray is an index of characters in a book that shows how often a character appears in the book, and at which places. I was explained how this index works, and what it will look like on the book. There re more details here: http://www.amazon.com/gp/help/customer/display.html?nodeId=200729910", "k": ["x-ray for kindle", "kindle", "implement x-ray", "x-ray", "book"]}
{"i": "5131737510182912", "t": ". Given n strings consisting of \u2018R\u2019 and \u2018B\u2019. Two strings can be only combined if last character of first string and first character of second string are same. Given n strings, you have to output the maximum length possible by combining strings.\r I/P\rRBR\rBBR\rRRR\routput : 9", "k": ["rbr bbr rrr", "bbr rrr output", "strings", "strings consisting", "rbr bbr"]}
{"i": "4886983698546688", "t": "Design an algorithm to find all the common elements in two sorted lists of numbers. For example, for the lists 2, 5, 5, 5 and 2, 2, 3, 5, 5, 7, the output should be 2, 5, 5.", "k": ["design an algorithm", "algorithm to find", "common elements", "sorted lists", "lists of numbers"]}
{"i": "5758790009880576", "t": "Given a string which only contains lowercase. You need delete the repeated letters only leave one, and try to make the lexicographical order of new string  is smallest.\ri.e:\rbcabc\rYou need delete 1 'b' and 1 'c', so you delete the first 'b' and first 'c', the new string will be abc which is smallest.\r ps: If you try to use greedy algorithm to solve this problem, you must sure that you could pass this case:\rcbacdcbc. answer is  acdb not adcb\r I can't solve this problem well and the interviewer said that you can scan the string twice. First scan is do some preprocess, and the second is to get the answer, but I really can't come up this idea.", "k": ["string", "delete", "smallest", "solve this problem", "lowercase"]}
{"i": "5701939272613888", "t": "Given N tasks, find the maximal points that can be achieved by finishing them\r Problem Constraints\r There are T minutes for completing N tasks\r Solutions can be submitted at any time, including exactly T minutes after the start\r i-th task submitted t minutes after the start, will get maxPoints[i] - t * pointsPerMinute[i] points\r i-th task takes requiredTime[i] minutes to solve\r Input Format\r Line 1: T, total minutes available to finish\r Line 2: Comma separated list of maxPoints\r Line 3: Comma separated list of pointsPerMinute\r Line 4: Comma separated list of requiredTime\r Sample Input\r 75\r 250,500,1000\r 2,4,8\r 25,25,25\r Sample Output\r 1200\r Explanation\r First, solve the third task 25 minutes after the start of the contest. Get 1000 - 8 * 25 = 800 points\r Second, solve the second task 50 minutes after the start of the contest. Get 500 - 4 * 50 = 300 points\r Third, solve the first task 75 minutes after the start of the contest. Get 250 - 2 * 75 = 100 points\r In total, get 800 + 300 + 100 = 1200 points\r  Any optimized solution for this ?", "k": ["comma separated list", "input format line", "requiredtime sample input", "solve input format", "comma separated"]}
