{"i": "7958668", "t": "Round 4:\rQuestions on paging and segmentation. How virtual address is translated to physical address.", "k": ["questions on paging", "paging and segmentation", "questions", "round", "segmentation"]}
{"i": "7883691", "t": "Round 4:\rGarbage collection algos, questions on process and threads.", "k": ["garbage collection algos", "garbage collection", "round", "collection algos", "questions on process"]}
{"i": "7915685", "t": "Round 3:\rImplement Big Integer addition in C.", "k": ["implement big integer", "big integer addition", "implement big", "big integer", "round"]}
{"i": "7962664", "t": "Round 3:\rAn array contains all but one number even number of times. Find that number.", "k": ["round", "times", "number", "number of times", "array"]}
{"i": "7958667", "t": "Round 2:\rImplement shuffle api", "k": ["implement shuffle api", "implement shuffle", "round", "shuffle api", "implement"]}
{"i": "7962663", "t": "Round 2:\rGenerate nth anagram natural number.\rlike 1,2,..,9,11,22,..,99,101,....", "k": ["generate nth anagram", "anagram natural number", "generate nth", "round", "nth anagram natural"]}
{"i": "7962662", "t": "Round 2:\rOne more question of graph. Standard UVA question.dont remember exactly.", "k": ["round", "question of graph", "graph", "standard uva", "standard uva question.dont"]}
{"i": "7883690", "t": "Round 2:\rFind the number of digits in n!.", "k": ["find the number", "round", "find", "number of digits", "number"]}
{"i": "7883689", "t": "Round 2:\rGenerate valid pairs of paranthesis for a given input n.\r()(),(()),..\rGive DP solution.\rWrite Context Free grammar for it.", "k": ["generate valid pairs", "generate valid", "valid pairs", "pairs of paranthesis", "round"]}
{"i": "7958666", "t": "Round 1:\rDesign stack with give lowest element(by value) operation in O(1) time.", "k": ["give lowest element", "design stack", "lowest element", "stack with give", "give lowest"]}
{"i": "7958665", "t": "Round 1:\rArray a contains integers.\rForm new array b such that \rb[i]= product of all elements in a except i the element.\rYou cannot use division.\rGive solution of O(n) time.", "k": ["round", "array", "integers", "form new array", "time"]}
{"i": "7958664", "t": "Round 1:\rFind Lowest common ancestor in a btree", "k": ["find lowest common", "find lowest", "lowest common ancestor", "round", "lowest common"]}
{"i": "7950667", "t": "Create a doubly linked list from a binary tree such that an ith node in list contains the sum of the elements on ith vertical line of the tree", "k": ["doubly linked list", "ith vertical line", "create a doubly", "doubly linked", "vertical line"]}
{"i": "7950666", "t": "Merge two sorted linked list", "k": ["sorted linked list", "merge two sorted", "linked list", "sorted linked", "merge"]}
{"i": "7883688", "t": "Sorted array rotated by offset k. Find element in it.", "k": ["sorted array rotated", "sorted array", "array rotated", "rotated by offset", "sorted"]}
{"i": "7949664", "t": "There are two poles of equal height 15mts. One cable with length 16mts is hanging between that two poles. The height from center of the cable to earth is 7mts then what is the distance between that two poles.\r How to solve this ?", "k": ["poles", "equal height", "equal", "height", "cable"]}
{"i": "7946666", "t": "Develop the conversion function among UTF-8, UTF-16 and UTF-32 in C, and test it.", "k": ["develop the conversion", "conversion function", "develop", "conversion", "function"]}
{"i": "7937662", "t": "In the CrackingTheCodeInterview book solution, CareerCupLibrary - TreeNode, the isBST method is like this:public boolean isBST() {\r\n\t\tif (left != null) {\r\n\t\t\tif (data < left.data || !left.isBST()) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (right != null) {\r\n\t\t\tif (data >= right.data || !right.isBST()) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\treturn true;\r\n\t}But I think this method only checks whether the tree is searchable, it can NOT check whether the tree is balanced. Am I right folks?", "k": ["crackingthecodeinterview book solution", "return false", "public boolean isbst", "return true", "tree is searchable"]}
{"i": "7932667", "t": "Implement \"strstr\" function in C. What is the time complexity of your algorithm", "k": ["implement", "strstr", "function", "algorithm", "time"]}
{"i": "7937661", "t": "Write a c++ program to find the LCM of all the elements of an array.", "k": ["find the lcm", "program to find", "lcm", "write", "program"]}
{"i": "7920666", "t": "Find kth largest integer from an unsorted array of integers. Provide O(n) algorithm.", "k": ["find kth largest", "kth largest integer", "find kth", "kth largest", "unsorted array"]}
{"i": "7895684", "t": "Initially there is a array of integers sorted in ascending order. Later, first few elements of the array are left shifted so they wrap around and become the last elements of the array. The order within those shifted elements is preserved. Write algorithm to find given element from the array in O(logn) time. \r e.g. Say initially array is 1 5 10 15 20, after left shifting by 2, it becomes 10 15 20 1 5. Search element in this array.\r Write code for the same.", "k": ["integers sorted", "sorted in ascending", "array", "ascending order", "elements"]}
{"i": "7895682", "t": "What is the difference between sendRiderct and forward? \reveryone knows the difference but now the main question is what happens to parameter which were sent in request and than either redirect or forward. Does the parameter remain in request or do we need to send again?", "k": ["sendriderct and forward", "forward", "difference between sendriderct", "difference", "sendriderct"]}
{"i": "7921664", "t": "Implement a function to detect memoryleak", "k": ["implement a function", "detect memoryleak", "function to detect", "implement", "memoryleak"]}
{"i": "7894677", "t": "You are given N ranges of date offsets when N employees are present in an organization. Something like\r 1-4 (i.e. employee will come on 1st, 2nd, 3rd and 4th day )\r2-6\r8-9\r..\r  1-14\r You have to organize an event on minimum number of days such that each employee can attend the event at least twice. Write an algorithm (there is apparently an O(n) algorithm for this).", "k": ["ranges of date", "date offsets", "organization", "ranges", "date"]}
{"i": "7894674", "t": "(2nd phone screen)\rwrite a function isBST() that should tell if a binary tree is BST or not", "k": ["phone screen", "tree is bst", "write a function", "function isbst", "binary tree"]}
{"i": "7920663", "t": "(2nd phone screen)\rreverse pair of elements in a linked list.\reg. abcdef shouldbecome badcfe", "k": ["abcdef shouldbecome badcfe", "phone screen", "reverse pair", "shouldbecome badcfe", "pair of elements"]}
{"i": "7886677", "t": "most memory-efficient way to store 1 million phone numbers?\r i'm debating between two structures and wondering what everyone else thinks.", "k": ["million phone numbers", "million phone", "phone numbers", "store", "million"]}
{"i": "7862663", "t": "You are given a Binary Search Tree.Convert it into a circular doubly linked list without creating extra node.covert just by changing the pointers of the BST nodes.", "k": ["binary search tree.convert", "circular doubly linked", "doubly linked list", "creating extra node.covert", "binary search"]}
{"i": "7896668", "t": "Describe in brief the data structure you will use to implement the game of snake(mobile game).", "k": ["mobile game", "data structure", "game of snake", "implement the game", "describe"]}
