{"i": "5925656856625152", "t": "Are the following statements correct in Java.\r String firstName = \"Joe\";\rString lastName = new String(\"Mo\");", "k": ["correct in java", "statements correct", "java", "string", "joe"]}
{"i": "6291274537631744", "t": "why can't java have multiple inheritances like c++?", "k": ["java have multiple", "multiple inheritances", "java", "multiple", "inheritances"]}
{"i": "5724264766373888", "t": "Find the longest sequence in the array.\r array = {1, 4, 3, 2, 5, 7, 8, 22}\rAnswer = 1, 2, 3, 4, 5", "k": ["find the longest", "longest sequence", "answer", "array", "find"]}
{"i": "5831604589035520", "t": "In a linked list and loops around and connects to another node(not the first), how do you find the connecting point? \r Another question from \"Cracking the Code\".", "k": ["connecting point", "linked list", "list and loops", "find the connecting", "cracking the code"]}
{"i": "5927262100652032", "t": "If you have a circular linked list, how do you find the middle. You can only go through it once.\r Another question from \"Cracking the Code\".", "k": ["circular linked list", "linked list", "find the middle", "circular linked", "cracking the code"]}
{"i": "5086441721823232", "t": "Sort the array(have to implement the equals method in Cat and Dog).\r Cat c = new Cat(\"Snow Ball\");\rDog d = new Dog(\"Max\");\rarray = {c, d, ... };", "k": ["snow ball", "implement the equals", "equals method", "dog", "cat"]}
{"i": "4906365554262016", "t": "You have two threads \"A\" and \"B\" and an integer \"Count\". \"A\" can increment the count up to 10(stops after that). \"B\" can decrements the count up to 1(stops after that). Print out the count after increment and decrements.", "k": ["count", "stops", "threads", "integer", "increment"]}
{"i": "6313740437815296", "t": "Count the duplicates in the array ?\rarray = {\"IBM\", \"Amazon\", \"Google\", \"IBM\"}\r Another question from \"Cracking the Code\".", "k": ["cracking the code", "count the duplicates", "ibm", "amazon", "google"]}
{"i": "6223800601411584", "t": "Remove duplicates in the array ?\rarray = {\"IBM\", \"Amazon\", \"Google\", \"IBM\"}\r Another question from \"Cracking the Code\".", "k": ["cracking the code", "ibm", "remove duplicates", "amazon", "google"]}
{"i": "5187840530972672", "t": "Reverse the values in the array. \rHere is the array = {1, 2, 4, 5, 7}", "k": ["array", "reverse"]}
{"i": "4988353258717184", "t": "10 45 90 11\r23 68 29 09\r49 39 23 78\r46 92 21 90\r Find the largest multiple of 3 consecutive numbers that are in a line", "k": ["find the largest", "consecutive numbers", "largest multiple", "find", "consecutive"]}
{"i": "5198828131057664", "t": "Implement LRU cache.", "k": ["implement lru cache", "implement lru", "lru cache", "lru", "implement"]}
{"i": "6198772753235968", "t": "Given a list of names. Find whether a particular name occurs inside a given tweet or not. If found return true otherwise false Time complexity should be less than O(n).\r Ex: \"Katy Perry\",\"Ronan Keating\" given as a list of string.\r List<String> names;\rbool findName(String tweet)\r{\r }", "k": ["katy perry", "ronan keating", "list", "string", "false time complexity"]}
{"i": "5322324546945024", "t": "Reverse String Ex: \"Hello World\" into \"World Hello\"", "k": ["reverse string", "world", "string", "reverse"]}
{"i": "5614430641455104", "t": "Write a function to find 5th element from a singly linked List from the end(not from the head) in one pass.", "k": ["singly linked list", "linked list", "write a function", "function to find", "singly linked"]}
{"i": "5208367253422080", "t": "Write a function to find an first non-duplicate Character from the given String. For example : String \"efficiency\" has 'n' first non-duplicate character.", "k": ["non-duplicate character", "write a function", "function to find", "string", "character"]}
{"i": "4685347610951680", "t": "DLL contains N nodes of string data in each node...how you will find the combined string of the nodes is Palindrome or not....?", "k": ["find the combined", "string data", "combined string", "dll", "nodes is palindrome"]}
{"i": "5642932044431360", "t": "If i create 50 Base Class objects and 50 Derived class Objects, then 50 Base Class Virtual Pointers and 50 Derived class virtual pointers created or Static virtual pointer is created one in Base and one in Derived.....?", "k": ["class virtual pointers", "derived class virtual", "derived class objects", "base class virtual", "base class objects"]}
{"i": "5559253196603392", "t": "Write a function which would take the filename and percentage as the parameters and print out the percentage of contents from the file\r printFromFile (String fileName, Integer percentage)\r You use the percentage to calculate the percentage of the contents of the file. For example, if the percentage = 50, you read the file and print the 50 percent of the file. \r condition1: If you call the file multiple times, the contents you print out should not be the same \rcondition2: You can' t read in the whole file at once and save it in memory. There is a memory restriction.", "k": ["string filename", "integer percentage", "percentage", "write a function", "file printfromfile"]}
{"i": "5286209240694784", "t": "I have an array containing duplicates in the following format:\rarr[]={ 2,9,1,5,1,4,9,7,2,1,4 }  \rI want to sort the array in place such that all the duplicate elements are moved towards the end and sorted in different sub arrays like following:\rarr[]={ 1,2,4,5,7,9, 1,2,4,9, 1 }  \rThere is no range for integers for the array specified. Following is the code which i tried. This code recursively sorts the subarrays and then move duplicates towards the end. But Complexity wise this is not optimal solution.\rPlease suggest if it can be solve in O(n) or O(nlogn). Entire code is as follows:public static int sortDuplicates(int a[],int start,int end){           \r\n    int i, k,temp;\r\n    if(start==end)\r\n        return 1;\r\n    Arrays.sort(a, start, end);\r\n    k = start;\r\n    for (i = start+1; i < end; i++) {\r\n        if (a[k] != a[i] && a[k]<a[i]) \r\n        {\r\n           temp=a[k+1];\r\n            a[k+1] = a[i];\r\n            a[i]=temp;\r\n           k++;\r\n        }\r\n    }       \r\n    return sortDuplicates(a,k+1,a.length);  \r\n}", "k": ["elements are moved", "range for integers", "array", "arr", "end"]}
{"i": "5707884834848768", "t": "How answer is coming as zero instead of garbage? Does compiler sets \"0\" to uninitialized variable?#include<stdio.h>\r\n\r\nvoid fun(void *p);\r\nint i;\r\n\r\nint main()\r\n{\r\n    void *vptr;\r\n    vptr = &i;\r\n    fun(vptr);\r\n    return 0;\r\n}\r\nvoid fun(void *p)\r\n{\r\n    int **q;\r\n    q = (int**)&p;\r\n    printf(\"%d\\n\", **q);\r\n}", "k": ["answer is coming", "void fun", "void", "vptr", "fun"]}
{"i": "5136177443110912", "t": "Write a method to determine if two strings are anagrams of each other.\re.g. isAnagram(\u201csecure\u201d, \u201crescue\u201d) \u2192 false\re.g. isAnagram(\u201cconifers\u201d, \u201cfir cones\u201d) \u2192 true\re.g. isAnagram(\u201cgoogle\u201d, \u201cfacebook\u201d) \u2192 false", "k": ["write a method", "method to determine", "strings are anagrams", "isanagram", "false"]}
{"i": "5493067750572032", "t": "Write code to reconstruct the tree from given any 2 traversals.Do it iteratively.", "k": ["traversals.do it iteratively", "write code", "code to reconstruct", "reconstruct the tree", "write"]}
{"i": "5700226908160000", "t": "Rearrange an array using swap with 0.\r You have two arrays src, tgt, containing two permutations of the numbers 0..n-1. You would like to rearrange src so that it equals tgt. The only allowed operations is \u201cswap a number with 0\u201d, e.g. {1,0,2,3} -> {1,3,2,0} (\u201cswap 3 with 0\u201d). Write a program that prints to stdout the list of required operations.\r Practical application:\r Imagine you have a parking place with n slots and n-1 cars numbered from 1..n-1. The free slot is represented by 0 in the problem. If you want to rearrange the cars, you can only move one car at a time into the empty slot, which is equivalent to \u201cswap a number with 0\u201d.\r Example:\rsrc={1,0,2,3}; tgt={0,2,3,1};", "k": ["tgt", "swap", "rearrange", "src", "arrays src"]}
{"i": "6503707915059200", "t": "A teacher wanted 100 gems distributed in 7 purses such that number of gems in 7 purses should always sum up to 100. But his condition was that he can demand any number of gems between 1 to 100 and Shiva must be able to satisfy his demand without needing to open any purse. Also once Shiva packs the purses, he will not get another chance to rearrange the number of Gems in those 7 purses. So consider that these purses are sealed the moment Shiva puts appropriate number of Gems in it.\r Out of affection, the teacher decided to step up the difficulty level so that Shiva can survive the turbulent world outside the Gurukul. The Guru added one more condition that out of 7 purses Guru will always fill one purse with any number of gems. Thus Shiva need to distribute remaining Gems in rest of the 6 purses.\r As a new techie your task is to write a computer program to help Shiva in fulfilling his Guru's demand.", "k": ["number of gems", "gems", "shiva", "gems distributed", "number"]}
{"i": "4570783653298176", "t": "its easy but still!!\r find the largest subarray with equal number of 0's and 1's.\rexample 001010101\routput:8int  subarray(int arr[],int n)\r\n{\r\nint count=0;\r\nfor(int i=0;i<n;i++)\r\n{\r\nif(a[i]==0)\r\ncount++;\r\nelse\r\ncount--;\r\n}\r\nif(count==0)\r\nreturn n;\r\nelse \r\n{\r\nif(count>0)\r\nreturn n-count;\r\nelse\r\nreturn n+count;\r\n}\r\n}", "k": ["count", "int", "int arr", "int count", "return"]}
{"i": "5912840674213888", "t": "Consider a hash table with M slots. Suppose hash value is uniformly distributed between 1 to M, and it uses linked list to handle conflicts (if two keys hashed to the same slot). Suppose we put N keys into this M-slotted hash table, what is the probability that there will be a slot with i elements? i could vary from 0 to N.", "k": ["m-slotted hash table", "hash table", "hash", "m-slotted hash", "suppose"]}
{"i": "5071748638703616", "t": "print the numbers without repeating digits in it and with in the range x to y.\rex. range 50 to 5000,\rthen it must print like 50,51,52,53,54,56,....57,......65,67,....76,77....109,120,123,124...4987.\rnot like 556,55, .avoid duplicate digits in number.", "k": ["repeating digits", "avoid duplicate digits", "print", "range", "digits"]}
{"i": "5140584079556608", "t": "Given a BST convert it into new Data Structure that satisfies following conditions:\r 1. every leaf node's left ptr point to its parent and right ptr points to the next leaf\r2. every non leaf node's left ptr points to its parent and right ptr is NULL\r3. return the head and print the new DS\r example: \r\t\t\t7\r                       /  \\\r                      5   9\r                     /  \\    \\\r                    4   6   10\r output:\r head->4->5->7\r        |\r       ->6->5->7\r        |\r        ->10->9-7\r with optimal time and space complexity", "k": ["data structure", "bst convert", "structure that satisfies", "satisfies following conditions", "node left ptr"]}
{"i": "5548094871568384", "t": "Given an array, return true, if it can be partitioned into two subarrays whose sum of elements are same, else return false                                                                                              \rExample:\rInput: {5,1,5,11}\rOutput: true        (as it can be divided into {5,1,5} {11} where 5+1+5=11)", "k": ["input", "output", "subarrays whose sum", "sum of elements", "return true"]}
