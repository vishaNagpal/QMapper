{"i": "7281148", "t": "I recently got screwed up at Red Hat Interview.\r Here is the question they asked me\rWrite C program to take directory name as command line argument and\rprint last 3 directories and 3 files in all subdirectories without using\rapi 'system' inside it.\r suppose directory dir0 contains\rdir1, di2, dir3, dir4, dir5 and file1, file2, file3, file4, file5, file6\rand\rdir1 contains dir6 file7 file8 file9 file10\rprogram should output -\rdir3, dir4, dir5, file4, file5, file6, dir6, file8, file9, file10\r I could only make upto directory scanning.\rIf some one wants to discuss the solution then welcome.", "k": ["red hat interview", "hat interview", "red hat", "recently got screwed", "interview"]}
{"i": "7243922", "t": "Given a random function that generates a random number between 1 and 5 inclusive, write a function to generate a random number between 1 and 7 inclusive.", "k": ["random number", "generates a random", "random function", "inclusive", "random"]}
{"i": "7231874", "t": "what is fast retransmit? explain with example?", "k": ["fast retransmit", "retransmit", "fast", "explain"]}
{"i": "7278887", "t": "what is SACK? what is the use of SACK?", "k": ["sack"]}
{"i": "7186876", "t": "when we type in google for seach it will genate search text. for a stream of searchtext how you will find most 10 frequent search test. give a efficient data structure for this. and also solve it with possible minimum complexity.", "k": ["genate search text", "type in google", "google for seach", "search text", "frequent search test"]}
{"i": "7189866", "t": "Find loop in a single list.\rproof the correctness of your algorithm.\rif fast pointer incremented by 3 and slow pointer incremented by 2 would it work? proof the correctness of second strategy?\rwhich one is more efficient and why?", "k": ["find loop", "single list", "proof the correctness", "proof", "find"]}
{"i": "7286799", "t": "what is Virtualization? give an example of Virtualization.", "k": ["virtualization", "give"]}
{"i": "7257883", "t": "Write a program which print all possible combination of 10 A and  10 \u2018B\u2019", "k": ["write a program", "program which print", "write", "program", "print"]}
{"i": "7190875", "t": "write a program which find LCA of a binary tree. It is not a BST", "k": ["find lca", "write a program", "binary tree", "program which find", "lca"]}
{"i": "7295705", "t": "1. concept of TCP and UDP and use case.\r2. serialize and deserialize.\rsay given ab,cd,fgh, output a single string\rgiven that single string output ab,cd,fgh\r   string serialize(string str[], int n)\r{\r\tstring result = \"\";\r\tif(n < 1)\r\t\treturn result;\r\tfor (int i = 0; i < n; i++)\r\t{\r\t\tresult += \"\\\"\";\r\t\tfor(int j = 0; j < str[i].length(); j++)\r\t\t{\r\t\t\tif(str[i][j] == '\\\\')\r\t\t\t{\r\t\t\t\tresult += \"\\\\\\\\\";\r\t\t\t}\r\t\t\telse if(str[i][j] == '\\\"')\r\t\t\t{\r\t\t\t\tresult += \"\\\\\\\"\";\r\t\t\t}\r\t\t\telse\r\t\t\t{\r\t\t\t\tresult += str[i][j];\r\t\t\t}\r\t\t}\r\t\tresult += \"\\\"\";\r\t}\r\tcout<<result<<endl;\r\treturn result;\r}\r void deserialize(string str)\r{\r\tif(str == \"\")\r\t\treturn ;\r\tstring token;\r\tbool doubleQuoteBegin = false;\r\tbool skip = false;\r\tfor (int i = 0; i < str.length(); i++)\r\t{\r\t\tif(str[i] == '\\\\' && !skip)\r\t\t{\r\t\t\tskip = true;\r\t\t}\r\t\telse if(str[i] == '\\\"')\r\t\t{\r\t\t\tif(skip)\r\t\t\t{\r\t\t\t\ttoken += '\\\"';\r\t\t\t\tskip = false;\r\t\t\t}\r\t\t\telse\r\t\t\t{\r\t\t\t\tif(doubleQuoteBegin)\r\t\t\t\t{\r\t\t\t\t\tdoubleQuoteBegin = false;\r\t\t\t\t\tcout<<token<<endl;\r\t\t\t\t\ttoken = \"\";\r\t\t\t\t}\r\t\t\t\telse\r\t\t\t\t{\r\t\t\t\t\tdoubleQuoteBegin = true;\r\t\t\t\t}\r\t\t\t}\r\t\t}\r\t\telse if(str[i] == '\\\\' && skip)\r\t\t{\r\t\t\ttoken += '\\\\';\r\t\t\tskip = false;\r\t\t}\r\t\telse if(str[i] == '\\\\' && !skip)\r\t\t{\r\t\t\tskip = true;\r\t\t}\r\t\telse\r\t\t{\r\t\t\ttoken += str[i];\r\t\t}\r\t}\r}", "k": ["str", "result", "tcp and udp", "skip", "false"]}
{"i": "7178887", "t": "Find two elements in an array whose sum is closest to zero??", "k": ["find two elements", "array whose sum", "sum is closest", "find", "elements"]}
{"i": "7273847", "t": "given a set of distinct integers {a1, a2, a3, a4, a5, ...}\rand a set of exclusion rules: R = {{a1, a3}, {a2, a4, a10}, ...}\rcan you print out all the valid subsets?\rExample:\rwhat is a valid subset? {a1, a4}\rwhat is an invalid subset? {a1, a2, a4}", "k": ["set of distinct", "set of exclusion", "distinct integers", "exclusion rules", "set"]}
{"i": "7243824", "t": "How to implement inheritance in C?\rHow to implement Virtual functions in C?", "k": ["implement virtual functions", "implement inheritance", "implement virtual", "virtual functions", "implement"]}
{"i": "7183759", "t": "How to delete the duplicates in a Binary Tree?\r Description:\reg. Tree\r   A\r B    C\rD.C  -.F\r  FH\r output:\r   A\r B    C\rD.H  -.F\r Here C & F are repeated. If a node value is duplicated, the duplicated value which comes later in the BFS of the tree should be eliminated, its left/right child should be linked to the deleted node's parent (if the children are not duplicated values).", "k": ["binary tree", "delete the duplicates", "binary", "tree", "duplicated"]}
{"i": "7217748", "t": "Given an array A[1..n](range 0 to k). Divide this array into two subsets S1 and S2 such that \rmin{sum(S1)-sum(S2)}", "k": ["range", "sum", "array", "divide", "subsets"]}
{"i": "7246712", "t": "perform divide operation without using \"/\" ... give the most optimized solution", "k": ["perform divide operation", "perform divide", "divide operation", "perform", "divide"]}
{"i": "7245712", "t": "How would you print the solution of longest increasing subsequence ??", "k": ["longest increasing subsequence", "increasing subsequence", "print the solution", "solution of longest", "longest increasing"]}
{"i": "7187713", "t": "How to compare two version numbers?\rE.G. 1.2.30.112 @ 2.12.11.09\rCode should be in java", "k": ["version numbers", "compare two version", "numbers", "code", "compare"]}
{"i": "7156734", "t": "sizeof(void)?", "k": ["sizeof", "void"]}
{"i": "7205714", "t": "Implement a deck of cards using OOPs", "k": ["implement a deck", "cards using oops", "deck of cards", "implement", "oops"]}
{"i": "7253710", "t": "What is a deadlock ? WAP in C++/C to remove deadlock", "k": ["remove deadlock", "wap", "deadlock", "remove"]}
{"i": "7190707", "t": "discuss the client-server architecture?", "k": ["discuss the client-server", "client-server architecture", "discuss", "architecture", "client-server"]}
{"i": "7166688", "t": "DIVIDE TWO VARYING LENGTH NUMBERS\rEX: ONE CAN BE UPTO  60 DIGIT AND OTHER 40 DIGIT", "k": ["varying length numbers", "divide two varying", "varying length", "length numbers", "digit"]}
{"i": "7166671", "t": "How will you select all name,salary of all employees having 4th highest salary from Employee table.", "k": ["employee table", "highest salary", "select all name,salary", "salary from employee", "highest"]}
{"i": "7172663", "t": "A program has two functions 'reader_func' and 'writer_func'. The reader_func reads shared data and contains a critical section. The writer_func writes to shared data and contains a critical section. \r Reader threads call reader_func. Writer threads call writer_func. \r The condition is multiple reader threads can access the critical section at the same time as long as they don't access the critical section along with a writer. Only a single writer thread can access the critical section, i.e. no reader or other writer threads are allowed. \r Give the code segment, add code that uses mutexes that controls access to the critical sections so that the shared data is not corrupted and satisfies the give conditions. You can create as many mutexes and global variables as you want. Don't emphasize too much on syntax as to how to acquire and release locks on mutexes. Just use mutex.acquire() and mutex.release() .\r Code segment:void reader_func()\r\n{\r\n   //critical section\r\n}\r\n\r\nvoid writer_func()\r\n{\r\n   //critical section\r\n}", "k": ["critical section", "critical", "func", "writer", "section"]}
{"i": "7235663", "t": "Given an array arr of size M containing distinct integers, randomly select N distinct integers and output them. You are given the rand() function and N < M.", "k": ["distinct integers", "randomly select", "array arr", "arr of size", "distinct"]}
{"i": "7108681", "t": "How to write a stub for unavailable server?", "k": ["unavailable server", "write a stub", "stub for unavailable", "server", "write"]}
{"i": "7055693", "t": "A application uses different its own server and some external, third party server also. Suppose if external or third party server is unavaiable, how will you test application?\rWhat will be the approach to test the application when you are not getting third party server?", "k": ["party server", "party", "server", "application", "external"]}
{"i": "7059670", "t": "When would a teleportation device not increase the speed of your commute?", "k": ["teleportation device", "device not increase", "increase the speed", "commute", "teleportation"]}
{"i": "6931889", "t": "How would you test a Elevator?", "k": ["test a elevator", "elevator", "test"]}
