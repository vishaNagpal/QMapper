{"i": "3808385", "t": "Given an array of integers. The sum of the elements of the array is known to be less than the max integer. Compute the sum. \rWhat if we know that integers are in 2's complement form?", "k": ["array", "sum", "integers", "max integer", "compute the sum"]}
{"i": "3817945", "t": "Given a linked list, split it into two lists - one for the front half and, one for the last half. If odd number of elements are \rpresent the extra node should go to the front list", "k": ["linked list", "front half", "front list", "half", "list"]}
{"i": "3751398", "t": "Remove duplicates from a linked list", "k": ["remove duplicates", "linked list", "remove", "list", "duplicates"]}
{"i": "3811118", "t": "SortedIntersect: Given two sorted linked lists, create and return a new linked list that represents the intersection of the two", "k": ["sorted linked lists", "create and return", "represents the intersection", "sorted linked", "linked lists"]}
{"i": "3747455", "t": "Given a linked list with the following property node2 is left child of node1, if node2 < node1 else, it is the right child. \rO P | | O A | | O B | | O C How do you convert the above linked list to the form without disturbing the property. Write C \rcode for that. O P | | O B / \\ / \\ / \\ O ? O ? determine where do A and C go", "k": ["left child", "linked list", "child", "property", "linked"]}
{"i": "3765419", "t": "You are given: 3 types of vehicles: Motorbike, Car, and a special type of car for the handicapped.\r3 types of parking: Motorbike parking, Car parking, handicapped car parking.\rMotorbikes and cars can only park in their designated parkings, while the handicapped cars can park either in their own parking or the \rregular car parking.\rHow would you model this as classes? Explain your methods.", "k": ["car", "car parking", "types of vehicles", "special type", "parking"]}
{"i": "3734392", "t": "Find the missing element in a sorted array in most optimum running time (O(log n))", "k": ["optimum running time", "find the missing", "running time", "missing element", "sorted array"]}
{"i": "3780460", "t": "Given a balanced BST tree, write a function to replace the root with a node that belongs to the original tree.", "k": ["balanced bst tree", "bst tree", "balanced bst", "write a function", "original tree"]}
{"i": "3742387", "t": "Given n non overlapping intervals and an element. Write a program to find the interval into which this\relement falls.", "k": ["overlapping intervals", "element", "element falls", "overlapping", "write a program"]}
{"i": "3818888", "t": "Design a stack which supports push, pop, min and max operations in O(1).", "k": ["pop", "design a stack", "supports push", "min and max", "stack which supports"]}
{"i": "3806463", "t": "There is a blank disc. You are given two colors of paint (black and white) . A sensor can recognize the color \rpainted on the disc and produce an output. Paint the disc in a way such that you can find the direction of \rrotation by looking at the output (BWBWBWBW... etc). Find the minimum number of sectors you will need to paint", "k": ["blank disc", "disc", "paint", "output", "black and white"]}
{"i": "3735429", "t": "Write a function to find intersection of two arrays?", "k": ["write a function", "function to find", "find intersection", "write", "arrays"]}
{"i": "3772456", "t": "An array of size n, has n/2 unique elements and n/2 occurences of an element. Find the \rnon-unique element in linear time?", "k": ["array of size", "unique elements", "unique", "occurences", "find the non-unique"]}
{"i": "3773426", "t": "You are provided with a stream of numbers, design a data structure to store the numbers in \rthe stream along with their no. of occurrences.", "k": ["design a data", "data structure", "structure to store", "design", "occurrences"]}
{"i": "3749425", "t": "Count number of lines, characters and words in a file (Given that we don\u2019t have much access \rto flashy java methods like readline, String methods like indexOf etc.)", "k": ["flashy java methods", "string methods", "count number", "number of lines", "characters and words"]}
{"i": "3750417", "t": "Write a function which takes as parameters one regular expression (only ? and * are the special characters)\rand a string and returns whether the string matched the regular expression.", "k": ["regular expression", "write a function", "special characters", "string matched", "expression"]}
{"i": "3753407", "t": "You are given some denominations of coins in an array (int denom[])and infinite \rsupply of all of them. Given an amount (int amount), find the minimum number of coins required to get \rthe exact amount. What is the method called?", "k": ["int denom", "infinite supply", "denominations of coins", "int amount", "int"]}
{"i": "3732466", "t": "Given a cube of size n*n*n (i.e made up of n^3 smaller cubes), find the number of smaller cubes on the \rsurface. Extend this to k-dimension", "k": ["smaller cubes", "find the number", "number of smaller", "smaller", "cubes"]}
{"i": "3778472", "t": "There are four dogs, each at the counter of a large square. Each of the dogs begins chasing the dog \rclockwise from it. All of the dogs run at the same speed. All continously adjust their direction so that \rthey are always heading straight towards their clockwise neighbor. How long does it take for the dogs to \rcatch each other? Where does this happen? (Hint: Dog\u2019s are moving in a symmetrical fashion, not along the\redges of the square).", "k": ["dogs", "large square", "dogs begins chasing", "dog", "dogs begins"]}
{"i": "3746398", "t": "Given two lists write a function which returns a list which is the intersection of the two lists", "k": ["write a function", "function which returns", "lists write", "returns a list", "lists"]}
{"i": "3769411", "t": "Three strings say A,B,C are given to you. Check weather 3rd string is interleaved from string A and B.\r     Ex: A=\"abcd\" B=\"xyz\" C=\"axybczd\". answer is yes.", "k": ["check weather", "string", "abcd", "xyz", "axybczd"]}
{"i": "3795424", "t": "Given that you can take one step or two steps forward from a given step. So find the total number of ways of \rreaching Nth step.", "k": ["reaching nth step", "steps forward", "nth step", "reaching nth", "step"]}
{"i": "3745390", "t": "Count the number of set bits in a number. Now optimize for speed. Now optimize for size", "k": ["set bits", "count the number", "number", "count", "optimize"]}
{"i": "3805408", "t": "An array A[1....n] is said to have a majority element if more than half of its entries are the same. \rGiven an array, the task is to design an efficient algorithm to tell whether the array has a majority element, \rand, if so, to find that element.\rThe elements of the array are not necessarily from some ordered domain like the integers, and so there can be\rno comparisons of the form \"is A[i] > A[j]?\".\rHowever you can answer questions of the form: \"is A[i] = A[j]?\" in constant time.", "k": ["majority element", "array", "majority", "element", "form"]}
{"i": "3796439", "t": "You are given with three sorted arrays (in ascending order), you are required to find a triplet \r(one element from each array) such that difference between their positions is minimum", "k": ["ascending order", "find a triplet", "positions is minimum", "sorted arrays", "required to find"]}
{"i": "3806460", "t": "Calculate the Resistance in ohm's that a knights move would require on an infinite plane of resistors \rof unit resistance.", "k": ["unit resistance", "knights move", "move would require", "infinite plane", "plane of resistors"]}
{"i": "3802461", "t": "Given a set of coin denominators, find the minimum number of coins to give a certain amount of change.", "k": ["find the minimum", "amount of change", "coin denominators", "minimum number", "set of coin"]}
{"i": "3766433", "t": "Get the width of a binary tree", "k": ["binary tree", "tree", "width", "binary"]}
{"i": "3757464", "t": "Suppose you have an NxN matrix of positive and negative integers. Write some code that finds the \rsub-matrix with the maximum sum of its elements.", "k": ["negative integers", "nxn matrix", "matrix of positive", "positive and negative", "suppose"]}
{"i": "3782402", "t": "Given a binary tree with the following constraints: a) A node has either both a left and right child \rOR no children b) The right child of a node is either a leaf or NULL write code to invert this tree.", "k": ["null write code", "leaf or null", "null write", "write code", "code to invert"]}
