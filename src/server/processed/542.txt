{"i": "343917", "t": "Suppose you have a application running on a TCP with 100% functionality. Your boss asked you to change the application so that it works on a UDP but you should maintain 100% functionality similar to a TCP one..how do you design this new UDP based application?", "k": ["tcp one.", "udp based application", "application running", "tcp", "functionality similar"]}
{"i": "343916", "t": "int *p;\rchar *q;\rprintf(\"%d\",p+1-p); --->1st\rprintf(\"%d\",q+1-q); --->2nd\rLets say p is pointing to the variable address in 1000 and q is pointing to the char variable in the address 2000.\rThen he asked me to explain those printf statements...and the next question is why the 1st printf is not printing 4 but it prints 1.", "k": ["variable address", "char variable", "pointing", "printf", "char"]}
{"i": "343915", "t": "What happens when you change the MAC address of machine with a static IP address in a particular subnet?(he was expecting the ARP in the subnet)", "k": ["change the mac", "expecting the arp", "mac address", "subnet", "address of machine"]}
{"i": "343519", "t": "What do you mean by sockets? Explain the socket programming when you are designing a server?", "k": ["designing a server", "socket programming", "explain", "server", "explain the socket"]}
{"i": "340535", "t": "Which data structure would you use to implement a cache (LRU or MFU) and why?", "k": ["lru or mfu", "implement a cache", "lru", "mfu", "data structure"]}
{"i": "340345", "t": "Write a program which prints itself. and no input is provided.", "k": ["write a program", "input is provided", "program which prints", "prints itself.", "write"]}
{"i": "337876", "t": "Reverse a linked list with atmost two extra pointers.", "k": ["reverse a linked", "extra pointers", "linked list", "list with atmost", "atmost two extra"]}
{"i": "338787", "t": "Design an efficient Data Structure for a Tic Tac Toe game.", "k": ["tic tac toe", "tac toe game", "efficient data structure", "data structure", "tic tac"]}
{"i": "337858", "t": "Test cases for a calculator", "k": ["test cases", "test", "calculator", "cases"]}
{"i": "337857", "t": "Recursive and iterative soln to generate fibo series ..", "k": ["generate fibo series", "recursive and iterative", "fibo series", "iterative soln", "soln to generate"]}
{"i": "337436", "t": "What is your understanding of communication.", "k": ["understanding of communication", "communication", "understanding"]}
{"i": "336555", "t": "Explain computer networks to a kindergartener.", "k": ["explain computer networks", "explain computer", "computer networks", "explain", "kindergartener"]}
{"i": "337435", "t": "Write a function that would have as input a string,and list of characters to be deleted from the string. \r Write Test Cases\r How would you reverse the output string?", "k": ["write test cases", "input a string,and", "string,and list", "list of characters", "write test"]}
{"i": "337173", "t": "How to write our own rand() function ?", "k": ["function", "rand", "write"]}
{"i": "337142", "t": "How to do inheritance in JavaScript?", "k": ["inheritance in javascript", "javascript", "inheritance"]}
{"i": "336221", "t": "What is JavaScript closure?", "k": ["javascript closure", "closure", "javascript"]}
{"i": "337141", "t": "find the Nth largest node in a BST", "k": ["nth largest node", "find the nth", "nth largest", "bst", "largest node"]}
{"i": "328825", "t": "This is a question on scheduling meeting in a calendar. \r Suppose we want to schedule a meeting amongst 3 employees. When we select them it has to show available time slots free for a meeting. \r Example:\rEmp A: 9:15 to 10:15; 10:20 to 11:20\rEmp B: 9:30 to 10:00; 10:25 to 11:15\rEmp C: 9:00 to 10:00; 11:00 to 11:10\r...", "k": ["question on scheduling", "scheduling meeting", "meeting", "emp", "calendar"]}
{"i": "328721", "t": "Given two sorted integer arrays A and B of size n and m respectively, find the kth smallest element in the union of A and B in O(lg(n)+lg(m)) time....", "k": ["sorted integer arrays", "kth smallest element", "find the kth", "sorted integer", "integer arrays"]}
{"i": "329710", "t": "Consider a matrix of integers with m rows and n columns.All the rows are first sorted.Then all the columns are sorted.\rProve that at the end of the above two operations carried out in order,the matrix retains the sorted order of its rows.", "k": ["order,the matrix retains", "matrix of integers", "columns are sorted", "rows", "order,the matrix"]}
{"i": "329686", "t": "What is a reentrant function? how do you make a function non-reentrant?", "k": ["reentrant function", "function non-reentrant", "function", "reentrant", "non-reentrant"]}
{"i": "323767", "t": "2D Matrix(n * n) of positive and negative numbers is given. Matrix is sorted rowwise and columnwise. You have to return the count of -ve numbers in most optimal way.", "k": ["positive and negative", "matrix", "negative numbers", "matrix is sorted", "positive"]}
{"i": "325696", "t": "Do Postorder traversal without using recursion.", "k": ["postorder traversal", "postorder", "recursion", "traversal"]}
{"i": "325695", "t": "Binary Tree Node has left, right and next pointers. Create a linked lists at each level connecting next pointers at each level.", "k": ["binary tree node", "tree node", "binary tree", "node has left", "tree"]}
{"i": "323766", "t": "Binary Search Tree Node has left, right and next pointers. Populate next pointers such that all nodes are connected in sorted order through next pointer.", "k": ["binary search tree", "search tree node", "search tree", "binary search", "tree node"]}
{"i": "323756", "t": "Consider an array of positive and negative integers. We want to\rfind a slice of this array (i.e. a sub\u2010array of consecutive elements) with at least two\relements, such that the sum of the elements in this slice is equal to 0. The size of the\rslice can be anything (i.e. from 2 up to the length of the original array), and we don't\rcare about finding the first, last, shortest, or longest slice, we just want a slice.\rExample: from [2,3,-1,2,-4] we would like to find the slice [3,-1,2,-4], where 3 + (-1) + 2 + (\u20104) = 0", "k": ["negative integers", "positive and negative", "slice", "array", "elements"]}
{"i": "325677", "t": "Generate all subsets of a given set. In another words generate super set of a given set. Example- Given set {1,2,3}. Output- {}, {1}, {2}, {3}, {1,2}, {1,3}, {2,3}, {1,2,3}", "k": ["set", "generate super set", "generate", "generate all subsets", "words generate super"]}
{"i": "323721", "t": "n person in the town. for every pair of person (A, B), A either likes B or dislike him. If this town has a election, the leader should be liked by everyone and he does not like anyone? how would choose? what is the best performance of algorithm?", "k": ["person", "town", "election", "pair", "dislike"]}
{"i": "325665", "t": "How to categorize web pages by its languages?\rIf using dictionary, what kind of data structure would be best?", "k": ["categorize web pages", "categorize web", "web pages", "languages", "categorize"]}
{"i": "325662", "t": "Given a list 2 36 5 21 8 13 11 20 5 4 1. Divide it three sublists - one of numbers <5 , 2 of numbers == 5 if duplicates. third having numbers > 5. This should take linear time, shd be inplace. The three lists need not have to be sorted.", "k": ["numbers", "divide", "sublists", "duplicates", "shd be inplace"]}
