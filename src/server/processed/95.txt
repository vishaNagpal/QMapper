{"i": "5196745773416448", "t": "Write a program to reverse a string", "k": ["write a program", "reverse a string", "program to reverse", "write", "string"]}
{"i": "5104909843169280", "t": "What is the output of following code snippet?public static void main(String[] args){\r\n    int[][] data = {{123},{4,5,6}};\r\n    int[][] copy = data.clone();\r\n    \r\n    copy[0][0] = 100;\r\n    \r\n    System.out.println(data[0][0]);\r\n    System.out.println(copy[0][0]);\r\n    \r\n    copy[1] = new int[]{300,400,500};\r\n    \r\n    System.out.println(data[1][1]);\r\n    System.out.println(copy[1][1]);\r\n }", "k": ["public static void", "static void main", "copy", "code snippet", "public static"]}
{"i": "5761590881157120", "t": "What would be the output of below code snippet?class Super {\r\n    int index = 5;\r\n    public void printVal(){System.out.println(\"Super\");}\r\n}\r\n\r\nclass Sub extends Super {\r\n    int index = 2;\r\n    public void printVal(){System.out.println(\"Sub\");}\r\n}\r\n\r\npublic class OopTest {\r\n    public static void main(String[] args){\r\n        Super sup = new Sub();\r\n        System.out.println(sup.index + \" \");\r\n        sup.printVal();\r\n    }\r\n}", "k": ["public void printval", "static void main", "public static void", "public class ooptest", "int index"]}
{"i": "5632783335555072", "t": "Given a binary tree of integers, write code to store the tree into a list of integers and recreate the original tree from a list of integers. \r Here's what your method signatures should look like (in Java): \r List<Integer> store(Node root)\rNode restore(List<Integer> list)\r Example Tree: \r     5\r  /  \\\r 3     2\r/     / \\\r1    6   1", "k": ["write code", "recreate the original", "list", "binary tree", "original tree"]}
{"i": "5204715219451904", "t": "What would be the result of executing the below code snippet?public class CountDownLatchDemo {\r\n    public static void main(String[] args)throws InterruptedException {\r\n        final CountDownLatch latch = new CountDownLatch(3);\r\n        latch.countDown();\r\n        latch.countDown();\r\n        new Thread(){\r\n            public void run(){\r\n                try{\r\n                    Thread.sleep(3000);\r\n                }catch(InterruptedException ex){\r\n                    ex.printStackTrace();\r\n                }\r\n                latch.countDown();\r\n            };\r\n        }.start();\r\n        System.out.println(\"Before\");\r\n        latch.await();\r\n        System.out.println(\"After\");\r\n    }\r\n}", "k": ["public class countdownlatchdemo", "final countdownlatch latch", "public void run", "static void main", "public static void"]}
