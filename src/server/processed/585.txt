{"i": "63114", "t": "how can you efficiently implement the find and replace function for a string....", "k": ["efficiently implement", "implement the find", "find and replace", "replace function", "string"]}
{"i": "62942", "t": "how do you test the validity of a sql query??????\rFor example, if there is a function isValidQuery(string query) it should return true if the query is valid else false....", "k": ["test the validity", "sql query", "query", "string query", "function isvalidquery"]}
{"i": "63087", "t": "Why use inner classes?", "k": ["classes"]}
{"i": "62913", "t": "Given an array of integers where some numbers repeat 1 time, some numbers repeat 2 times and only one number repeats 3 times, how do you find the number that repeat 3 times.\r I gave the hashmap solution. He was looking for a bitwise operator solution.", "k": ["numbers repeat", "number repeats", "repeat", "times", "array of integers"]}
{"i": "62912", "t": "How do you implement the following feature which Amazon uses on its website?\r \"What Do Customers Ultimately Buy After Viewing This Item?\"\r 81% buy this item\r 10% buy item B\r 9% buy item C", "k": ["feature which amazon", "customers ultimately buy", "customers ultimately", "amazon", "item"]}
{"i": "63085", "t": "A number is called 'desirable' if all the digits are strictly ascending eg: 159 as 1<5<9. You know that your rival has a strictly numeric password that is 'desirable'. Your close ally has given you the number of digits (N) in your rival's password. WAP th\\hjtat takes in 'N' as input and prints out all possible 'desirable' numbers that can be formed with N digits.", "k": ["desirable", "strictly ascending", "called", "digits", "strictly"]}
{"i": "62896", "t": "Explain in place merging of two sorted arrays?", "k": ["explain in place", "sorted arrays", "place merging", "explain", "arrays"]}
{"i": "63073", "t": "Given a binary tree, prove that it is a BST(Binary search tree), without using inorder traversal either recursively or iteratively..?", "k": ["binary search tree", "recursively or iteratively.", "binary tree", "search tree", "binary search"]}
{"i": "63072", "t": "Given a circle of radius R, take a point inside the circle.. now what is the probability that, this point is more nearer to the centre than to the circumference?", "k": ["inside the circle.", "circle of radius", "point inside", "circle.", "point"]}
{"i": "63071", "t": "This question was asked in Microsoft interview. Write a program to determine whether it is a good string or bad string.\rFor ex: {abcdteeh} -  good string\r(bans{xyzhs}aj) - good string\r}this{ - bad string\r{abs{jeu} - bad string\r If the string contains the equal no. of corresponding braces, brackets and parathesis. Moreover, if the string is {adbc(xyz}the) bad string...\rYou should take all the possible scenorios and write an efficient code it.", "k": ["microsoft interview", "asked in microsoft", "string", "question was asked", "bad string"]}
{"i": "63065", "t": "Consider how the numbers on a mobile phone's keypad are mapped to letters. Given a number as the input, generate all possible alphabetical strings that it can represent.", "k": ["mobile phone keypad", "mapped to letters", "mobile phone", "phone keypad", "keypad are mapped"]}
{"i": "62879", "t": "What is the different between .a .o .out files?", "k": ["files"]}
{"i": "62857", "t": "What happens when u delete a null pointer?\rchar *p;\rdel *p;\r*p=null;\rdel *p", "k": ["null pointer", "del", "delete a null", "pointer", "null"]}
{"i": "62856", "t": "What happens when u delete a pointer twice\rdel *p;\rdel *p;\rWhat is this error called? How to avoid such double deletes?", "k": ["error called", "del", "pointer twice del", "called", "pointer"]}
{"i": "62855", "t": "Compare and contrast dynamic array & linked list", "k": ["contrast dynamic array", "linked list", "compare and contrast", "dynamic array", "contrast dynamic"]}
{"i": "62854", "t": "Why is malloc preferred over calloc?", "k": ["preferred over calloc", "malloc preferred", "calloc", "malloc", "preferred"]}
{"i": "62853", "t": "How is the memory allocation done for a union?", "k": ["memory allocation", "union", "memory", "allocation"]}
{"i": "62852", "t": "What is the return type of constructor?", "k": ["type of constructor", "return type", "constructor", "return", "type"]}
{"i": "62851", "t": "Why do we need abstract classes?", "k": ["abstract classes", "classes", "abstract"]}
{"i": "62843", "t": "I had two phone interviews at Amazon.com. Got rejected after the second interview even though I thought I did very well (think I answered every question correctly!). I'm thinking it must be the economy :(", "k": ["interviews at amazon.com", "phone interviews", "amazon.com", "question correctly", "phone"]}
{"i": "62827", "t": "What is the complexity of operations in a binary search tree?", "k": ["binary search tree", "search tree", "complexity of operations", "binary search", "tree"]}
{"i": "62656", "t": "Explain how memory allocation works in C++.  Where is the stack vs the heap used?", "k": ["memory allocation works", "explain how memory", "memory allocation", "allocation works", "explain"]}
{"i": "62655", "t": "Explain how HTTP get/post method works.", "k": ["post method works", "explain how http", "post method", "method works", "http"]}
{"i": "62826", "t": "Explain how to use servlets and JSP.", "k": ["servlets and jsp", "jsp", "explain", "servlets"]}
{"i": "62825", "t": "Write a method to reverse words of string.", "k": ["write a method", "words of string", "method to reverse", "reverse words", "write"]}
{"i": "62824", "t": "What are the advantages and disadvantage of hashtable vs binary trees.  When would you use it?", "k": ["binary trees", "advantages and disadvantage", "disadvantage of hashtable", "hashtable vs binary", "trees"]}
{"i": "62823", "t": "Implement an algorithm to generate all prime number from 1-100 in fastest and most efficient way", "k": ["implement an algorithm", "algorithm to generate", "generate all prime", "prime number", "number from 1-100"]}
{"i": "62653", "t": "Design an algorithm, as well as the necessary data structures and algorithms, for valet parking to find parking spot.  How would you charge?", "k": ["find parking spot", "parking spot", "data structures", "design an algorithm", "valet parking"]}
{"i": "62649", "t": "What is Normalization? And what is First Norm Form:\r Eliminate duplicative columns from the same table. \rCreate separate tables for each group of related data and identify each row with a unique column (the primary key).", "k": ["norm form", "normalization", "eliminate duplicative", "eliminate duplicative columns", "form"]}
{"i": "62644", "t": "What is the difference between C and C++?  Compare and contrast the two.", "k": ["compare and contrast", "difference", "compare", "contrast"]}
