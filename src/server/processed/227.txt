{"i": "5761560760811520", "t": "Given two words, determine if the first word, or any anagram of it, appears in consecutive characters of the second word. For instance, tea appears as an anagram in the last three letters of slate, but let does not appear as an anagram in actor even though all the letters of let appear in slate.\rReturn the anagram of the first word that has appeared in the second word. \rSample Input 1\rtea\rslate\r Sample Output1\rate\rSample Input 2\rlet\rslate\r Sample Output2\rNONE\r java solution", "k": ["sample input", "consecutive characters", "ate sample input", "sample", "anagram"]}
{"i": "5663120110387200", "t": "Given a string, complete the given function to recursively remove the adjacent duplicate characters and return the resultant string. If there are no characters left in the resultant string, return \"-1\" (without quotes).\rSample Test Cases\rSample Input: ABCCBCBA\rOutput: ACBA\r Explanation: (ABCCBCBA --> ABBCBA --> ACBA)\rSample Input: AA\rSample Output: -1\rJava solution", "k": ["adjacent duplicate characters", "resultant string", "cases sample input", "sample input", "function to recursively"]}
{"i": "5152360452063232", "t": "How would you debug a Linux program taking too much memory.", "k": ["linux program taking", "debug a linux", "linux program", "program taking", "linux"]}
{"i": "5659044186423296", "t": "There are 2 sets A and B of numbers where numbers are keep coming at high speed. At any given time, you need to find 'A UNION B', 'A INTERSECTION B', 'A - B' and 'B - A'. \r How will you store numbers and how will you find these value in real time?", "k": ["high speed", "coming at high", "sets", "speed", "numbers"]}
{"i": "5066784302432256", "t": "Get numbers that have 90% percentile rank from a collumn in db that contains integers. (their solution is using ntile)", "k": ["percentile rank", "percentile", "integers", "numbers", "rank"]}
{"i": "5199481612009472", "t": "retain vs assign (Objective C)", "k": ["retain vs assign", "objective", "retain", "assign"]}
{"i": "5629734255853568", "t": "what is seletector (Objective C)?", "k": ["objective", "seletector"]}
{"i": "5695773672996864", "t": "which JSON framework is supported by iOS?", "k": ["json framework", "supported by ios", "framework is supported", "json", "ios"]}
{"i": "5729257238036480", "t": "What's CoreData (Objective C)?", "k": ["objective", "coredata"]}
{"i": "5662599345602560", "t": "The ways to store data locally on device (for iOS)?", "k": ["store data locally", "locally on device", "store data", "data locally", "device"]}
{"i": "5674582304358400", "t": "Round 3 of the interview(in person)\rOn amazon website, what does the request  most recent viewed items API look like?\rOn server side, design a data structure to cache the most recent viewed item for all clients( consider the size of amazon user)", "k": ["viewed items api", "recent viewed items", "recent viewed", "items api", "request most recent"]}
{"i": "5079121595990016", "t": "Round 3 of the interview(in person)\rDesign a online chess game. \rDetail design of the chess board, chess piece.\rDetail design the \"move\" action", "k": ["online chess game", "detail design", "chess game", "round", "design"]}
{"i": "5642071549411328", "t": "Round 3 of the interview(in person). \rgiven a binary tree with each node contains a number (with negative, duplicate number), write program to find the level which have the most num of negetive number.", "k": ["round", "number", "interview", "person", "duplicate number"]}
{"i": "5091974822494208", "t": "Word Wrap / String Justification algorithm.\rGiven a set of words and a length.\rYou are required to print the words such that the words on each line end almost on the same column and the number of trailing spaces at the end is minimized.\r  Given aaa bb cc ddddd and length is 5 print the following output.\r   aaa\rbb cc\rddddd", "k": ["string justification algorithm", "string justification", "justification algorithm", "word wrap", "wrap"]}
{"i": "5205121440940032", "t": "Given a huge file 100 million integers. He further divided the file into 100 files with 1 million integers in each and each file is sorted. Needed to find the k smallest integers.\r I used the concept of min-heap. Take the first element from each file and construct a min-heap. Take the root,as it is the smallest element and insert the next element from the file which contains the root root element. Heapify the tree and repeat k times.\r The interviewer asked if another efficient method exists?", "k": ["million integers", "file", "huge file", "integers", "million"]}
{"i": "4974004955774976", "t": "write a program to write all combination for elements given in a list. (no of elements in given list are may vary)\r for ex list  = {1,2,3}\rcombinations:\r1\r2\r3\r12\r13\r23\r123", "k": ["write", "write a program", "program to write", "list", "elements"]}
{"i": "6381379839328256", "t": "select * from Employee, Department\r will this query execute and in case yes what will be output, in case no why?", "k": ["query execute", "select", "employee", "department", "case"]}
{"i": "5576056291459072", "t": "Class A\r{ void print(){}\r}\r Class B extends A\r{ void print(){}\rpublic static void main(String args[])\r{\rB b = new A();\r}\r}\r  Whats wrong with the above piece of code?\rwill below mentioned line work?\rB b = (B)new A();", "k": ["static void main", "public static void", "void print", "string args", "void main"]}
{"i": "5652841716776960", "t": "How to find starting of loop in a link list in case looping somewhere.\r For ex: 1->2->3->4->5->3", "k": ["find starting", "starting of loop", "link list", "list in case", "case looping"]}
{"i": "5637424931667968", "t": "Given two stations at random, show all possible routes between those stations (if any)\r- Stations links are listed below\r- Links between stations are bi-directional\r- Routes generated should not have cycles\r cambridge<>stansted\rstansted<> harlow\rharlow<>london\rlondon<>hatfield\rhatfield<>peterborough\rcambridge<>hatfield\rcambridge<>ely\rpeterborough<>ely\rpeterborough<>birmingham\rbirmingham<>manchester\rmanchester<>glasgow\rglasgow<>edinburgh\redinburgh<>newcastle\rnewcastle<>thirsk\rthirsk<>york\ryork<>manchester\ryork<>peterborough", "k": ["ely peterborough", "routes generated", "cycles cambridge", "stations links", "peterborough cambridge"]}
{"i": "6181533937303552", "t": "Given a number N. find is it perfect square or not. cannot use any library functions.", "k": ["number n. find", "perfect square", "number", "find", "perfect"]}
{"i": "5189533930881024", "t": "Merge N sorted linked list of integers\rConstraint was : \rmin comparison and no extra memory(i given a solution with min heap, they told heap will take O(N) memory. so cant use it).", "k": ["sorted linked list", "integers constraint", "merge n sorted", "extra memory", "sorted linked"]}
{"i": "5096264421081088", "t": "Difference between Trie and N-array tree.", "k": ["trie and n-array", "difference between trie", "n-array tree", "trie", "n-array"]}
{"i": "5659214374502400", "t": "Merge N sorted linked list of integer\rConstraint was : \rmin comparison and no extra memory(i given a solution with min heap, they told heap will take O(N) memory. so cant use it).", "k": ["sorted linked list", "integer constraint", "merge n sorted", "extra memory", "sorted linked"]}
{"i": "6376647859109888", "t": "Amazon is considering introducing a customer loyalty program, which rewards members with Amazon Dollars on purchases. The program encourages members to be sponsors and recruit other shoppers to join. Purchases made by recruits are then rewarded to the sponsor. The chain of recruits can be arbitrarily deep. Any purchase by a member is counted towards that member (10% of purchase price), their sponsor (4%), their sponsor\u2019s sponsor (4% of 4%), their sponsor\u2019s sponsor\u2019s sponsor (4% of 4% of 4%), etc. Finally, a sponsor can have any number of recruits, but any one recruit can only have one sponsor.\rWrite a function that calculates the payout for a given member.\r Given the following interface, please implement the MemberPayoutUtil.calculatePayout function.\r public interface Member {\r    public double getMonthlyAmazonDollars();\r    public Collection<Member> getRecruitedMembers(); \r}", "k": ["amazon dollars", "customer loyalty program", "sponsor", "amazon", "introducing a customer"]}
{"i": "5151864920211456", "t": "There is a party going on. A favorite group has to be found out. Suppose there are five people A, B, C, D and E.\rA, B and C knows each other. D and E knows A, B and C. So ABC is the favorite group as all of them know each othe and \revry other in the party knows them. Question was How to find this group and which datastructure/algo will be suitable?", "k": ["group", "favorite group", "favorite", "party", "abc"]}
{"i": "4825417139617792", "t": "Given stock price of Amazon for some consecutive days. Need to find the maximum span of each day\u2019s stock price. Span is the amount of days before the given day where the stock price is less than that of given day\r E.g i/p = {2,4,6,9,5,1}\r      o/p= { -1,1,2,3,2,-1}", "k": ["stock price", "amazon", "price of amazon", "stock", "price"]}
{"i": "5113012444725248", "t": "Given a matrix of characters and a string, find whether the string can be obtained from the matrix. From each character in the matrix, we can move up/down/right/left. for example, if the matrix[3][4] is\r o f a s\rl l q w\rz o w k \r and the string is follow, then the function should return true.", "k": ["matrix", "string", "find", "obtained", "characters"]}
{"i": "6220806916931584", "t": "How would you maintain concurrency on a shared page being edited by multiple users simultaneously.\rWhat if the page is being shared using a client- server mechanism. Represent the classes and explain the thread safety mechnism to avoid editing conflicts.", "k": ["multiple users simultaneously", "users simultaneously", "maintain concurrency", "edited by multiple", "multiple users"]}
{"i": "5105326600749056", "t": "Given 2 strings str1 and str2. What is the efficient way to navigate from str1 to str2? The constraints are i) a string can be changed to another string by changing only one character. ii) all the intermediate strings must be present in dictionary. If not possible, return \u201cnot possible to navigate from str1 to str2\u2033. (pre-processing is allowed and enough memory is available). for example: str1 = feel and str2 = pelt, then the navigation is feel -> fell -> felt -> pelt", "k": ["pelt", "navigate", "strings", "string", "feel"]}
