{"i": "5140055074013184", "t": "Maximum triangle path Sum : Starting from the top of a pyramid of numbers like below, you can walk down going one step on the right or on the left, until you reach the bottom row:\r\t\t55\r   \t   94       48\r\t95     30       96\r   77      71     26      67\r One of such walks is 55 -> 94 >- 30 -> 26. You can compute the total of the numbers you have seen in such walk, in this case it\u2019s 205.\r Your problem is to find the maximum total among all possible paths from the top to the bottom row of the triangle. In the little example above it\u2019s 321.", "k": ["triangle path sum", "path sum", "maximum triangle path", "bottom row", "reach the bottom"]}
{"i": "5721324002476032", "t": "Design a online shipment tracking system.", "k": ["shipment tracking system", "online shipment tracking", "design a online", "tracking system", "online shipment"]}
{"i": "5417960580579328", "t": "Call at Yahoo Technical Support Number +1888-411-1123 for technical help and easy access. We are always available here 24*7 to give users ultimate support. For more details visit http://www.yahoo-customerservicenumber.com/ and http://www.customercarehelplines.com/yahoo-customer-care-helpline.html", "k": ["technical support number", "yahoo technical support", "call at yahoo", "yahoo technical", "support number"]}
{"i": "6285926578782208", "t": "Design a system to upload images and tag them. Ability to search images with single and multiple tags.", "k": ["design a system", "system to upload", "upload images", "design", "images"]}
{"i": "6258049825112064", "t": "Given a very large binary number which cannot be stored in a variable, determine the remainder of the decimal equivalent of the binary number when divided by 3. Generalize to find the remainder for any number k.", "k": ["large binary number", "binary number", "large binary", "decimal equivalent", "determine the remainder"]}
{"i": "5636069841174528", "t": "Given a file having many lines of text(words) and given a dictionary having an API function boolean isValid(String word), which will return true is a word passed to this function is valid word in dic.,and will return false if given passed argument is not a valid word in dic.\r Now read the file and check if each word as well as all possible words from its L to R and R to L combinations, are valid words in dic. or not.", "k": ["api function boolean", "function boolean isvalid", "api function", "string word", "lines of text"]}
{"i": "5742290623528960", "t": "Given sequentially placed boxes, each representing a number( which may be positive or negative), we need to select the numbers in order to have the maximum sum, having the constraint that if we select a given box, we cannot select adjacent box to it, but can select any other.", "k": ["select adjacent box", "sequentially placed boxes", "positive or negative", "maximum sum", "adjacent box"]}
{"i": "5140484637851648", "t": "Given 2 integers, add them without using any arithmetic operator", "k": ["integers", "arithmetic operator", "add", "operator", "arithmetic"]}
{"i": "5702748671574016", "t": "Implement a LRU cache with ttl at each block", "k": ["implement a lru", "lru cache", "cache with ttl", "lru", "implement"]}
{"i": "5662817085554688", "t": "Given some resources in the form of linked list you have to delete all the resources which sum up to 0(Zero) and return the remaining list.", "k": ["form of linked", "return the remaining", "linked list", "remaining list", "resources which sum"]}
{"i": "4841362177392640", "t": "Find all anagrams of a given string in a file of size 1TB.", "k": ["find all anagrams", "file of size", "find", "size", "anagrams"]}
{"i": "6254587007729664", "t": "Given two strings print all possible permutations of two strings such that the order of characters are maintained.", "k": ["characters are maintained", "order of characters", "strings print", "strings", "maintained"]}
{"i": "5665943284875264", "t": "Given an array,generate all valid ip address from the array.", "k": ["array,generate all valid", "valid ip address", "array", "array,generate", "valid"]}
{"i": "5639848137326592", "t": "Find Longest Repeated Substring in the given string.", "k": ["longest repeated substring", "find longest repeated", "longest repeated", "repeated substring", "find longest"]}
{"i": "5150302865981440", "t": "Table: Student\rFields: Student_ID, Department, Start_Date\rex: 1,A, 2017-01-1\r1,B, 2017-07-1\r1,C, 2017-12-1\r Expected Output: Student_ID, Department, Start_Date, End_Date\rex: 1,A, 2017-01-1, 2017-07-01\r1,B, 2017-07-1,2017-12-01\r1,C, 2017-12-1, ...\r End_Date is the start Date of the next record for the student ID", "k": ["expected output", "student fields", "department", "date", "start date"]}
{"i": "6225138900008960", "t": "Given a equi-weighted uni directed graph and need to find the max distance possible from a given node.", "k": ["equi-weighted uni directed", "uni directed graph", "equi-weighted uni", "uni directed", "directed graph"]}
{"i": "5107418422837248", "t": "Add 1 to the integer represented by a linked list with O(n) time, O(1) space, no recursion(stack space) and without reversing the linked list.", "k": ["stack space", "linked list", "integer represented", "add", "time"]}
{"i": "5670368376258560", "t": "Design an OOP concept for an application where employee can dispatch their incoming phone call according to their seniority level if they are not able to solve.", "k": ["incoming phone call", "design an oop", "oop concept", "application where employee", "employee can dispatch"]}
{"i": "5659214883061760", "t": "Design a kind of kindle fire application where we can subscribe news channel and read the news from all publishers as a digital format.", "k": ["kindle fire application", "design a kind", "digital format", "kind of kindle", "kindle fire"]}
{"i": "5156189387096064", "t": "Write a program to check whether it is a valid binary tree or not.", "k": ["valid binary tree", "write a program", "program to check", "valid binary", "binary tree"]}
{"i": "5719139340517376", "t": "Multiply two numbers represented as a linked list.", "k": ["multiply two numbers", "linked list", "numbers represented", "multiply", "list"]}
{"i": "5726467964010496", "t": "A \u2018plus\u2019 pattern of size 1 is defined as following :\r    1\r1 1 1\r   1\r    size 2 :\r    1\r    1\r1  1 1\r    1\r    1\rFind size of largest plus pattern in given 2D matrix which has only 0s &1s.", "k": ["find size", "plus\u2019 pattern", "largest plus pattern", "size of largest", "size"]}
{"i": "5181572106944512", "t": "1. Difference between arrays and link list\r1.1 How to prepend each of the above with extra data\r2. Hash-table. What datastructure to use to create one. How to resolve collision", "k": ["difference between arrays", "link list", "extra data", "arrays and link", "hash-table"]}
{"i": "5176529815339008", "t": "/*\rAmazon employees are encouraged to learn and be curious, and this means employees can transfer teams within the company easily. \rThis usually means they'll move to a new building, and for those who have parking, they'd need to swap parking spots. \rThe task is that given a list of employees who want to swap parking spots, write a function that can match them up 1 to 1. \rThe output can simply be tuples of aliases. \rEach alias should only be matched once.\r  Input-\ralias fromBuilding toBuilding\radrian building1 building2\rjohn building2 building1\randrew building3 building2\rwilliam building4 building3\rJohn building2 building4\rDoe \r output-\radrian,john\r*/", "k": ["amazon employees", "swap parking spots", "company easily", "encouraged to learn", "transfer teams"]}
{"i": "5709893685215232", "t": "Given a sorted array which has been rotated n number of times. Find the value of n.", "k": ["number of times", "sorted array", "rotated n number", "times", "sorted"]}
{"i": "4852859804844032", "t": "Clone the binary tree.", "k": ["clone the binary", "binary tree", "clone", "tree", "binary"]}
{"i": "5094779944697856", "t": "In a binary tree return the maximum \"turns\" in tree. A \"turn\" is defined as LRL or RLR traversal.", "k": ["binary tree return", "return the maximum", "binary tree", "tree return", "turns"]}
{"i": "6222056925429760", "t": "Return the maximum length sequence containing consecutive numbers from a binary tree.\r\t   90\r           /  \\\r          1   66\r         /      \\            \r        2       67\r      /   \\    /\r     5     4  68\r          /    \\\r        99      100\rConsecutive sequence of maximum length: [66, 67, 68] of length 3.", "k": ["binary tree", "consecutive numbers", "maximum length sequence", "maximum length", "return the maximum"]}
{"i": "5096157018587136", "t": "Implement Tower of Hanoi without using recursion.", "k": ["tower of hanoi", "implement tower", "tower", "hanoi", "implement"]}
{"i": "5706664943550464", "t": "A stepping number is defined as a number in which the absolute difference between the consecutive digits is not greater than 1, A stepping number cannot be a single digit number. You have to find the number of stepping numbers between n1 and n2 where n2 > n1 and n2, n1 > 0.", "k": ["single digit number", "absolute difference", "consecutive digits", "single digit", "stepping number"]}
