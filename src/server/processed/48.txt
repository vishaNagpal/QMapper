{"i": "5682362134822912", "t": "Given an array of edges between any two points in 2 dimensional space. A single edge is represented by the co-ordinates of two points it is connecting for example (2,3),(4,5) represents and edge connecting points (2,3) and (4,5).Find out the total number of squares possible if all edges are parallel to X or Y axis.\rNOTE : Include overlapping squares, squares having one side in common and squares contained within another square. Co-ordinates can have float values.\r Example below -\rI have considered a very simple input and output combination to keep it short.\rInput\r{\r(0,0),(0,3)\r(0,0),(3,0)\r(0,3),(3,3)\r(3,0),(3,3)\r}\rOutput : 1\r Possible Approach : Create a map as below -\r Key(Slope of Edge in Degrees) - Value(Array of Edges)\r0 - {(0,0),(3,0)},{(0,3),(3,3)}\r90 - {(0,0),(0,3)},{(3,0),(3,3)}\r While inserting edges in the map, make sure the edges are sorted by max(x1,x2) first and then max(y1,y2).\rPick 2 edges from one slope let's say slope 0, then pick 2 edges from slope 90 and see if square is formed or not. If square not formed, then look at next 2 edges of slope 90 and so on.\rSorting here is an expensive operation.\r Please share any better solutions.", "k": ["dimensional space", "edges", "points", "edge connecting points", "slope"]}
{"i": "5737576464384000", "t": "You have a bunch of shops. Each shops sells a bundle of chocolates at a fixed cost. You are given an amount and the price sheet of shops. Find the maximum number of chocolates that you can buy with the amount.Int Calculate(Int Amount, []Int Quantities, []Int Cost) {\r\n  // Implement\r\n}Other points: (1) You cannot use 'sort' (2) The costliest shop need not sell the maximum number of chocolates. (3) Tricky cases exist. For example: Shop 1 sells 10 chocolates in a 10 $ bundle. Shop 2 sells 9 chocolates in a 1$ bundle.  If you have 10$ in your hand, Here the maximum number of chocolates that you can buy is not 10 but 90.", "k": ["chocolates", "int", "int quantities", "int cost", "maximum number"]}
{"i": "5767478026698752", "t": "Given a directed graph and a node , find the shortest cycle in a graph with given node .", "k": ["find the shortest", "shortest cycle", "directed graph", "node", "find"]}
{"i": "5718510592851968", "t": "Given astruct drop{\r\n\tfloat x_cordinate;\r\n\tfloat radius;\r\n}Return the number of calls that the function Drop() that returns a drop object, needs to be called so that the interval [0, 1) is covered. For each drop object the range covered are values on a line considering x_cordinate as center and radius as the length added on both sides of the x_cordinate on that line?int numCalls(const function<drop> Drop){\r\n\tdrop firstDrop = Drop();\r\n\t// Code from here\r\n}For example, if the first Drop() call returns drop object drop.location as 0.5 (considering points on a 1d axis) and drop.radius as 0.2, then the interval covered is [0.3, 0.7). So how many calls need to be made to ensure the interval [0, 1) is covered. The location and radius can map to any real value.", "k": ["returns drop object", "drop object", "call returns drop", "drop", "drop object drop.location"]}
{"i": "5687609083297792", "t": "Given a list of arrays of time intervals, write a function that calculates the total amount of time covered by the intervals. \rFor example: \rinput = [(1,4), (2,3)] \rreturn 3 \rinput = [(4,6), (1,2)] \rreturn 3 \rinput = {{1,4}, {6,8}, {2,4}, {7,9}, {10, 15}} \rreturn 11", "k": ["write a function", "time intervals", "arrays of time", "amount of time", "time covered"]}
{"i": "5199653285396480", "t": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.", "k": ["non-negative integers", "representing two non-negative", "non-empty linked lists", "linked lists representing", "non-empty linked"]}
{"i": "5661122112258048", "t": "given an array representing a non-negative integer (ex: 123 represented as [1,2,3]), return the next integer (output: [1,2,4]). \rrun through all edge cases (ex: [9,9,9,9,9,9,9,9] etc)", "k": ["non-negative integer", "array representing", "representing a non-negative", "output", "integer"]}
{"i": "5746583371513856", "t": "Complicated problem statement but was asked to implement binary search", "k": ["complicated problem statement", "implement binary search", "complicated problem", "binary search", "problem statement"]}
{"i": "5748792259772416", "t": "Sparse Scalar vector dot product. \rin less than O(n)", "k": ["sparse scalar vector", "scalar vector dot", "sparse scalar", "vector dot product", "scalar vector"]}
{"i": "5707120205365248", "t": "Write a uniform random function generator from 1 to n, given a uniform random Boolean generator, which return true or false for a given number randomly.", "k": ["uniform random boolean", "random boolean generator", "uniform random function", "random function generator", "uniform random"]}
{"i": "5680459598528512", "t": "Given a graph in which there is an edge between (u,v) if gcd(u,v)>g . Given queries of u,v find if a path from u,v exists", "k": ["gcd", "exists", "graph", "edge", "queries"]}
{"i": "5702735421243392", "t": "Write a new data structure, \"Dictionary with Last\"\r Methods:\rset(key, value) - adds an element to the dictionary\rget(key) - returns the element\rdelete(key) - removes the element\rlast() - returns the last key that was added or read.\r In case a key was removed, last will return the previous key in order.", "k": ["data structure", "added or read", "element delete", "removes the element", "methods"]}
{"i": "5715463313555456", "t": "Given a grid M x N cells having weight in each cell(any integer),\rFor every path from TOP-LEFT to BOTTOM-RIGHT, find the minimum weight you come across.(Minimum per path.)\rNow from all those minimum weights, find the Maximum.\rYou can move in all 9 directions.\r Is this a trick question?", "k": ["find the maximum", "top-left to bottom-right", "find", "minimum", "path"]}
{"i": "5661793939095552", "t": "Given an integer S, you have to count the total number of integral solutions of the equation a+b^2+c^3+d^4<=S, such that 0<=a,b,c,d<=10000 and 0<S<10^15\r Edit: Here value can be less than or equal to S, so if input S= 2 ,then output=12\ri.e we can consider 0,0,0,1 and 0,0,0,0 etc also as sum will be less than S(i.e 2)", "k": ["count the total", "total number", "number of integral", "integral solutions", "edit"]}
{"i": "5707854846099456", "t": "Given two strings Y and Z , return True if y beats z or z beats y .\rBeating Criteria : for i in [1,N] y[i]>=z[i] , if this condition is true for any of permutations of y for any of the permutations of z .", "k": ["beating criteria", "return true", "condition is true", "true", "beating"]}
{"i": "5685695163662336", "t": "Get the sum of all prime numbers up to N. primeSum(N). \rFollow-up: If primeSum(N) is frequently called, how to optimize it.", "k": ["prime numbers", "primesum", "sum", "prime", "numbers"]}
{"i": "5726033496506368", "t": "Find a pair that equals to the given target from the list of given two lists.\rexample:\rinput:\rtarget = 7\rlist1= [[1,2],[2,4[,[3,6]]\rlist2 = [[1,2]]\r Output:[[2,1]]\r Explanation: There are only three combinations [1,1],[2,1] and [3,1], which use a total of 4,6, 8 respectively. Since 6 is the largest use that does not exceed 7, [2,1] is the only optimal pair.\r Example 2:\rInput :\rtarget = 10\rlist1 = [[1,3],[2,5],[3,7],[4,10]]\rlist2 = [[1,2],[2,3],[3,4],[4,5]]\r Output;\r[[2,4],[3,2]]", "k": ["output", "input", "explanation", "target", "find"]}
{"i": "5730470801702912", "t": "How to divide a circular array into k group of contiguous element such that difference between maximum sum and minimum sum is minimum. Each group have contiguous element of array. For e.g If the array is as follow. [6 13 10 2] and k=2 then o/p should be 18(6+10+2)-13=5. As array is circular 6,10,2 are contiguous element of array.\r For e.g If the array is as follow. [6 13 2 10] and k=2 then o/p should be 16(6+10)-15(13+2)=1. As array is circular 6,10 are contiguous element of array.\r For e.g If the array is as follow. [100 92 133 201 34 34 34 94 108] and k=4 then group as follow 208(108,100), 225(92,133), (201), 196(34,34,34,94) so 225-196=29", "k": ["array", "contiguous element", "minimum sum", "maximum sum", "difference between maximum"]}
{"i": "5645463936565248", "t": "Prroblem: write an algorithm to calculate the minimum cost to add new roads between the cities such that all the cities are accessible from each other\r   int numTotalAvailableCities = 6;\r            int numTotalAvailableRoads = 3;\r            int[,] roadsAvailable = { { 1, 4 }, { 4, 5 }, { 2, 3 } };\r            int[,] costNewRoadsToConstruct = { { 1, 2,5 }, { 1,3,10 }, {1,6,2} ,{ 5, 6, 5 } };\r            int numNewRoadsConstruct = 4;public class MinimumCostToConstructNewRoad\r\n    {\r\n        public static int getMinimumCostToConstruct(int numTotalAvailableCities,\r\n            int numTotalAvailableRoads,\r\n            int[,] roadsAvailable,\r\n            int numNewRoadsConstruct,\r\n            int[,] costNewRoadsConstruct)\r\n\r\n        {\r\n            int totalCost = 0;\r\n            bool[] Visited = new bool[numTotalAvailableCities];\r\n            int[] Keys = new int[numTotalAvailableCities];\r\n            int[] Parent = new int[numTotalAvailableCities];\r\n\r\n            int[,] AdjMatrix = GetAdjecencyMatrix(roadsAvailable, costNewRoadsConstruct, numTotalAvailableCities);\r\n\r\n\r\n            for (int i=0;i< numTotalAvailableCities;i++)\r\n            {\r\n                Keys[i] = Int32.MaxValue;\r\n            }\r\n\r\n            Keys[0] = 0;\r\n            Parent[0] = -1;\r\n\r\n            for(int i=0;i< numTotalAvailableCities-1;i++)\r\n            {\r\n                var u = FindMin(Visited, Keys);\r\n\r\n                Visited[u] = true;\r\n                for(int v=0;v< numTotalAvailableCities;v++)\r\n                {\r\n                    if(Visited[v]==false && AdjMatrix[u, v]!=Int32.MaxValue && AdjMatrix[u,v]<Keys[v])\r\n                    {\r\n                        Parent[v] = u;\r\n                        Keys[v] = AdjMatrix[u, v];\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n           for(int i=1;i< numTotalAvailableCities;i++)\r\n            {\r\n                totalCost = totalCost + AdjMatrix[Parent[i], i];\r\n            }\r\n            return totalCost;\r\n        }\r\n\r\n\r\n        private static int FindMin(bool[] Visited, int[] Keys)\r\n        {\r\n            int min = Int32.MaxValue; int index = -1;\r\n            for (int i = 0; i < Keys.Length; i++)\r\n            {\r\n                if (Visited[i] == false && Keys[i] < min)\r\n                {\r\n                    min = Keys[i];\r\n                    index = i;\r\n                }\r\n            }\r\n            return index;\r\n        }\r\n\r\n\r\n        private static int[,]  GetAdjecencyMatrix(int[,] roadsAvailable, int[,] costNewRoadsConstruct,int numTotalAvailableCities)\r\n        {\r\n            int[,] AdjMatrix = new int[numTotalAvailableCities, numTotalAvailableCities];\r\n\r\n            for (int i = 0; i < numTotalAvailableCities; i++)\r\n            {\r\n                for (int j = 0; j < numTotalAvailableCities; j++)\r\n                {\r\n                    AdjMatrix[i, j] = Int32.MaxValue;\r\n                }\r\n            }\r\n\r\n\r\n            int count = 0;\r\n            for (int i = 0; i < roadsAvailable.GetLength(0); i++)\r\n            {\r\n                int start = roadsAvailable[i, count]-1;\r\n                int end = roadsAvailable[i,count+1]-1;\r\n                AdjMatrix[start, end] = 0;\r\n            }\r\n\r\n            for (int i = 0; i < costNewRoadsConstruct.GetLength(0); i++)\r\n            {\r\n                int start = costNewRoadsConstruct[i, count]-1;\r\n                int end = costNewRoadsConstruct[i, count+1]-1;\r\n                int cost= costNewRoadsConstruct[i, count + 2];\r\n\r\n                AdjMatrix[start, end] = cost;\r\n            }\r\n\r\n            return AdjMatrix;\r\n        }\r\n    }", "k": ["private static int", "public static int", "static int findmin", "static int getminimumcosttoconstruct", "public class minimumcosttoconstructnewroad"]}
{"i": "5729761528119296", "t": "Maximum Pairs\r You are given N pencils. You have to make pairs of pencils.\r The condition for making pairs is:\rIf(a,b) is any pair of pencils then b >= 2 * a. Here a and b are the sizes of pencils.\r Now you have to find out the number of such pairs and the number of pencils which could not be paired with any pencils.\r Note:\r You need to pair the pencils in such a manner that the maximum number of pairs are formed.\r Input Format:\r The first line consists of number of test case T.\rEach test case consist of:\r- First line consists of a single integer N.\r- Second line consists of N space-separated integers denoting the size of pencils Si.\r Output Format:\r For each test case, print two space-separated integers, first denoting the number of pairs formed and second denoting the number of unpaired pencils.\rAnswer for each test case should come in a new line.\r Constraints\r1<T<=10\r1<=N<=10^5\r0<=Si<=10^5\r Sample Input\r 2\r5\r1 2 3 4 5\r4\r1 2 4 4\r Sample Output\r 2 1\r2 0\r Explanation\r In the first test case:-\rwe can form the following pairs:\r(1, 3), (2, 4) and 5 remains unpaired hence maximum pairs are 2\rIn second test case:-\r(1, 4), (2, 4) are two pairs hence no pencil left unpairedpublic class Test {\r\n    public static void main(String[] args) {\r\n          }\r\n\r\n    static int[] solve(int[] arr) {\r\n        // the value at first index of array to be returned is number of pairs\r\n        // formed and value at second index is unpaired swords.\r\n           }\r\n}", "k": ["pairs", "test case", "pencils", "number", "test"]}
{"i": "5720399707373568", "t": "Given a target number and a single number, write a program to find the shortest path to calculate the target number by applying \"+-*/\" operations to the single number. No parentheses. For example, if we have target number=26 and single number=3 return 3 * 3 * 3 - 3 / 3.", "k": ["write a program", "program to find", "find the shortest", "shortest path", "path to calculate"]}
{"i": "5713002834165760", "t": "Given a Start Node and an End Node in a graph report if they are \u201cnecessarily connected\u201d. This means that all paths from the start node lead to the end node. Report true all paths from start node lead to end node and false if at least one path does not lead to the end node. This is a directed graph which can have cycles\r  Does anyone know how to solve this? I had it in my interview at Google in CA and I still cant solve it", "k": ["end node", "start node lead", "start node", "node", "necessarily connected"]}
{"i": "5701834149199872", "t": "how would you debug a tablet with a part of its touch screen is broken.", "k": ["screen is broken", "debug a tablet", "touch screen", "broken", "debug"]}
{"i": "5635485494411264", "t": "Given an arbitrary tree remove nodes which have data value 0.\rAs it stats arbitrary tree, I assumed n-ary tree.", "k": ["tree remove nodes", "arbitrary tree remove", "remove nodes", "arbitrary tree", "tree remove"]}
{"i": "5142847603343360", "t": "Design a Google Sheet System?\r Where do you store the data? sql or nosql\rHow do you maintain concurrency?\rHow do you display it in frontend, which can be inline editable?", "k": ["google sheet system", "sheet system", "google sheet", "design a google", "system"]}
{"i": "5665901941096448", "t": "* Build Offices \rA company wants to develop an office park in an area that has been divided up into a grid where each cell represents a potential building lot. The goal is for the furthest of all lots to be as near as 1 possible to an office building. Determine the building placement to minimize the distance the 0 most distant lot is from an office building. Movement is restricted to horizontal and vertical, i.e. diagonal movement is not allowed. \rFor example, there are n = 3 office buildings to build on a grid that is w = 4 lots wide and h = 4 lots high. An optimal grid placement sets any lot within two units distance of an office building. In the distance grid below, offices are cells at distance 0. \r1 0 1 2 \r2 1 2 1 \r1 0 1 0 \r2 1 2 1 \r That represents one optimal solution among several, this array rotated for example. \r The function must return an integer that denotes the maximal value among shortest distances to the closest office for each cell. \rfindMinDistance has the following parameter(s): w: an integer, the width of the grid h: an integer, the height of the grid n: an integer, the number of buildings to place \rConstraints:\rwxh <= 28", "k": ["office building", "potential building lot", "office", "building", "grid"]}
{"i": "5759251377553408", "t": "In an interview this question has been asked : \rHow to fit four characters into an integer, implementation should be in C programming language. \r For example, four characters, viz., 'a', 'b', 'c', and 'd' need to be fit into an integer. \r I tried to answer this question using ASCII value of the characters. \r Please suggest the correct solution.", "k": ["programming language", "integer", "interview this question", "characters", "asked"]}
{"i": "5652049329389568", "t": "Given a series of equations e.g. [A = B, B = D, C = D, F = G, E = H, H = C] \rand then another series [A != C, D != H, ..., F != A ] \r Check whether the equations combined is valid. \r For the example given, your program should return 'invalid', because the first series implies that A = C, which contradicts the statement A != C in the second series.", "k": ["combined is valid", "equations combined", "check", "series", "equations"]}
{"i": "5765584776593408", "t": "A function receives a big array (about 1G).\rafter manipulations done on the array it's data\rwill be erased. What should you're attitude be to dealing with the array? (I didn't understand totally the interviewer's meaning", "k": ["function receives", "receives a big", "big array", "array", "function"]}
{"i": "5738474540367872", "t": "read the 5'th bit from a byte", "k": ["read", "bit", "byte"]}
