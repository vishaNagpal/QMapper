{"i": "5677021086613504", "t": "How to remove file named \"~\" ?", "k": ["remove file named", "file named", "remove file", "named", "remove"]}
{"i": "5750926736359424", "t": "Given a file containing a list of ip addresses that have lost their dots(.'s), write a program to find the ip addresses, assume ipv4. input: 11111 output. 1.1.1.11, 11.1.1.1, etc", "k": ["lost their dots", "write a program", "program to find", "assume", "addresses"]}
{"i": "5639916528599040", "t": "Giiiven a matrix of -1's and 0's, display a matrix which contains minimum distance to reach nearest 0 for that particular position. \r Example:\r Input: -1  0  -1\r\t  -1  -1 -1\r         -1   -1 -1\r Ouutput:\r \t1 0 1\r\t2 1 2\r\t3 2 3", "k": ["giiiven a matrix", "display a matrix", "reach nearest", "minimum distance", "distance to reach"]}
{"i": "5114375203454976", "t": "Write a shell script to reverse a string without using inbuilt function.", "k": ["write a shell", "inbuilt function", "shell script", "script to reverse", "reverse a string"]}
{"i": "5073112714444800", "t": "Given a binary tree, change the value in each node to sum of all the values in the nodes on the left side of the node.\r Eg     \t    1\r\t          /    \\\r\t         2      3\r \t\t   3\r                /      \\\r               2        6\r solved this question using int* he asked me to do it without integer pointer.", "k": ["binary tree", "left side", "node to sum", "node", "tree"]}
{"i": "5704898377154560", "t": "Given an array of positive negative no, u need to find max sum we can achieve using this array, condition is u cannot use two adjacent items.\r Print sum in one line\rPrint all items that contribute this sum in other line using space separated char\r if all items r negative then print least negative no\r -1 4 5 -2 -6 6\routput-\r11\r5 6\rwe want it inplace and linear time.\rFocus on printing items that contribute max sum.", "k": ["find max sum", "positive negative", "find max", "max sum", "sum"]}
{"i": "5631661131694080", "t": "the address of  a[5][5] is 1000,wat is the address of a[7][9]", "k": ["address"]}
{"i": "5167661856063488", "t": "Write a program to find the distinct elements out of an array but not using loop, using XOR", "k": ["write a program", "program to find", "find the distinct", "distinct elements", "xor"]}
{"i": "6325233388617728", "t": "Design a data structure which has following operations:\r\n\r\n1. void add(e)\r\n2. void delete(e)\r\n3. boolean contains(e)\r\n4. e getRandom()\r\n5. e getMostRecent()\r\n\r\nAll operations should be preferably O(1)", "k": ["design a data", "data structure", "void add", "design", "void"]}
{"i": "5668584428666880", "t": "Write a program to find prime number and let me know the 2^n complexity of your program", "k": ["find prime number", "find prime", "prime number", "write a program", "write"]}
{"i": "5686393510559744", "t": "Write a program to find the the prime numbers and let me know the 2^n complexity algorithm", "k": ["write a program", "complexity algorithm", "program to find", "prime numbers", "write"]}
{"i": "6292059061223424", "t": "Kindly find the question below:\r Design a data structure which has following operations:\r 1. void add(e)\r2. void delete(e)\r3. boolean contains(e)\r4. e getRandom()\r5. e getMostRecent()\r All operations should be preferably O(1)", "k": ["design a data", "kindly find", "find the question", "data structure", "design"]}
{"i": "5116371893485568", "t": "Write a program to remove the duplicate elements from an array. Dont use loop logic use XOR function to write a solution.", "k": ["program to remove", "remove the duplicate", "duplicate elements", "write a program", "array"]}
{"i": "5069491251707904", "t": "there is PCB robot move from point of beginning go to destination find the shortest distance/shortest path from starting to destination", "k": ["pcb robot move", "pcb robot", "shortest distance", "robot move", "move from point"]}
{"i": "6282171643854848", "t": "There are at most eight servers in a data center. Each server has got a capacity/memory limit. There can be at most 8 tasks that need to be scheduled on those servers. Each task requires certain capacity/memory to run, and each server can handle multiple tasks as long as the capacity limit is not hit. Write a program to see if all of the given tasks can be scheduled or not on the servers? \r Ex: \rServers capacity limits: 8, 16, 8, 32 \rTasks capacity needs: 18, 4, 8, 4, 6, 6, 8, 8 \rFor this example, the program should say 'true'. \r Ex2: \rServer capacity limits: 1, 3 \rTask capacity needs: 4 \rFor this example, program should return false. \r Got some idea that this needs to be solved using dynamic programming concept, but could not figure out exact solution.", "k": ["data center", "capacity", "servers", "tasks", "server"]}
{"i": "5080163574349824", "t": "Wap to insert space in a string in all possible way and print.\rE.g- string is abcd\routput  a_bcd,a_b_cd,a_b_c_d\rab_cd,ab_c_d,\rabc_d", "k": ["wap to insert", "insert space", "wap", "print", "string"]}
{"i": "5647660555960320", "t": "You are given an array, that is sorted, however was rotated to the right by a certain distance. The array may contain duplicated values. Find the index of a given element in the array. \r Example: {3, 9, 9, 9, 8, 10, 12, 13, 1, 2, 3}, element = 3, returns, any of indexes that 3 is present.", "k": ["array", "sorted", "distance", "rotated", "element"]}
{"i": "5743544090230784", "t": "Given an array containing only stars '*' and hashes '#' . Find longest contiguous sub array that will contain equal no. of stars '*' and hashes '#'.\r Order (n) solution required", "k": ["find longest contiguous", "stars and hashes", "find longest", "hashes", "longest contiguous"]}
{"i": "5068406906683392", "t": "Given an array containing only stars '*' and hashes '#' . Find longest contiguous sub array that will contain equal no. of stars '*' and hashes '#'.", "k": ["find longest contiguous", "stars and hashes", "find longest", "longest contiguous", "hashes"]}
{"i": "6221313031012352", "t": "An array contain 6 different numbers, only 1 number is repeated for 5 times. So now total 10 numbers in array, Find that duplicate number in 2 steps only?", "k": ["find that duplicate", "times", "array", "repeated", "numbers"]}
{"i": "5725353829990400", "t": "Given  a 2 dimensional matrix where some of the elements are filled with 1 and rest of the elements \rare filled. Here X means you cannot traverse to that particular points. From a cell you can either traverse to left, right, up or down\rGiven two points in the matrix find the shortest path\rbetween these points \r For example if the matrix is \r1 1 1 1 1\rS 1 X 1 1\r1 1 1  1  1\rX 1 1  E  1\r1 1  1  1   X\r Here S is the starting point and E is the Ending point", "k": ["elements are filled", "dimensional matrix", "elements", "filled", "ending point"]}
{"i": "5760108168478720", "t": "Design a system like friend's functionality in facebook. should have all features of facebook's friends functionality. like for each person , he can have any number of friends , he will get suggestions for new firends , showing common friends if we visits any other profile . algo should be scalable , robust .", "k": ["design a system", "facebook friends functionality", "friends", "functionality", "friend functionality"]}
{"i": "5081100900630528", "t": "Problem Statement\r You have two strings A and B. Each one contains some letters and exactly one asterisk.\r You have to replace the asterisk in each string with a letter sequence (possibly of zero length) so that the resulting two \r strings are equal. This equal string is what you have to return. Attempt to return the shortest possible string.\r The letter sequences may be same or different.\r If it is not possible to make the given strings equal, return the string \"not-possible\".\r Additional Constraints \r - A and B will contain only uppercase letters and asterisks.\r - A and B will contain one asterisk each.\r Examples\r 0)\r \"SOCIA*TWIST\"\r \"SOCIALTWI*T\"\r Returns: \"SOCIALTWIST\"\r 1)\r \"HELLO*\"\r \"HI*\"\r Returns: \"not-possible\"\r 2)\r \"PROFESS*\"\r \"*PROFESS\"\r Returns: \"PROFESS\"\r 3) \r \"*EXAMPLETEST\"\r \"THIRDEXAMPLE*\"\r Returns: \"THIRDEXAMPLETEST\"\r 4) \r \"*TELL\"\r \"*AFRIEND\"\r Returns: \"not-possible\"\r 5) \r \"*\"\r \"B*\"\r Returns: \"B\"\r 6) \r \"*C\"\r \"D*\"\r Returns: \"DC\"\r program should be written in java", "k": ["problem statement", "returns", "statement", "profess", "return"]}
{"i": "5723583766593536", "t": "Find the longest words in a given list of words that can be constructed from a given list of letters. \rYour solution should take as its first argument the name of a plain text file that contains one word per line. \rThe remaining arguments define the list of legal letters. A letter may not appear in any single word more times than it appears in the list of letters (e.g., the input letters \u2018a a b c k\u2019 can make \u2018back\u2019 and \u2018cab\u2019 but not \u2018abba\u2019). \r Here's an example of how it should work: \r prompt> word-maker WORD.LST w g d a s x z c y t e i o b \r['azotised', 'bawdiest', 'dystocia', 'geotaxis', 'iceboats', 'oxidates', 'oxyacids', 'sweatbox', 'tideways']\r  Tip: Just return the longest words which match, not all.", "k": ["find the longest", "list", "longest words", "letters", "words"]}
{"i": "5633178328891392", "t": "Question 1.3 from Crack the Coding Interview (Design an algorithm and write code to remove the duplicate characters in a string \rwithout using any additional buffer NOTE: One or two additional variables are fine)\r Is just me or both solutions are wrong? I've tested with {'a', 'b', 'c', 'c', 'd', 'a'} and it finish with bcdda", "k": ["additional buffer note", "coding interview", "crack the coding", "design an algorithm", "buffer note"]}
{"i": "5704741745065984", "t": "You are given a mxn grid arr[][] and you stand at cell arr[p][q]. In 1 'move' you can either go up, down , left or right. Tell the probability that after taking 'k' moves, you are still inside the grid.\r CODE:\r(Can you point out any mistake)#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\r\nvoid traverse(int m, int n,int cur_x,int cur_y,int moves,int * in,int * tot)\r\n{\r\n\tif(moves==0)\r\n\t*tot = *tot+1;\r\n\tif(moves==0 && !(cur_x>=m||cur_y>=n||cur_x<0||cur_y<0))\r\n\t*in = *in +1;\r\n\t\r\n\ttraverse(m,n,cur_x,cur_y+1,moves-1,in,tot);\r\n\ttraverse(m,n,cur_x+1,cur_y,moves-1,in,tot);\r\n\ttraverse(m,n,cur_x,cur_y-1,moves-1,in,tot);\r\n\ttraverse(m,n,cur_x-1,cur_y,moves-1,in,tot);\r\n}\r\n\r\nint main()\r\n{\r\n    int m = 5, n = 5;\r\n    int in=0,tot=0;\r\n    int k,p,q;\r\n    scanf(\"%d%d%d\",&k,&p,&q);\r\n    traverse(m,n,p,q,k,&in,&tot);\r\n    printf(\"%d/%d \",in,tot);\r\n\treturn 0;\r\n}", "k": ["mxn grid arr", "cell arr", "stand at cell", "moves", "tot"]}
{"i": "5136759969021952", "t": "Write a function to label connected components (using 4-connected neighbors) in a binary image.\r You may use any language or data structures, but you may not use any existing APIs/libraries to find the components.\r Example:\r Input image\r 0 0 0 0 0 1 1 0 0 0\r1 1 0 0 1 1 0 0 0 0\r1 1 1 0 0 1 1 0 0 0\r0 0 0 1 1 0 0 0 0 0 \r Output Image\r 0 0 0 0 0 1 1 0 0 0\r2 2 0 0 1 1 0 0 0 0\r2 2 2 0 0 1 1 0 0 0\r0 0 0 3 3 0 0 0 0 0", "k": ["label connected components", "write a function", "function to label", "label connected", "binary image"]}
{"i": "5639016615510016", "t": "What is the following program trying to do?#define SIZE (1<<31) // 2 Gb\r\n\r\nint main()\r\n{\r\n\tchar *p=malloc(SIZE);\r\n\tmemset(p, 0, SIZE);\r\n}a. Trying to crash OS by allocating lot of memory\rb. Trying to calculate amount of system memory\rc. Trying to allocate virtual memory and makesure memory is in physical memory\rd. It is a useless program because the system will not satisfy memory request", "k": ["define size", "size", "int main", "memory", "char"]}
{"i": "5770210736865280", "t": "Implement printf() library function using system-calls assuming a single argument which is a string \reg: printf(\"Hello world\\n\");void printf(char *str)", "k": ["implement printf", "void printf", "library function", "function using system-calls", "system-calls assuming"]}
{"i": "5679867710406656", "t": "Implement sleep() in kernel mode using C-pseudo codevoid sleep(int seconds) {}", "k": ["c-pseudo codevoid sleep", "implement sleep", "mode using c-pseudo", "c-pseudo codevoid", "codevoid sleep"]}
