{"i": "5673998263255040", "t": "You are given a string S consisting of lowercase English letters denoting different types of candies. A substring of a string S is a string S' that occurs in S. For example, \"bam\" is a substring of \"babammm\". Each candy costs 1 unit. You can pick some continuous candies such that you can create a palindrome of length K by using some or all picked candies. Your task is to find the minimum cost to create a palindrome of length K. \r   Input Format: \r First line contains string S. \r Next line contains an integer T denoting the number of test cases. \r Next T lines contain a single integer K. \r   Output Format: \r For each test case, print minimum cost as mentioned above. If you cannot create a palindrome of length K then, simply print -1. \r   Constraints: \rConstraints: \r 1\u2264|S|\u226410^5 \r1\u2264T\u226410 \r1\u2264K\u226410^5 \r   Sample Input \rbabammm \r2 \r2 \r5 \rSample Output \r2 \r5 \rExplanation \rTest Case 1: You can pick candies denoted by \"mm\" and create a palindrome of size 2. So the cost will be 2 units. \r Test Case 2: You can pick candies denoted by \"babam\" and rearrange them, \"bamab\", to create a palindrome of size 5. So the cost will be 5 units.", "k": ["lowercase english letters", "english letters denoting", "lowercase english", "english letters", "create a palindrome"]}
{"i": "6144658195873792", "t": "You are given a string S consisting of lowercase English letters denoting different types of candies. A substring of a string S is a string S' that occurs in S. For example, \"bam\" is a substring of \"babammm\". Each candy costs 1 unit. You can pick some continuous candies such that you can create a palindrome of length K by using some or all picked candies. Your task is to find the minimum cost to create a palindrome of length K.\r   Input Format:\r First line contains string S.\r Next line contains an integer T denoting the number of test cases.\r Next T lines contain a single integer K.\r   Output Format:\r For each test case, print minimum cost as mentioned above. If you cannot create a palindrome of length K then, simply print -1.\r   Constraints:\rConstraints:\r 1\u2264|S|\u226410^5\r1\u2264T\u226410\r1\u2264K\u226410^5\r   Sample Input\rbabammm\r2\r2\r5\rSample Output\r2\r5\rExplanation\rTest Case 1: You can pick candies denoted by \"mm\" and create a palindrome of size 2. So the cost will be 2 units.\r Test Case 2: You can pick candies denoted by \"babam\" and rearrange them, \"bamab\", to create a palindrome of size 5. So the cost will be 5 units.", "k": ["lowercase english letters", "english letters denoting", "lowercase english", "english letters", "create a palindrome"]}
{"i": "6636462987542528", "t": "/**\r * Definition for a binary tree node.\r * public class TreeNode {\r *     int val;\r *     TreeNode left;\r *     TreeNode right;\r *     TreeNode(int x) { val = x; }\r * }\r */Find the largest duplicate subtree in a binary tree\r\n\r\n\r\nFor example,\r\n\r\n        1\r\n       / \\\r\n      2   3\r\n     /   / \\\r\n    4   2   4\r\n       /\r\n      4\r\nThe following are two duplicate subtrees:\r\n\r\n      2\r\n     /\r\n    4\r\nand\r\n\r\n    4but the former is the largest, thus return the root of the first subtree", "k": ["binary tree node", "binary tree", "tree node", "definition", "find the largest"]}
{"i": "5745147215085568", "t": "Write a function that receives string with decimal number (i.e. all characters are decimal digits) and prints the sum of all possible substring-numbers, example:\rsum(\u201c123\u201d) = 123 + 12 + 23 + 1 + 2 + 3 = 167", "k": ["write a function", "decimal number", "decimal digits", "function that receives", "receives string"]}
{"i": "4666668310593536", "t": "Given N number of Strings, generate all combination of these String's characters, these Strings must be N long, and must contain only one number of char from each string.\r example: \"abc\", \"def\", \"ghi\" --> adg, adh, adi, aeg ... cfg", "k": ["string characters", "generate all combination", "number of char", "strings", "string"]}
{"i": "5706565792301056", "t": "Given a target string, an input request replaces the word after the given index a->b such as:\rTarget string: \"Hello world!\"\rInput:{s:0, a:Hello b: Goodbye}\rOutput:\"Goodbye world!\".\rThe requirement is that input be given to several words that need to be changed at one time: {{s:0,a:Hello,b:Goodbye},{s:11,a:!,b:?},{s:6 a: World,b:friend}}\rAnd each modified index is based on the original unmodified target string so the end result is\r\"Goodbye friend?\"", "k": ["input request replaces", "target string", "request replaces", "goodbye world", "goodbye"]}
{"i": "5681081201197056", "t": "given a n-ary tree, find the total distance from this node to any other nodes\r class TreeNode {\r     int val;\r     List<TreeNode> children;\r     TreeNode(int val) { \r         this.val = val; \r         children = new ArrayList<>();\r     }\r}\r  public int findDistance(TreeNode root, TreeNode node) {\r     }", "k": ["public int finddistance", "nodes class treenode", "int val", "n-ary tree", "find the total"]}
{"i": "5583297278115840", "t": "How many squares are inside a m*n rectangle where some grids in the rectangle were grey and the gray grid could not appear in the small squares.", "k": ["gray grid", "small squares", "squares are inside", "rectangle were grey", "squares"]}
{"i": "6112240083140608", "t": "Given an int array, check if all the numbers can be divided into 5 consecutive numbers.\rEg: [1,2,2,3,3,4,4,5,5,6] Yes: (1,2,3,4,5) (2,3,4,5,6)\rFollowup: ask if you know that all the numbers are between 1 and 13, \rwhat's a good optimization.", "k": ["int array", "consecutive numbers", "numbers", "array", "check"]}
{"i": "6014367979012096", "t": "You have  two matrixs, how to move the first matrix\r(move up, down, left, and right) so that the two matrix in the two matrixs match most.eg:\r\nmatrix 1:                matrix 2:\r\n0 0 1                    0 0 0  \r\n0 1 1                    1 1 0  \r\n0 0 0                    1 1 0Then, after taking matrix1 (1 left shift + 1 down), \r  the number of 1 in the match with matrix2 is 3", "k": ["matrixs match most.eg", "left shift", "match most.eg", "matrixs match", "matrix"]}
{"i": "6266247409827840", "t": "how to check if two graphs are structurally identical\r class UndirectedGraphNode {\r      List<UndirectedGraphNode> neighbors;\r     UndirectedGraphNode() { \r        neighbors = new ArrayList<>(); \r     }\r}", "k": ["identical class undirectedgraphnode", "structurally identical class", "class undirectedgraphnode", "neighbors", "graphs are structurally"]}
{"i": "5700027912552448", "t": "Table: Customers\rid | name\r 1|alice\r2|bob\r3|carol\r Table: Orders\rid | customer_id | content\r 1|1|House\r2|2|car\r3|2|dog\r4|10|cow\r please write a query which returns all of the invalid orders (where invalid means their customer_id does not have an associated customer)\r 4|10|cow", "k": ["carol table", "write a query", "query which returns", "invalid orders", "cow please write"]}
{"i": "5654008009064448", "t": "Suppose you have a list of tasks which need to be executed. Some of these tasks have dependencies which must be executed before they are. Please provide a method which, when given a list of tasks, will provide a valid ordering in return.\r Example:\rInput: [ A, B, C, D ]\r   A <- B, C\r   B <- C, D\r   D <- C\rReturn: [ C, D, B, A ]", "k": ["list of tasks", "tasks", "executed", "list", "return"]}
{"i": "6321490889801728", "t": "There are N (N > 20) team, each team will play 'M' (say M =3) league match against every other team. Design various classes, and write the code and algorithm to find the winner.\r Note: One match can be played on a single day, as there is just one stadium.\rNote: No team should play matches on consecutive days.\rNote: Algorithm should come up with Quarter Final, Semi Final, and Final matches.\r Follow-up Question: If N is odd or even.\rHow your design will be modified if there are 'S' no. of stadiums.", "k": ["note", "league match", "final", "team", "semi final"]}
{"i": "5836260651302912", "t": "convert a Sorted array to complete BST", "k": ["convert a sorted", "complete bst", "sorted array", "bst", "array to complete"]}
{"i": "5650298096844800", "t": "How HP Customer Support Works for Users?", "k": ["customer support works", "works for users", "customer support", "support works", "users"]}
{"i": "6303061757132800", "t": "Given six digits, find the earliest valid time that can be displayed on a digital clock (in 24-hour format) using those digits. \r For example, given digits 1, 8, 3, 2, 6, 4 the earliest valid time is \"12:36:48\". Note that \"12 : 34 : 68\" is not a valid time. \r Write a java method: \r     class Solution {\r      public String solution(int A, int B, int C, int D, int E, int F);\r      } \r  that, given six integers A, B, C, D, E and F, returns the earliest valid time in \"HIT :mm: ss\" string format, or \"NOT POSSIBLE\" if it is not possible to display a valid time using all six integers. \r For example, given 1, 8, 3, 2, 6, 4 the function should return \"12:36:48\". \r Given 0, 0, 0, 0, 0, 0, the function should return \"00 : 00 : oo\". Given 0, 0, 0, 7, 8, 9, the function should return \"07:08:09\".\r  Given 2, 4, 5, 9, 5, 9, the function should return \"NOT POSSIBLE\". \r Assume that: \u2022 A, B, C, D, E and F are integers within the range [0..9]. \r Correct answer 1 point\rEfficient solution 2 points", "k": ["earliest valid time", "valid time", "earliest valid", "valid", "digital clock"]}
{"i": "4865575762264064", "t": "Give a connected graph, no cycle,\r Find the node where the average distance from all other nodes is the smallest", "k": ["give a connected", "connected graph", "average distance", "find the node", "find"]}
{"i": "5733790247813120", "t": "Input: an int array without sorting, then do a binary search on it, and find the number of digits that cannot be found by binary search.", "k": ["array without sorting", "binary search", "int array", "find the number", "number of digits"]}
{"i": "5653666022293504", "t": "<key = \"a\"; val = \"3\"; depend_list = null;/>; <key = \"b\"; val = \"a * a\";\rDepend_list = {a};/>; <key = \"c\"; val = \"a * b\"; depend_list = {a,b};/>;\rLets output a map<key, value>,a -> 3, b -> 9, c -> 27\rFollow-up questions: Make a statistic for all keys and corresponding map entries with the same value.", "k": ["follow-up questions", "make a statistic", "map entries", "depend", "val"]}
{"i": "6346914009186304", "t": "Given an array, find an x such that all numbers less than x are equal to themselves. Numbers greater than it are equal to x, and all numbers add up to a target\rFor example, [1 3 5 7 9] target=24, answer is8. Because when x=8, the array has only 9>8, so 1+3+5+7+8=24 is the closest to the target.", "k": ["numbers", "equal", "find", "target", "numbers greater"]}
{"i": "5424644944297984", "t": "Give an N-length array with only 0 and 1 inside\rRequires to find the minimum number of conversions needed to convert the array to 0 before all 1.\rThe conversion is to change a 0 to 1 or a 1 to 0,\rAnd the number of 0 and 1 in the converted array can be arbitrary.\rJust find the minimum conversion step", "k": ["give an n-length", "inside requires", "n-length array", "needed to convert", "requires to find"]}
{"i": "5103243951603712", "t": "Assume courses labeled by their index in an array. Given a list of pairs where the first element represents a prerequisite course required for the second course, derive an ordered list of courses.", "k": ["assume courses labeled", "assume", "array", "derive an ordered", "list of pairs"]}
{"i": "5644785908973568", "t": "For a given set of non-negative integers get the number of subsets that add up to a target value k.", "k": ["set of non-negative", "non-negative integers", "number of subsets", "subsets that add", "set"]}
{"i": "5730176972357632", "t": "For a given array of integers compute the maximum sum of any range in the array. Then modify the function to find maximum product (note the effect of negatives on max product).", "k": ["integers compute", "find maximum product", "maximum sum", "array of integers", "array"]}
{"i": "5724246830481408", "t": "Write a function to compute n^k. (don't forget negative exponents)", "k": ["write a function", "function to compute", "write", "function", "compute"]}
{"i": "4573396384874496", "t": "Print (or return) the longest movie title found by successively matching the last and first words in each title, joining to form new titles, given a file containing a list of movie titles.\rFor example: 'OF MICE AND MEN' and 'MEN IN BLACK' join to form 'OF MICE AND MEN IN BLACK'.\rYou could further join 'OF MICE AND MEN IN BLACK' wth 'BLACK MASS' to form 'OF MICE AND MEN IN BLACK MASS'.\r The longest title I found (at 143 characters is): WENT TO CONEY ISLAND ON A MISSION FROM GOD BE BACK BY FIVE WIVES THREE SECRETARIES AND ME WITHOUT YOU CANT TAKE IT WITH YOU WERE NEVER LOVELIER", "k": ["mice and men", "men in black", "black mass", "men", "black"]}
{"i": "5903178926129152", "t": "Problem:\r Insert + or \u2013 sign anywhere between the digits 123456789 in such a way that the expression evaluates to 100. The condition is that the order of the digits must not be changed.\r e.g.: 1 + 2 + 3 \u2013 4 + 5 + 6 + 78 + 9 = 100\r I have below C solution - Can you please help me to convert to Java. I need this solution in Java.\r  #include<stdio.h>\r#include<conio.h>\rint findnumber(int i,int j)\r{\r\tint k;\r\tint n;\r\tfor(k = 0; k < j; k++)\r\t{\r\t\tn = i % 3;\r\t\ti = i / 3;\r\t}\r\treturn n;\r}\rvoid main()\r{\r\tint i, j, k, current, result, operation;\r\tclrscr();\r\tfor(i = 0; i < 19683; i++)\r\t{\r\t\tif(i%3 == 0)\r\t\t\tcontinue;\r\t\tcurrent = 0;\r\t\tresult = 0;\r\t\tfor(j = 1; j < 10; j++)\r\t\t{\r\t\t\tk = findnumber(i,j);\r\t\t\tif(k==0)\r\t\t\t{\r\t\t\t\tcurrent = current * 10 + j;\r\t\t\t}\r\t\t\telse\r\t\t\t{\r\t\t\t\tresult = result + (operation == 1 ? current : -current);\r\t\t\t\tcurrent = j;\r\t\t\t\toperation = k;\r\t\t\t}\r\t\t}\r\t\tresult = result + (operation == 1 ? current : -current);\r\t\tif(result == 100)\r\t\t{\r\t\t\tfor(j = 1; j < 10; j++)\r\t\t\t{\r\t\t\t\tk = findnumber(i,j);\r\t\t\t\tif(k==0)\r\t\t\t\t\tprintf(\"%d\",j);\r\t\t\t\telse\r\t\t\t\t\tprintf(\"%c%d\",k==1?'+':'-',j);\r\t\t\t}\r\t\t\tprintf(\"\\n\");\r\t\t}\r\t}\r\tgetch();\r}", "k": ["current", "result", "expression evaluates", "insert", "operation"]}
{"i": "5713153869479936", "t": "Imagine a horizontal corridor bounded by y = y1 and y = y2 lines on a 2D-plane. There are N sensors with centers (x, y) each of which operates in a range (r) on the plane . So, they cover some circular areas on the plane. See the figure below.o            |\r\n_____o___o__|____________ y = y1\r\n\t\to\t|OOO\r\n__________oo|_____O______ y = y2\r\n\tO\t\t|  O\r\n_ _ _ _ _ _ | _ _ _ _ _ _\r\n\t\t\t|\r\n\to O\t\t|\t\to O\r\n\t\tO\t|\r\n\t\t\t|\r\nO\t\t\t|\r\n\t\t\t|The question is whether a path exist from x=-inf to x=+inf via corridor without being detected any radar.\r Constraints:\r1. You are free to move any direction only if you stay in the corridor.\r2. You are free to go through corridor borders.\r3. N sensors are given as list of (x, y, r) like [(1, 3, 2), (-1, -3, 4)]. x and y are signed integers. r is a unsigned integer.\r4. y1 and y2 are integers.\r My solution:\r1. Create an intersection graph of N sensors by comparing them each other via Euclidean distance(x1 - x2)^2 + (y1 - y2)^2 <= (r1 + r2)^22. If there is a path between y=y1 and y=y2 through intersected sensors, there do not exist any path from x=-inf to x=+inf. Otherwise, there do exist a path. So, I used BFS to search such a path.\r Worst Case Complexity:\r1. O(n^2)\r2. O(V + E) = O(n + intersection_count)Total: O(n^2)My Best Case Optimization for Intersection Graph:\r1. For each sensor, create two events for start and end of circles vertically. y = (y1 - r) and y = (y1 + r)\r2. For each sensor, register those two events into an array.\r3. Use a line sweep algorithm over 2, which is O(nlogn + intersection_count) and intersection_count may be n^2 at worst case.\r I wonder if I should have had a better solution with the worst case < O(n^2).", "k": ["horizontal corridor bounded", "imagine a horizontal", "intersection", "path", "case"]}
{"i": "5703492743200768", "t": "Numbers with 4 are considered to be unlucky, floor numbers are skipped with numbers with 4; for a top level n, ask how many layers there are actually; for example n=20, that is 18 levels [Remove 4, 14]", "k": ["floor numbers", "top level", "remove", "numbers", "numbers are skipped"]}
