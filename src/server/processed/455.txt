{"i": "8663773", "t": "implementation of the sizeof operator, i told him its an operator, he said no. he wanted me to write the code how it works.", "k": ["sizeof operator", "write the code", "operator", "implementation", "works"]}
{"i": "8657760", "t": "angle between hands of the clock.. the interviewer was expecting me to have a formula memorized. i told him i dont know any formula so i derived an equation which worked. he was still very skeptical abt it, until i did some testing n showed him it works.", "k": ["angle between hands", "angle", "clock.", "hands", "formula memorized"]}
{"i": "8648786", "t": "delete a particular node in a linked list given a pointer to that node, what if it was the last node", "k": ["linked list", "node", "delete", "linked", "list"]}
{"i": "8663759", "t": "Problem Statement\r  Given a list of integers, find the n-th smallest number, i.e., the number that appears at index n (0-based) when they are sorted in non-descending order. The numbers will be given in intervals. For example, the intervals (1, 3) and (5, 7) represent the list of numbers { 1, 2, 3, 5, 6, 7 }. A number may be present in more than one interval, and it appears in the list once for each interval it is in. For example, the intervals (1, 4) and (3, 5) represent the list of numbers { 1, 2, 3, 3, 4, 4, 5 }.\r The intervals will be given as two int[]s, lowerBound and upperBound. The i-th elements of these int[]s represent the smallest and largest numbers in the i-th interval, inclusive.\r Definition\r Class:\tUnionOfIntervals\rMethod:\tnthElement\rParameters:\tint[], int[], int\rReturns:\tint\rMethod signature:\tint nthElement(int[] lowerBound, int[] upperBound, int n)\r(be sure your method is public)\r  Notes\r-\tn is 0-based, meaning that the first element is indexed 0.\r-\tA sequence is sorted in non-descending order if and only if for each pair of indices i and j, where i is smaller than j, the element at position i is less than or equal to the element at position j.\r Constraints\r-\tlowerBound will contain between 1 and 50 elements, inclusive.\r-\tupperBound will contain the same number of elements as lowerBound.\r-\tEach element of lowerBound and upperBound will be between -2,000,000,000 and 2,000,000,000, inclusive.\r-\tThe i-th element of lowerBound will be less than or equal to the i-th element of upperBound.\r-\tn will be a non-negative integer less than the total number of elements in the list, but no greater than 2,000,000,000.\r Examples\r0)\t\r  { 1, 5 }\r { 3, 7 }\r 4\r Returns: 6\r The numbers are 1, 2, 3, 5, 6 and 7. The number at index 4 is 6.\r1)\t\r  { 1, 3 }\r { 4, 5 }\r 3\r Returns: 3\r 2)\t\r  { -1500000000 }\r { 1500000000 }\r 1500000091\r Returns: 91\r Watch out for overflow errors.", "k": ["problem statement", "int", "number", "element", "statement"]}
{"i": "8634774", "t": "Problem Statement for SortEstimate (Binary Search)\r     \tYou have implemented a sorting algorithm that requires exactly c*n*lg(n) nanoseconds to sort n integers. Here lg denotes the base-2 logarithm. Given time nanoseconds, return the largest double n such that c*n*lg(n) <= time.\r Definition\r Class:\tSortEstimate\rMethod:\thowMany\rParameters:\tint, int\rReturns:\tdouble\rMethod signature:\tdouble howMany(int c, int time)\r(be sure your method is public)\r  Notes\r-\tlg(n) = ln(n)/ln(2) where ln denotes the natural log.\r-\tYour return value must have a relative or absolute error less than 1e-9.\r Constraints\r-\tc will be between 1 and 100 inclusive.\r-\ttime will be between 1 and 2000000000 inclusive.\r Examples\r0)\t\r  1\r 8\r Returns: 4.0\r Given 8 nanoseconds we can sort 4 integers since\r \t1*4*lg(4) = 4*2 = 8\r 1)\t\r  2\r 16\r Returns: 4.0\r Now that c = 2 we need twice as many nanoseconds to sort 4 integers.\r2)\t\r  37\r 12392342\r Returns: 23104.999312341137\r We can almost sort 23105 integers, but not quite.\r3)\t\r  1\r 2000000000\r Returns: 7.637495090348122E7\r Largest possible return.", "k": ["binary search", "problem statement", "binary", "search", "implemented a sorting"]}
{"i": "8657748", "t": "Problem Statement for AutoLoan (Problem on Binary Search)\r   Auto dealerships frequently advertise tempting loan offers in order to make it easier for people to afford the \"car of their dreams\". A typical sales tactic is to show you various cars, and then talk in terms of what your monthly payment would be, to say nothing of how much you are actually paying for the car, how much interest you pay, or how long you have to make payments.\r A typical auto loan is calculated using a fixed interest rate, and is set up so that you make the same monthly payment for a set period of time in order to fully pay off the balance. The balance of your loan starts out as the sticker price of the car. Each month, the monthly interest is added to your balance, and the amount of your payment is subtracted from your balance. (The payment is subtracted after the interest is added.) The monthly interest rate is 1/12 of the yearly interest rate. Thus, if your annual percentage rate is 12%, then 1% of the remaining balance would be charged as interest each month.\r You have been checking out some of the cars at your local dealership, TopAuto. An excited salesman has just approached you, shouting about how you can have the car you are looking at for a payment of only monthlyPayment for only loanTerm months! You are to return a double indicating the annual percentage rate of the loan, assuming that the initial balance of the loan is price.\r Definition\r Class:\tAutoLoan\rMethod:\tinterestRate\rParameters:\tdouble, double, int\rReturns:\tdouble\rMethod signature:\tdouble interestRate(double price, double monthlyPayment, int loanTerm)\r(be sure your method is public)\r  Notes\r-\tBecause of the way interest is compounded monthly, the actual interest accrued over the course of a year is not necessarily the same as (balance * yearly interest rate). In fact, it's usually more.\r-\tIn a real situation, information like this would typically need to be disclosed, but since you aren't at a point of signing any paperwork, the salesman has no legal obligation to tell you anything.\r-\tThe return value must be within 1e-9 absolute or relative error of the actual result.\r Constraints\r-\tprice will be between 1 and 1000000, inclusive.\r-\tmonthlyPayment will be between 0 and price / 2, inclusive.\r-\tloanTerm will be between 1 and 600, inclusive.\r-\tThe resulting interest rate will be between 0 and 100, inclusive.\r Examples\r0)\t\r  6800\r 100\r 68\r Returns: 1.3322616182218813E-13\r Noting that 68 payments of 100 equals the total price of 6800, so there is no interest.\r1)\t\r  2000\r 510\r 4\r Returns: 9.56205462458368\r Here, we do pay a little interest. At 9.562% annual interest, that means each month we pay 0.7968% of the balance in interest. Our payment schedule looks like this:\r Month | + Interest | - Payment | = Balance\r------------------------------------------\r      |            |           |  2000.00\r   1  |     15.94  |   510.00  |  1505.94\r   2  |     12.00  |   510.00  |  1007.94\r   3  |      8.03  |   510.00  |   505.97\r   4  |      4.03  |   510.00  |     0.00\r 2)\t\r  15000\r 364\r 48\r Returns: 7.687856394581649\r This is similar to what purchasing a new car with no money down might look like, if you make payments for 4 years.", "k": ["binary search", "problem statement", "problem on binary", "interest", "frequently advertise tempting"]}
{"i": "8643762", "t": "find out msb, (my solution was  while (num >>= 1) { count++; } ) he then asked me to give a faster solution, which i did.", "k": ["find out msb", "give a faster", "faster solution", "num", "count"]}
{"i": "8581377", "t": "How would you implement the LRU cache mechanism", "k": ["lru cache mechanism", "implement the lru", "lru cache", "cache mechanism", "lru"]}
{"i": "8585382", "t": "Explain the lifetime of an HTTP request. What happens if caching is enabled on your browser", "k": ["http request", "explain the lifetime", "http", "explain", "request"]}
{"i": "8607002", "t": "write the insert function for the getting a balanced binary search tree given an array of integer to be inserted into it", "k": ["balanced binary search", "binary search tree", "write the insert", "insert function", "balanced binary"]}
{"i": "8591375", "t": "Provide an implementation of the following interface:\rpublic interface Powers extends Iterator<Long>\r{\r  /* Returns the next integer a in the arithmetic sequence of integers where\r  * a = m^n, m > 1 n > 1, and m and n are both integers\r  * Thus, the first few outputs will be 4, 8, 9, 16, 25, 27, 32, 36, etc.\r  */\r   public Long next();\r   /* Resets the sequence to the beginning, such that the next call to next()\r  * will return 4.\r  */\r  public void reset();\r}", "k": ["powers extends iterator", "interface powers extends", "public interface powers", "extends iterator", "interface powers"]}
{"i": "8592141", "t": "what is 2 way cache?", "k": ["cache"]}
{"i": "8587461", "t": "Given a binary tree, write a program to find the cousin nodes of the given\rnode.", "k": ["binary tree", "write a program", "program to find", "find the cousin", "cousin nodes"]}
{"i": "8593898", "t": "Write a program for a puzzle as following, there are eight pieces of puzzles contained in a panel which has nine slot,write a program to find out the quickest way to move the puzzle piece around in order to get all the puzzled ordered like the second\r  5 6\r2 7 3\r8 1 4\r   1 2\r3 4 5\r6 7 8", "k": ["write a program", "puzzled ordered", "slot,write a program", "puzzles contained", "puzzle piece"]}
{"i": "8591842", "t": "1) Explain all the fields in the IP header? \r2) Explain the OSPF neighborship process?\r3) He gave an example and he told me to explain Ip Fragmentation \r4) Explain TCP initial sequence number", "k": ["ospf neighborship process", "explain", "explain tcp initial", "explain tcp", "ospf neighborship"]}
{"i": "8590743", "t": "while downloading a file \"hh\" . how do u check that u have a duplicates of it in ur download folder ( 1 .a duplicate may present with different name 2.  same name files and sizes can have different content are not duplicate  ). strategies to find & optimize and make faster", "k": ["download folder", "folder", "duplicate", "downloading a file", "downloading"]}
{"i": "8537068", "t": "Write The hash function for String as Key in hash table suppose u wants to retrieve the all the students in class using their name as key & their interest in subject as value so challenge here to write  hash function for this class ..mind it key is String type & u can't  use library function", "k": ["hash table suppose", "write hash function", "string type", "hash function", "table suppose"]}
{"i": "8504437", "t": "Implement: read_lock()/read_unlock() and write_lock()/write_unlock()\rGiven: Mutex.lock & Mutex.unlock", "k": ["read", "lock", "unlock", "mutex.lock", "mutex.unlock"]}
{"i": "8493485", "t": "What will be the three things you will look into when your java system.application goes slow suddenly. Means one day you notice application is running very slow and till yesterday it was fine, so what three things you will see first or debug first.", "k": ["java system.application", "slow suddenly", "things", "suddenly", "system.application goes slow"]}
{"i": "8506148", "t": "Given an array of n elements, how would you compute product of all (n-1) groups of elements? Take care of any corner cases too.", "k": ["compute product", "groups of elements", "elements", "groups", "array"]}
{"i": "8489386", "t": "What different types of joins are there in SQL?", "k": ["sql", "types of joins", "types", "joins"]}
{"i": "8503250", "t": "How will you do inheritance in C without using any C++ constructs?", "k": ["constructs", "inheritance"]}
{"i": "8487965", "t": "Design a Data Structure with following operations\r1.Insert(X) -> insert X if X not present\r2.Delete(X) -> delete X if X present\r3.Get() -> return any element if it is present\r all operations in O(1).\rNo memory constraint.", "k": ["data structure", "design a data", "return any element", "present", "data"]}
{"i": "8469608", "t": "You have a set of interdependent tasks (no loops), What data structures would you use and how would you find the correct sequence of execution of the tasks. For example: Suppose we have six tasks A,B,C,D,E. A depends on B and D. C depends on D. E depends on A, then one possible sequence is: B, D, A, C, E.", "k": ["set of interdependent", "data structures", "find the correct", "interdependent tasks", "tasks"]}
{"i": "8481449", "t": "You have two lists, each containing position of a word in some document. Write a program that returns minimum distance between the words in the document.\rFor example: Suppose X occurs at places {2, 3, 5, 10, 12, 16, 19, 20} and Y occurs at {8, 14, 27, 29}, then the minimum distance between X and Y is 1 (X=12,Y=14 OR X=16,Y=14).", "k": ["minimum distance", "returns minimum distance", "document", "lists", "distance"]}
{"i": "8462657", "t": "What is the size of a class which will have only one function declaration as public. And what is the size of a class if that the same function is declared as virtual.class Myclass\r\n{\r\npublic:\r\nint fun();\r\n};\r\n\r\nSizeof(Myclass) ??\r\n\r\nAnd\r\n\r\nclass Myclass\r\n{\r\npublic:\r\nvitual int fun();\r\n};\r\n\r\nSizeof(Myclass) ??", "k": ["myclass", "sizeof", "int fun", "function declaration", "public"]}
{"i": "8461565", "t": "Find the k-th Smallest Element in the Union of Two Sorted Arrays in  (logn)..Please Write & Explain The Code Clearly", "k": ["k-th smallest element", "explain the code", "smallest element", "sorted arrays", "k-th smallest"]}
{"i": "8480470", "t": "Given a binary search tree, design an algorithm which creates a linked list of all the nodes at each depth (eg, if you have a tree with depth D, you\u2019ll have D linked lists).\r Algorithm:\r 1) Put the root node in stack.\r2) put all the node in queue(say queue1) till stack is empty\r3) Create another queue (say queue2) from values of queue1\r4) Generate the link list from the values of queue1\r5) Iterate over queue2 and put all the left and right child of queue2 in stack.\r6) loop over step 2 to 5 till stack is empty.", "k": ["binary search tree", "search tree", "binary search", "linked list", "till stack"]}
{"i": "8481289", "t": "Topological sorting in graphs", "k": ["topological sorting", "sorting in graphs", "topological", "graphs", "sorting"]}
{"i": "8453583", "t": "pre-order traversal of binary tree", "k": ["pre-order traversal", "binary tree", "traversal of binary", "pre-order", "tree"]}
