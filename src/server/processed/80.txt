{"i": "6198588123119616", "t": "Which class has only one unique value for all the objects of class\ra)\tthis\rb)\tfriend\rc)\tstatic\rd)\tnone of the above", "k": ["friend", "static", "objects of class", "class", "unique"]}
{"i": "6283395473604608", "t": "Expression x.y represents as\ra)\tmember x of object y\rb)\tmember y of object x\rc)\tmember y of object pointed by x\rd)\tall of the above", "k": ["expression x.y represents", "object pointed", "member", "object", "expression"]}
{"i": "5358686498193408", "t": "Difference between static and dynamic memory allocation is\ra)\tIn static memory allocation memory to be allocated in preknown\rb)\tIn dynamic memory allocation memory to be allocated in preknown\rc)\tThere is no difference\rd)\tNot exact difference is mentioned", "k": ["dynamic memory allocation", "memory allocation memory", "static memory allocation", "memory allocation", "allocated in preknown"]}
{"i": "5096975618801664", "t": "Which is not a correct variable type\ra)\tfloat\rb)\tint\rc)\tdouble\rd)\treal", "k": ["correct variable type", "correct variable", "variable type", "real", "float"]}
{"i": "4842588564619264", "t": "Declaring pointer more than one can cause\ra)\tTrap\rb)\tAbort a program\rc)\tError\rd)\tNone of the above", "k": ["abort a program", "declaring pointer", "trap", "abort", "error"]}
{"i": "5732149742272512", "t": "Can we overload constructors in C++\ra)\tYes\rb)\tNo", "k": ["overload constructors", "overload", "constructors"]}
{"i": "5737377355005952", "t": "Constructor is\ra)\tA class automatically called whenever a new object of this class is created\rb)\tA class automatically called whenever a new object of this class is destroyed\rc)\tA function automatically called whenever a new object of this class is created\rd)\tA function automatically called whenever a new object of this class is destroyed", "k": ["class automatically called", "function automatically called", "automatically called", "class automatically", "function automatically"]}
{"i": "6232105511026688", "t": "Which operator is used to define a member of a class from outside the class definition?\ra)\t->\rb)\t::\rc)\t.\rd)\t>>", "k": ["class definition", "define a member", "class", "definition", "operator"]}
{"i": "5072688216276992", "t": "Synonym of ACCORD\ra)\tConfer\rb)\tRefusal\rc)\tDissension\rd)\tOpposition", "k": ["synonym of accord", "opposition", "confer", "refusal", "dissension"]}
{"i": "5157495566761984", "t": "Raju age after 15 years will be 5 times his age 5 years back, what is the present age of Raju?\ra)\t14\rb)\t15\rc)\t10\rd)\t8", "k": ["years back", "raju age", "present age", "raju", "years"]}
{"i": "5921636451614720", "t": "Complete the series, 1, 4, 9, 16, 25,_______\ra)\t36\rb)\t38\rc)\t42\rd)\t52", "k": ["complete the series", "complete", "series"]}
{"i": "5659925572222976", "t": "In a certain code, MENTION is written as LNEITNO. How is PATTERN written in that code?\ra)\tATAETNR\rb)\tOTAETNR\rc)\tOTAESNR\rd)\tSTAETNR", "k": ["mention", "lneitno", "mention is written", "written as lneitno", "code"]}
{"i": "6249963448172544", "t": "Find the HCF of 22*32*72& 2*34*7\ra)\t128\rb)\t126\rc)\t146\rd)\t434", "k": ["find the hcf", "hcf", "find"]}
{"i": "5696858096664576", "t": "Simplify 586645 * 9999\ra)\t5865863355\rb)\t5665863355\rc)\t4865863355\rd)\t4665863355", "k": ["simplify"]}
{"i": "5179583946031104", "t": "Kunal walks 10 km towards North. From there he walks 6 Km towards South. Then, he walks 3 Km towards east. How far and in which direction is he with reference to his starting point?\ra)\t5 Km North\rb)\t5 Km South\rc)\t5 Km East\rd)\t5 Km North-East", "k": ["kunal walks", "walks", "north", "south", "kunal"]}
{"i": "5673703827308544", "t": "Synonym of ACCORD\ra)\tConfer\rb)\tRefusal\rc)\tDissension\rd)\tOpposition", "k": ["synonym of accord", "opposition", "confer", "refusal", "dissension"]}
{"i": "4907176182153216", "t": "Raju age after 15 years will be 5 times his age 5 years back, what is the present age of Raju?\ra)\t14\rb)\t15\rc)\t10\rd)\t8", "k": ["years back", "raju age", "present age", "raju", "years"]}
{"i": "4883731566297088", "t": "Complete the series, 1, 4, 9, 16, 25,_______\ra)\t36\rb)\t38\rc)\t42\rd)\t52", "k": ["complete the series", "complete", "series"]}
{"i": "5714042160152576", "t": "In a certain code, MENTION is written as LNEITNO. How is PATTERN written in that code?\ra)\tATAETNR\rb)\tOTAETNR\rc)\tOTAESNR\rd)\tSTAETNR", "k": ["mention", "lneitno", "mention is written", "written as lneitno", "code"]}
{"i": "5919741297295360", "t": "Choose the word which is least like the other words.\ra)\tBook\rb)\tPaper\rc)\tPencil\rd)\tPen", "k": ["choose the word", "pen", "choose", "book", "paper"]}
{"i": "5434495724421120", "t": "Pointing to a girl in photograph Amar said, \"Her mother's brother is the only son of my mothers\u2019 father.\" How the girl's mother related to Amar?\ra)\tMother\rb)\tSister\rc)\tAunt\rd)\tGrandmother", "k": ["mothers\u2019 father", "photograph amar", "amar", "mother brother", "mother"]}
{"i": "6317461979791360", "t": "Moon : Satellite :: Earth : ?\ra)\tSun\rb)\tPlanet\rc)\tSolar System\rd)\tAsteroid", "k": ["solar system", "satellite", "earth", "asteroid", "moon"]}
{"i": "6251656202158080", "t": "Simplify 586645 * 9999\ra)\t5865863355\rb)\t5665863355\rc)\t4865863355\rd)\t4665863355", "k": ["simplify"]}
{"i": "5682567566065664", "t": "/* Intersection of two sorted interval lists, A=[(1,2), (5,7)..] \rB=[(2,6)...]  return [(5,6)..] */import java.util.*;\r\nclass Interval{\r\n    int start;\r\n    int end;\r\n    public Interval(int start, int end){\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n}\r\nclass Solution {\r\n    \r\n    public List<Interval> Intersection(Interval[] i1, Interval[] i2) {}", "k": ["sorted interval lists", "interval", "sorted interval", "interval lists", "int start"]}
{"i": "5683479172874240", "t": "Find the indices of all anagrams of a given word in a another word.\r For example: Find the indices of all the anagrams of AB in ABCDBACDAB (Answer: 0, 4, 8)", "k": ["find the indices", "find", "indices", "word", "anagrams"]}
{"i": "5128573961633792", "t": "write a program that take l and r as input and display the number of prime numbers that lie between l and r(l and r inclusive) and can be represented as sum of two consecutive prime numbers +1", "k": ["consecutive prime numbers", "prime numbers", "write a program", "consecutive prime", "input and display"]}
{"i": "4797298839126016", "t": "All jumbled numbers of n digits in max (worst case) O(n) and min (avg case) O(log n) time.\r A number is a jumbled number if the _absolute_ difference between adjacent digits is <=1.\rFor an input n=3\routput should be \r100\r101\r110\r111\r121\r122\r...\rand so on. \r The problem is similar to the one listed here https://www.careercup.com/question?id=5729332770111488\r But this problem also has a O(n or log n) limitation and the solutions listed in the above mentioned problem at the time of posting this question, do not satisfy the criteria \r PS: 001 is not a 3 digit number.\r210 is absolutely fine as the absolute difference between adjacent digits is <=1.", "k": ["worst case", "avg case", "case", "adjacent digits", "jumbled numbers"]}
{"i": "5189308926394368", "t": "Design a data structure that supports 3 below operations\r 1. GetNextId() : It returns the auto incremental next id. i.e 1 then 2 then 3 then 4\r 2. Acknolwdge(int i) : receives the acknowledgement of the id that was sent by GetNextId\r 3. GetIdLevel() : It returns the minimum id that has not been acknowledged", "k": ["design a data", "structure that supports", "data structure", "design", "supports"]}
{"i": "5669823861227520", "t": "There is a primary machine and a secondary(backup machine). Write a program to sync files from primary to backup machine", "k": ["backup machine", "machine", "secondary", "backup", "primary machine"]}
{"i": "5387175821574144", "t": "Given 2 words, return true if second word has a substring that is also an anagram of word 1. \r LGE , GOOGLE- True\r GEO, GOOGLE - False", "k": ["return true", "google", "true geo", "true", "lge"]}
