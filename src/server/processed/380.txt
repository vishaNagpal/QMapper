{"i": "13266672", "t": "How do you allocate a singleton in Objective-C?", "k": ["singleton in objective-c", "allocate a singleton", "objective-c", "allocate", "singleton"]}
{"i": "13263668", "t": "//\r\n//  UIAccelerometer.h\r\n//  UIKit\r\n//\r\n//  Copyright (c) 2007-2011, Apple Inc. All rights reserved.\r\n//\r\n#import <Foundation/Foundation.h>\r\n#import <UIKit/UIKitDefines.h>\r\n/* UIAcceleration and UIAccelerometer are deprecated as of iOS 5.0. These classes have been replaced by the Core Motion framework. These classes will be marked with formal deprecation attributes in a future release of iOS.\r\n */\r\ntypedef double UIAccelerationValue;\r\n@protocol UIAccelerometerDelegate;\r\nUIKIT_CLASS_AVAILABLE(2_0)\r\n@interface UIAcceleration : NSObject {\r\n  @private\r\n    NSTimeInterval timestamp;\r\n    UIAccelerationValue x, y, z;\r\n}\r\n@property(nonatomic,readonly) NSTimeInterval timestamp;\r\n@property(nonatomic,readonly) UIAccelerationValue x;\r\n@property(nonatomic,readonly) UIAccelerationValue y;\r\n@property(nonatomic,readonly) UIAccelerationValue z;\r\n@end\r\nUIKIT_CLASS_AVAILABLE(2_0)\r\n@interface UIAccelerometer : NSObject {\r\n  @private\r\n    NSTimeInterval               _updateInterval;\r\n    id <UIAccelerometerDelegate> _delegate;\r\n    struct {\r\n        unsigned int delegateDidAccelerate:1;\r\n        unsigned int reserved:31;\r\n    } _accelerometerFlags;\r\n}\r\n+ (UIAccelerometer *)sharedAccelerometer;\r\n@property(nonatomic) NSTimeInterval updateInterval; //May be capped at a minimum interval\r\n@property(nonatomic,assign) id<UIAccelerometerDelegate> delegate;\r\n\r\n@end\r\n@protocol UIAccelerometerDelegate<NSObject>\r\n@optional\r\n- (void)accelerometer:(UIAccelerometer *)accelerometer didAccelerate:(UIAcceleration *)acceleration __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_NA,__MAC_NA,__IPHONE_2_0,__IPHONE_5_0);\r\n@endIf you were given this header file, how would you test this?", "k": ["property", "copyright", "apple", "uikit", "nonatomic,readonly"]}
{"i": "13262669", "t": "How would you test the (any generic method) [NSURL initWithNSString] method?", "k": ["nsurl initwithnsstring", "generic method", "nsurl", "method", "initwithnsstring"]}
{"i": "13262666", "t": "Where are the stack and heap located? How would you write a c program to tell if the stack frame was growing?", "k": ["heap located", "located", "stack", "stack and heap", "heap"]}
{"i": "13264663", "t": "In regular expressions, what is the mean of the  \"+\",\"*\",\"?\" operators?", "k": ["regular expressions", "operators", "expressions", "regular"]}
{"i": "13262665", "t": "Suppose you have 100,000 files spread across multiple servers and you wanted to process all of them? How would you do that in Hadoop?", "k": ["files spread", "spread across multiple", "multiple servers", "wanted to process", "suppose"]}
{"i": "13262664", "t": "In the Hadoop Hello World Word Count program what are the Map and Reduce functions?", "k": ["world word count", "word count program", "hadoop hello world", "world word", "word count"]}
{"i": "13266663", "t": "What is the SQL statement to query two tables at once?", "k": ["sql statement", "statement to query", "query two tables", "sql", "statement"]}
{"i": "13261663", "t": "How would you kill a process by name in terminal in one line? i.e. NOT kill -9 pid. Follow-up what happens when you type kill processname or kill pid(actual pid)", "k": ["kill", "pid", "line", "process", "terminal"]}
{"i": "13261662", "t": "Suppose you have a Lion class and you implemented a draw() function that draws the entire body of the lion. Now suppose you want to make a Tiger class, and the tiger is like a lion, but it doesn't have a mane and has stripes. How would you do this?", "k": ["entire body", "function that draws", "lion", "lion class", "implemented a draw"]}
{"i": "13243679", "t": "while reading a binary file with over 1 billion unsigned integers, how can you optimize the following code to make it perform better?\r int i=0;\rlong sum=0;\r ifstream file(\"binary.dat\", ios::in|ios::binary);\rif(file.is_open())\r{\r\twhile(!file.eof()) {\r   \t        file.read(reinterpret_cast<char*>(&i), sizeof(unsigned int));\r \t\tsum += i;\r\t\ti = 0;\r\t\t}\r\t}\rfile.close();", "k": ["billion unsigned integers", "code to make", "make it perform", "billion unsigned", "unsigned integers"]}
{"i": "13561673", "t": "If you want to explain a gambling event, which has winning probability less than 1/2, to a person don't know probability. How will you do?\r----(assume your answer is: do that experiment many times)-------\rHow many times would be enough?", "k": ["gambling event", "explain a gambling", "winning probability", "probability", "event"]}
{"i": "13241673", "t": "why do we need weak_ptr? give an example by code!\r I didn't answer the question well.\r I am really confused about weak_ptr. weak_ptr is an observer of shared_ptr, meaning that we always need shared_ptr in order to use weak_ptr. but in cyclic case, we don't use shared_ptr for one of the object, then in this case how can we use weak_ptr without shared_ptr to break cycle?", "k": ["ptr", "weak", "shared", "case", "give"]}
{"i": "13238675", "t": "Find two no\u2019s in a sorted array whose sum =X ?\ri gave a solution whose complexity is O(N) .. Anyone with reduced time complexity?", "k": ["array whose sum", "sorted array", "gave a solution", "find", "sum"]}
{"i": "13234674", "t": "Which one of these is  a keyword in C? (a) printf (b) #define (c) sizeof (d) ->", "k": ["printf", "define", "sizeof", "keyword"]}
{"i": "13235673", "t": "What is true about the value of \u03c0 \u2013 (22/7) where \u03c0 is the ratio of the circumference of a circle to its diameter in a Euclidean plane? (a) It is 0. (b) The value changes gradually every year as the universe expands. (c) It is close to 0.001. (d) It is close to -0.001", "k": ["euclidean plane", "euclidean", "plane", "true", "ratio"]}
{"i": "13239674", "t": "What is the declaration of a function that returns a pointer to a function which has int * argument and return type void? First show how it can be declared without typedef. Next show, how it may be written neatly using typedef.", "k": ["return type void", "type void", "return type", "argument and return", "function"]}
{"i": "13242662", "t": "Why is it important to add a salt to a user's password before storing its digest?", "k": ["storing its digest", "important to add", "add a salt", "user password", "password before storing"]}
{"i": "13240665", "t": "WAP to print  the nodes of a tree in  a each separate line.\rSuppose there is a tree     \r                                            0\r                                       /    |    \\\r                                   1      2      3\r                                  / \\      / \\      / \\\r                                 4  6   7 8   9 10\r So it should print\r1\r1 2 3\r4 6 7 8 9 10", "k": ["separate line", "wap to print", "wap", "line", "tree"]}
{"i": "13232665", "t": "Give an efficient algorithm to check whether 9*9 matrix is valid sudoku solution or not ?", "k": ["valid sudoku solution", "give an efficient", "matrix is valid", "efficient algorithm", "algorithm to check"]}
{"i": "13225741", "t": "Given a function, take a number and the bit position and return true if that bit is set to 1 and false otherwise.\r It took me a few minutes to think something like this, pasted code is after he corrected me on 2 silly mistakes.\r  bool ret_result(int number, int pos) {\r         int k=1;\r         for(int i=0;i<pos;i++) {\r         k=k<<1;\r         }\r       if(number&k==1) {\r                return true;\r        }\r       else {\r                return false;\r        }\r}", "k": ["bit position", "return true", "int", "bit", "bit is set"]}
{"i": "13223739", "t": "All the Insert,delete and search complexities for Arrays,HashMaps,Binary trees.", "k": ["trees", "insert,delete and search", "search complexities", "insert,delete", "search"]}
{"i": "13223738", "t": "The normal shell script question, give a unix command that takes an input as a pattern and searches all unique numbers in the file\r  I came up with egrep [ pattern ] im not sure if it was correct syntactically but i explained the logic to him and he said ok, lets move on to the next question -.-", "k": ["shell script question", "normal shell script", "give a unix", "script question", "normal shell"]}
{"i": "13223730", "t": "Given an file which consists thousands of lines. each line consists of a string and several integers.\rdesign an algorithm which take input of several integers and print out the string of the line that have most matches.\r input file\r----------\raa 3 4 10 2\rbb 9 14 15 21 3\rcc 12 1024 200 3 9 4\r----------\r examples:\rinput: 3 4 10\routput: aa\rinput: 12 3 4\routput: cc\rinput: 3 9\routput: bb\rinput: 3 9\routput: cc\rinput: 3 4 12\routput: cc\r Thanks!", "k": ["output", "consists thousands", "input", "line consists", "consists"]}
{"i": "13223717", "t": "Hashmap vs Arrays ? \rWhich is better ?\rHashmap worst case search is O(n) same as of arrays which is also O(n) then what is the advantages of hashmap", "k": ["worst case search", "hashmap worst case", "worst case", "case search", "hashmap worst"]}
{"i": "13223716", "t": "Given an array find 3 elements such that a[i] < a[j] < a[k] and i < j < k in 0(n) time.", "k": ["array find", "time", "find", "elements", "array"]}
{"i": "13227723", "t": "Implement a Queue data structure and provide enQ and deQ functionality where the only data structure you have to use is stack.", "k": ["queue data structure", "implement a queue", "queue data", "data structure", "provide enq"]}
{"i": "13227722", "t": "WAP to find nth Fibonacci number. After I wrote the code, had to read it out line by line. then she asked follow up questions like why this method, what other ways you can write the algorithm, etc.,", "k": ["nth fibonacci number", "find nth fibonacci", "fibonacci number", "wap to find", "nth fibonacci"]}
{"i": "13217717", "t": "What is a hashMap/ hashTable?\rWhat happens if we have a bad hashing function?\rHow does java store the hashtable/hashmap?", "k": ["hashmap", "hashtable", "bad hashing function", "hashing function", "function"]}
{"i": "13225717", "t": "WAP to count the num of possible hops the bunny can make. conditions are - \r- bunnies are positions of bunnies on a number line\r- count the number of valid hops\r- A bunny at the position 'a' jumps over bunny at position 'b' and lands at the position c, c = 2b-a\r- A bunny can only hop over one other bunny, and cannot land on another bunny.\r- There are at least two bunnies.\r- The bunnies are in sorted array.\r- The bunny can hop in both directions.", "k": ["wap to count", "bunny", "wap", "count the num", "bunnies"]}
