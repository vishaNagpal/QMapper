{"i": "5729439224692736", "t": "Write a program to split a string without using split()method", "k": ["write a program", "method", "write", "split a string", "program to split"]}
{"i": "5656524638650368", "t": "Replace %20 with ' '.\rE.g. input: www.space%20.com\r\toutput: www.space .com", "k": ["replace", "www.space", "input", "output"]}
{"i": "5748402579046400", "t": "Suppose I am given a set of input strings input[5](five of them) and their corresponding replacement strings replace[5]. Then I am given an input text, how can I replace the strings in the text matching any of the inputs with their corresponding replacements.\r Also I have to make sure that if suppose, I find a match input[0] and I replace it by replace[0], then because of that it could be possible that I have a new match for input[2] lets say because of the new characters added by replace[0]. I don't want to make replacements with replace[2].\r Also I cannot use regex of java.", "k": ["replace", "replacement strings replace", "input", "input strings input", "strings"]}
{"i": "5108497347772416", "t": "Suppose I am given a set of input strings input[5](five of them) and their corresponding replacement strings replace[5]. Then I am given an input text, how can I replace the strings in the text matching any of the inputs with their corresponding replacements.\r Also I have to make sure that if suppose, I find a match input[0] and I replace it by replace[0], then because of that it could be possible that I have a new match for input[2] lets say because of the new characters added by replace[0]. I don't want to make replacements with replace[2].", "k": ["replace", "replacement strings replace", "input", "strings", "input strings input"]}
{"i": "5160951984685056", "t": "Suppose I have five strings input[5] and their corresponding replacements replace[5]. I am given an input text and I want to find the occurence of any of the input strings and replace them with the corresponding replace strings. I cannot use regex. How can I do it. Also I have to make sure that lets say after replace input[0] with replace[0], if a new string arises due to replace[0] that matches with lest say input[2], then I cannot replace it with replace[2].", "k": ["replace", "input", "replacements replace", "strings", "suppose"]}
{"i": "5635386755776512", "t": "Find the 90th percentile of a stream of numbers between 1 and 10^6. \r Followup: What if there is not enough memory to store all numbers and no upper bound.", "k": ["find", "percentile", "followup", "numbers", "stream of numbers"]}
{"i": "5644293175771136", "t": "Given an array of n positive numbers.\rYou need to find the maximum sum of contiguous sub array with special case. If in sub array 2 or more numbers are same except them from sum.\rFor example:\rIn:1 2 3 1 4 3 4 1 2 \rOut:10 (2,3,1,4)\rIn:11 5 7 4 11 7 4 2 2 5 9 4 5 11 5 1\rOut:36 (11,7,4,2,2,5,9)", "k": ["positive numbers", "array", "positive", "numbers", "special case"]}
{"i": "5725570532900864", "t": "Goldbach's conjecture : Every even integer greater than 2 can be expressed as the sum of two primes.\rWrite a function which takes a number as input, verify if is an even number greater than 2 and also print atleast one pair of prime numbers.", "k": ["goldbach conjecture", "integer greater", "goldbach", "conjecture", "greater"]}
{"i": "5160159630327808", "t": "Design & Implement your own Json parser. It should handle all cases. And it should also JUnit testable.", "k": ["json parser", "design", "implement", "json", "parser"]}
{"i": "5653460783464448", "t": "There is a particular sequence that only uses numbers 1, 2, 3, 4 and no two adjacent numbers are the same.\rWrite a program that given n1 1s, n2 2s, n3 3s, n4 4s will output the number of such sequences using all these numbers.\rOutput your answer modulo 1000000007 (10^9 + 7).", "k": ["adjacent numbers", "numbers", "adjacent", "write a program", "output"]}
{"i": "5673369567494144", "t": "How do we represent any shape? And how do we say that two shapes are the same?", "k": ["represent", "represent any shape", "shape", "shapes"]}
{"i": "5086531140190208", "t": "Input : {7,4,2,5,1,9,6}\rOutput :{1,4,6 ,9,7, 5, 2}", "k": ["output", "input"]}
{"i": "5639310476836864", "t": "design a algo so that it receive an input787668\r\n787787\r\n787948\r\n787980\r\n788094\r\n788124and produce the output the difference of two consecutive numbers119,161,32,114,30the input can varry to any length", "k": ["design a algo", "produce the output", "input can varry", "output the difference", "design"]}
{"i": "5887896875696128", "t": "desing a algo so that it receive an input787668\r\n787787\r\n787948\r\n787980\r\n788094\r\n788124and produce the output the difference of two consecutive numbers119,161,32,114,30the input can varry to any length", "k": ["desing a algo", "produce the output", "input can varry", "output the difference", "desing"]}
{"i": "5631532559499264", "t": "Solve T(n) = 2T(n-2) + 1.", "k": ["solve"]}
{"i": "5146367416598528", "t": "Solve T(n) = 2T(n/2) + 2n log n.", "k": ["solve", "log"]}
{"i": "5722936979750912", "t": "Solve T(n) = 2T(n/2) + n.", "k": ["solve"]}
{"i": "5136081238360064", "t": "Given an input string, write a function that returns the Run Length Encoded string for the input string.\r For example, if the input string is \u201cwwwwaaadexxxxxx\u201d, then the function should return \u201cw4a3dex6\u2033.", "k": ["run length encoded", "length encoded string", "run length", "length encoded", "encoded string"]}
{"i": "5711543505256448", "t": "Given a string .Check if the string is palindrome or not", "k": ["check", "string is palindrome", "string", "palindrome"]}
{"i": "5735303264337920", "t": "Lets assume I have a paper in the size of 8\" by 11\". How would I go about designing an algorithm that optimally fit smaller cards onto the paper.\r Now I don't have the actual card dimensions but for this example lets assume the smaller cards are 3\" by 4\", 7\" by 2\" and 5\" by 3\".", "k": ["smaller cards", "optimally fit smaller", "paper", "fit smaller cards", "assume"]}
{"i": "5724793345146880", "t": "Suppose S and T are two ordered dictionaries each containing n items. Both are implemented via sorted arrays and do not have any keys in common. Describe\ran O(log n)-time algorithm that outputs the item whose key is the lower median in the union of S and T. For example, when the keys stored in S and T are\rS = [3, 6, 7, 9] and T = [\u22121, 1, 2, 8], the lower median key is 3.", "k": ["ordered dictionaries", "lower median", "suppose", "lower median key", "ordered"]}
{"i": "5693006426406912", "t": "The stepping number:\r A number is called as a stepping number if the adjacent digits are having a difference of 1. For eg. 8,343,545 are stepping numbers. While 890, 098 are not. The difference between a \u20189\u2019 and \u20180\u2019 should not be considered as 1.\r Given start number(s) and an end number(e) your function should list out all the stepping numbers in the range including both the numbers s & e.", "k": ["adjacent digits", "stepping", "stepping number", "number", "numbers"]}
{"i": "5739588970610688", "t": "I was having an interview and here is the question: \r If there are different pairs of characters, each pair of the characters means the two matching characters are the same. Print out all the identical characters.\r For example:  \r if you have pairs:\r A-B\rC-D\rE-F\rG-H\rA-D\rF-G\r you should print out:\r{A, B, C, D} are the same characters.\r{E, F, G, H} are the same characters.\r Does anyone know how to solve this problem by not using brutal force?", "k": ["characters", "matching characters", "question", "pairs", "print"]}
{"i": "5679535664136192", "t": "Given a NXN matrix, starting from the upper left corner of the matrix start printing values in a counter-clockwise fashion.\r Eg: Consider N = 4\r Matrix=  {a, b, c, d,\r\t       e, f, g, h,\r                i, j, k, l,\r\t\tm, n, o, p}\r Your function should output: dcbaeimnoplhgfjk\r Another example would be\r \t  C  I   P     E\r          R  N  K    U\r\t  U  O W    O\r\t  L   E   S   Y\r The function should print: EPICRULESYOUKNOW", "k": ["upper left corner", "matrix start printing", "counter-clockwise fashion", "nxn matrix", "upper left"]}
{"i": "5744655421407232", "t": "Problem statement:\rwe have a string of length N. can you figure out the number of occurrence of the most  frequent substring in this string? we are only interested in substring of length from K to L and in each substring the number of distinct characters must not exceed M. the string contain only lower-case letters(a-z).\r constraints:\r2<=N<=100000\r2<=k<=L<=26,L<N\r2<=M<=26\r sample input\r5\r2 4 26 // value of K L M\rabcde\rsample o/p \r1", "k": ["problem statement", "number of occurrence", "frequent substring", "number of distinct", "number"]}
{"i": "5181985580384256", "t": "Given a String s and a hashmap containing certain decodings for all the characters of alphabet. Find all possible passwords that can be generated by replacing decodings in the string s. \r\nNote that decodings of a charachter can only be single charachters\r\nEg: String s=\"abcde\"\r\ndecodings given\r\na-{1,2,p,o,q}\r\nb-{2,y}\r\nc-{p}\r\nd-{4,a,m,n}\r\ne-{9,z,x}\r\nh-{1}\r\n'\r\n'\r\n'\r\nx-{0}\r\ny-{4,k,l}\r\nz-{r,5}\r\nSo possible set passwords will be \r\nabcde,1bcde,2bcde,pbcde,obcde,qbcde,     //replace a with all possible decodings\r\na2cde,12cde,22cde,p2cde,o2cde,q2cde,aycde,1ycde,2ycde,pycde,oycde,qycde      //replace b will all possible decodings\r\na2pde,12pde,22pde,p2pde,o2pde,q2pde,aypde,1ypde,2ypde,pypde,oypde,qypde.....//replace c will all possible decodings", "k": ["characters of alphabet", "decodings", "string", "replace", "alphabet"]}
{"i": "5138770022105088", "t": "Implement bool isPalindrome(SingleLinkList  *node) in constant Space.\r Sorry for incomplete post earlier..", "k": ["implement bool ispalindrome", "constant space", "singlelinklist", "node", "implement bool"]}
{"i": "5146446202404864", "t": "Implement bool regex() Function.", "k": ["implement bool regex", "function", "implement bool", "bool regex", "implement"]}
{"i": "6314984128643072", "t": "Implement  bool isBST(Tree * root)", "k": ["implement bool isbst", "tree", "root", "implement bool", "bool isbst"]}
{"i": "5757088814858240", "t": "Given a file which contains large number of strings.\re.g.:my name is XYZ. My emansi XYZ i.e. it has words and reverse of words. There can be the case where no reverse word is present.He told me to print all those pair whose reverse is also present in the file.\r For above example output will be:\r       {name,eman}, {is, si}\rConstraints were Minimum space should be used and time complexity should be minimum, further he added don\u2019t compute reverse of string at all.", "k": ["large number", "xyz", "number of strings", "reverse", "emansi xyz"]}
