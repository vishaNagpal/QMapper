{"i": "8879649", "t": "Given an array of ints, is it possible to divide the ints into two groups, so that the sums of the two groups are the same. Every int must be in one group or the other. Write a recursive helper method that takes whatever arguments you like, and make the initial call to your recursive helper from splitArray(). (No loops needed.) \r splitArray({2, 2}) \u2192 true\rsplitArray({2, 3}) \u2192 false\rsplitArray({5, 2, 3}) \u2192 true", "k": ["splitarray", "groups", "ints", "recursive helper", "array"]}
{"i": "8881873", "t": "Design parking lot management system.", "k": ["design parking lot", "lot management system", "parking lot management", "design parking", "management system"]}
{"i": "8877058", "t": "Given a sorted array and a number n.How can u find the number of occurance of n in the array . should be o(logn)", "k": ["logn", "sorted array", "number n.how", "find the number", "number of occurance"]}
{"i": "8875952", "t": "Give a non recursive algorithm that performs an inorder traversal without using a stack or any extra space.", "k": ["extra space", "recursive algorithm", "algorithm that performs", "performs an inorder", "inorder traversal"]}
{"i": "8872057", "t": "How do you partition an array into 2 parts such that the two parts have equal average?...each partition may contain elements that are non-contiguous in the array....", "k": ["equal average", "average", "parts have equal", "partition", "array"]}
{"i": "8870188", "t": "(3rd phone interview)Design Clothing store using OOP concepts. based on your design tell how you'll find if the store has XXL size of a particular shirt.", "k": ["oop concepts", "design clothing store", "phone interview", "design clothing", "clothing store"]}
{"i": "8870187", "t": "(3rd phone interview)functions to print first n odd powers of 3, where n is given to the function:void power(int n)\r\n{\r\n  if(n<=0)\r\n    throw IllegalArgumentexception\r\n  else\r\n   {\r\n     for(i=1;i<n;i++)\r\n     int result = Math.pow(3, 2i-1);\r\n     System.out.println(result);\r\n   }\r\n}", "k": ["int result", "phone interview", "throw illegalargumentexception", "void power", "odd powers"]}
{"i": "8868913", "t": "Plumber\rContractor\rSubContractor\rHouse Owner\rWho's the customer here?", "k": ["contractor subcontractor house", "subcontractor house owner", "plumber contractor subcontractor", "house owner", "plumber contractor"]}
{"i": "8868912", "t": "Game Developer\rDev manager\rParent \rChild\rWho's the customer here?", "k": ["game developer dev", "dev manager parent", "manager parent child", "developer dev manager", "developer dev"]}
{"i": "8865082", "t": "List all sort algorithms you know. Their best, worst, average case complexities.", "k": ["list all sort", "sort algorithms", "worst", "list", "average case complexities"]}
{"i": "8870823", "t": "Design distributed Cache", "k": ["design distributed cache", "distributed cache", "design distributed", "cache", "design"]}
{"i": "8870822", "t": "Design Restaurant Reservation System", "k": ["restaurant reservation system", "design restaurant reservation", "reservation system", "restaurant reservation", "design restaurant"]}
{"i": "8863403", "t": "Implement function to return minValue from binary tree", "k": ["implement function", "binary tree", "function to return", "return minvalue", "minvalue from binary"]}
{"i": "8869837", "t": "Implement Iterator on Binary Tree that iterates through leaf nodes left to right", "k": ["iterator on binary", "binary tree", "implement iterator", "leaf nodes left", "tree that iterates"]}
{"i": "8863294", "t": "You are given two 32-bit numbers, N and M, and two bit positions, i and j. Write a method to set all bits between i and j in N equal to M (e.g., M becomes a substring of N located at i and starting at j).\rEXAMPLE:\rInput: N = 10000000000, M = 10101, i = 2, j = 6\rOutput: N = 10001010100\r_\r________________________________________________________________", "k": ["bit positions", "numbers", "positions", "write a method", "method to set"]}
{"i": "8861624", "t": "WRite a function to find log() using sqrt() function", "k": ["find log", "write a function", "write", "log", "sqrt"]}
{"i": "8867724", "t": "Given a set of words, group all the anagrams groupwise.", "k": ["set of words", "anagrams groupwise", "words", "group", "groupwise"]}
{"i": "8864783", "t": "Implement a recursive java method for listing all the files and directory from an input file.", "k": ["recursive java method", "implement a recursive", "recursive java", "java method", "method for listing"]}
{"i": "8860537", "t": "Implement Cache management in Java.", "k": ["implement cache management", "implement cache", "management in java", "cache management", "java"]}
{"i": "8859198", "t": "question on analyzing a piece of code and then asked about what can go wrong in this code like what exceptions can occur/what the code is doing.The question was extended to involve issues related to threads.", "k": ["involve issues related", "exceptions can occur", "related to threads", "analyzing a piece", "extended to involve"]}
{"i": "8706686", "t": "Create a arraylist and retrieve specific element from an arraylist. (You can create arraylist only by using stacks)", "k": ["retrieve specific element", "retrieve specific", "specific element", "arraylist", "create"]}
{"i": "8719059", "t": "OS questions like file system with some specifics into Unix FS, memory management.\rgeneric questions about implementation of malloc()", "k": ["memory management", "specifics into unix", "file system", "unix", "memory"]}
{"i": "8706680", "t": "Design a distributed system for storing a static set of (key,value) pairs and should serve user-queries(users provide a key, and system should return a the value). \rThis was a system design question where I was supposed to find the number of m/cs required, networking between them, hard disks, distributing the values across them, identify bottlenecks, replication, reliability, estimation of response time, throughput etc.\r For designing the system, he gave me set of resources,  like configuration of the machines available, Ethernet cable B/w, etc", "k": ["serve user-queries", "users provide", "provide a key", "storing a static", "static set"]}
{"i": "8863661", "t": "Write a program to print a 2-D array spirally- i.e, starting at a corner and spiraling inwards.\r Reverse the bits of an integer", "k": ["array spirally", "write a program", "program to print", "corner and spiraling", "write"]}
{"i": "8861011", "t": "You are getting a number of two-tuple values <time, val>, where time is non-decreasing. Then a query asks for the value at a particular time. If a tuple exists for that time, it returns the val. Otherwise it returns val from the tuple that is the closest successor to the query time.e.g.\r<1,3>, <8,6>, <10, 11>, <19, 4>, <23, 9>,...\rQ = 6? Val = 6.\rQ = 10? Val = 11.", "k": ["number of two-tuple", "val", "time", "non-decreasing", "number"]}
{"i": "8859922", "t": "OOD , you are designing Stress class that test fire and weight on furniture , you have Furniture base class , and wood_chair ,steel_chair , wood_table , steel_table , sub classes , redesign this to be more flexible? what I did I just make another base class Material that had getMaterial() and the Furniture class had attribute material (composition) , so you can add Materials ass you want(plastic, steel ,wood) and ovveride get material to return the correct type , and from Furniture you can drive whatever furniture you want and then set matrial , so you can Iterate through them with common interface , I also designed a strategy pattern to return the correct algorithm for the furniture and material you can add a Factory pattern also but he was very satisfied  .", "k": ["designing stress class", "furniture base class", "designing stress", "stress class", "base class material"]}
{"i": "8860888", "t": "classical anagram question , list of static words given a word check if it anagram or not ? this is repeated and simple. *also Asked given a BST find the second largest element , be careful with special cases like the tree is not balanced , the tree all node in the left and you will be able to get it easy.", "k": ["classical anagram question", "list of static", "repeated and simple", "classical anagram", "anagram question"]}
{"i": "8858036", "t": "Design your hash_map that allow the following Add in O(1) , delete in O(1) , iterate in O(n)? what you need to iterate in O(n) where n is the number of existing element , empty slot in hash_map don't count , simple example is yu have 10 element in 10,000 slot hash_map you need to itrate in O(10) ,? so what I did , is link the value as linked list beside the normal hash functions , so you have class Node{public:int value;int key; Node* up; Node* down;} , and when you insert normally myvector[hash(node.value)]=node; after that link the node and have tail and head , and ake care of cases when you inserting between nodes and deleting the tail , and so on", "k": ["node", "map", "add", "hash", "iterate"]}
{"i": "8855158", "t": "Write an algorithm to check if an array holds a string value that you are passing in", "k": ["write an algorithm", "algorithm to check", "array holds", "holds a string", "write"]}
{"i": "8858669", "t": "There is a class A which contains just one parameterized constructor A(int a).\rHow would you initialize an array of objects of this class.", "k": ["parameterized constructor", "int", "class", "parameterized", "constructor"]}
