{"i": "12357807", "t": "Write HTML/CSS code to put odd images on left and even number images on right with some text content (basically float images).", "k": ["basically float images", "put odd images", "write html", "css code", "text content"]}
{"i": "12361806", "t": "(Don't remember the  exact wordings) You have 25 red balls, 47 green balls and 3 blue balls in a basket. What is the minimum number of balls you have to pick to make sure you have at least 2 balls of different colors?", "k": ["exact wordings", "remember the exact", "red balls", "green balls", "blue balls"]}
{"i": "12364830", "t": "Do you know about design patters? What is Singleton?", "k": ["design patters", "patters", "singleton", "design"]}
{"i": "12362775", "t": "Operating Systems (in windows): \r* Difference between Process and Thread\r* Deadlock\r* Race condition", "k": ["difference between process", "process and thread", "operating systems", "race condition", "deadlock"]}
{"i": "12329255", "t": "Given the following code snippet:void InsertNode(tNode** node, int i){\r\n    if(*node == NULL){\r\n        *node = new tNode;\r\n        (*node)->pLeft = NULL;\r\n        (*node)->data = i;\r\n        (*node)->pRight = NULL;\r\n        SetRootNode(node);\r\n        return;\r\n    }\r\n    else{\r\n        if(i < (*node)->data)\r\n            InsertNode(&((*node)->pLeft), i);\r\n        if(i > (*node)->data)\r\n            InsertNode(&((*node)->pRight), i);\r\n        return;\r\n\r\n    }\r\n}\r\nvoid Func(tNode **node){\r\n    if(*node!=NULL){\r\n        Func(&(*node)->pLeft);\r\n        tNode *temp;\r\n        temp = (*node)->pLeft;\r\n        (*node)->pLeft= (*node)->pRight;\r\n        (*node)->pRight = temp;\r\n        Func(&(*node)->pRight);\r\n    }\r\n}\r\nvoid traverse(tNode** nd){\r\n    if(*nd!=NULL){\r\n        traverse(&((*nd)->pLeft));\r\n        traverse(&((*nd)->pRight));\r\n        std::cout<<(*nd)->data<<std::endl;\r\n    }\r\n}Let the input given be\r98,15,100,10,78,120,5,12,96,110\r What would be the output of the following code snippet?int main(void)\r\n{\r\n    tree *bT = new tree;\r\n    int i = 10;\r\n    int data;\r\n    while(i--){\r\n        std::cout<<\"Enter the node\"<<std::endl;\r\n        std::cin>>data;\r\n        bT->InsertNode(bT->GetRootNode(), data);\r\n    }\r\nbT->InsertNode(bT->GetRootNode(), 97);\r\n    bT->Func(bT->GetRootNode());\r\n    bT->InsertNode(bT->GetRootNode(), 99);\r\n    bT->traverse(bT->GetRootNode());\r\n}Options\r -98,15,78,96,97,99,10,12,5,100,120,110\r -110,120,100,5,12,10,99,97,96,78,15,98\r -100,110,120,98,5,10,12,15,78,96,97,99\r -None of these", "k": ["void func", "code snippet", "node", "null", "int data"]}
{"i": "12334181", "t": "Given the following code snippet:void InsertNode(tNode** \r\nnode, int i){\r\n\r\n    if(*node == NULL){\r\n        *node = new tNode;\r\n        (*node)->pLeft = \r\nNULL;\r\n        (*node)->data = i;\r\n        (*node)->pRight = \r\nNULL;\r\n        SetRootNode(node);\r\n        return;\r\n    }\r\n    else{\r\n        if(i < (*node)-\r\n>data)\r\n            InsertNode(&((*n\r\node)->pLeft), i);\r\n        if(i > (*node)-\r\n>data)\r\n            InsertNode(&((*n\r\node)->pRight), i);\r\n        return;\r\n    }\r\n}\r\nvoid Func(tNode **node){\r\n    if(*node!=NULL){\r\n        Func(&(*node)-\r\n>pLeft);\r\n        tNode *temp;\r\n        temp = (*node)-\r\n>pLeft;\r\n        (*node)->pLeft= \r\n(*node)->pRight;\r\n        (*node)->pRight = \r\ntemp;\r\n        Func(&(*node)-\r\n>pRight);\r\n    }\r\n}\r\nvoid traverse(tNode** nd){\r\n    if(*nd!=NULL){\r\n        traverse(&((*nd)-\r\n>pLeft));\r\n        traverse(&((*nd)-\r\n>pRight));\r\n        std::cout<<(*nd)-\r\n>data<<std::endl;\r\n    }\r\n}Let the input given be\r98,15,100,10,78,120,5,12,96,110\r What would be the output of the \rfollowing code snippet?int main(void)\r\n{\r\n    tree *bT = new tree;\r\n    int i = 10;\r\n    int data;\r\n    while(i--){\r\n        std::cout<<\"Enter \r\nthe node\"<<std::endl;\r\n        std::cin>>data;\r\n        bT->InsertNode(bT-\r\n>GetRootNode(), data);\r\n    }\r\n    bT->Func(bT-\r\n>GetRootNode());\r\n    bT->InsertNode(bT-\r\n>GetRootNode(), 99);\r\n    bT->traverse(bT-\r\n>GetRootNode());\r\n}Options\r -100,110,120,98,5,10,12,15,78\r,96,99\r -99,96,78,15,12,10,5,98,120,1\r10,100\r -110,120,100,5,12,10,99,96,78\r,15,98\r -98,15,78,96,99,10,12,5,100,1\r20,110", "k": ["void func", "code snippet", "node", "null", "int data"]}
{"i": "12337220", "t": "Given the following code snippet:void InsertNode(tNode** node, int i){\r\n    if(*node == NULL){\r\n        *node = new tNode;\r\n        (*node)->pLeft = NULL;\r\n        (*node)->data = i;\r\n        (*node)->pRight = NULL;\r\n        SetRootNode(node);\r\n        return;\r\n    }\r\n    else{\r\n        if(i < (*node)->data)\r\n            InsertNode(&((*node)->pLeft), i);\r\n        if(i > (*node)->data)\r\n            InsertNode(&((*node)->pRight), i);\r\n        return;\r\n    }\r\n}\r\nvoid Func(tNode **node){\r\n    if(*node!=NULL){\r\n        Func(&(*node)->pLeft);\r\n        tNode *temp;\r\n        temp = (*node)->pLeft;\r\n        (*node)->pLeft= (*node)->pRight;\r\n        (*node)->pRight = temp;\r\n        Func(&(*node)->pRight);\r\n    }\r\n}\r\nvoid traverse(tNode** nd){\r\n    if(*nd!=NULL){\r\n        traverse(&((*nd)->pLeft));\r\n        traverse(&((*nd)->pRight));\r\n        std::cout<<(*nd)->data<<std::endl;\r\n    }\r\n}Let the input given be\r98,15,100,10,78,120,5,12,96,110\r What would be the output of the following code snippet?int main(void)\r\n{\r\n    tree *bT = new tree;\r\n    int i = 10;\r\n    int data;\r\n    while(i--){\r\n        std::cout<<\"Enter the node\"<<std::endl;\r\n        std::cin>>data;\r\n        bT->InsertNode(bT->GetRootNode(), data);\r\n    }\r\n    bT->InsertNode(bT->GetRootNode(), 99);\r\n    bT->traverse(bT->GetRootNode());\r\n}options \r -110,5,12,96,78,15,99,110,120,\r100,98\r -5,10,12,15,78,96,98,99,100,11\r0,120\r -120,110,100,99,98,96,78,15,1\r2,10,5\r -98,100,120,110,99,15,78,96,1\r2,5,110", "k": ["code snippet", "void func", "node", "null", "int data"]}
{"i": "12335123", "t": "From the following options, select a statement that is NOT true about immutable objects.\r You can use immutable objects in multi-threaded programs\r You can use a pointer to create a reference copy of an immutable object, instead of creating a copy of the object\r Immutable objects cannot be modified after they are created\r An object has to be completely mutable or immutable but partial immutability is not very useful in programs", "k": ["select a statement", "immutable objects", "object immutable objects", "immutable", "object immutable"]}
{"i": "12335021", "t": "From the following options, select the correct function that is referentially transparent.\r \t- log(x) \t   \r\t- now() \t   \r\t- strcat(str1,gets()) \t   \r\t- rand(0,1)", "k": ["select the correct", "referentially transparent", "correct function", "options", "select"]}
{"i": "12334004", "t": "What features must a programming language and its runtime environment provide in order to support automatic memory management?\r1. Dynamic memory allocation\r2. Explicit deallocation of data\r3. Garbage collection\r \t- 1 and 3, but not 2\t   \r\t- 1\t   \r\t- 3\t   \r\t- 2", "k": ["runtime environment provide", "automatic memory management", "support automatic memory", "dynamic memory allocation", "programming language"]}
{"i": "12329068", "t": "A program uses a queue to visit each of the nodes of a binary tree, starting at its root. After a node is processed its children are added to the the end of the queue. In what order do nodes get processed?\r \tPostorder\t   \r\tBreadth-first\t   \r\tInorder\t   \r\tPreorder", "k": ["binary tree", "breadth-first inorder preorder", "postorder breadth-first inorder", "inorder preorder", "breadth-first inorder"]}
{"i": "12336971", "t": "Suppose you have the following code:\r  void InsertNode(tNode** node, int i){\r   if(*node == NULL){\r      *node = new tNode;\r      (*node)->pLeft = NULL;\r      (*node)->data = i;\r      (*node)->pRight = NULL;\r      SetRootNode(node);\r      return;\r   } else {\r      if(i < (*node)->data)\r         InsertNode(&((*node)->pLeft), i);\r         if(i > (*node)->data)\r            InsertNode(&((*node)->pRight), i);\r         return;\r   }\r}\r   void Func(tNode **node){\rif(*node!=NULL){\rFunc(&(*node)->pLeft);\rtNode *temp;\rtemp = (*node)->pLeft;\r(*node)->pLeft= (*node)->pRight;\r(*node)->pRight = temp;\rFunc(&(*node)->pRight);\r}\r}\r  void traverse(tNode** nd){\rif(*nd!=NULL){\rtraverse(&((*nd)->pLeft));\rtraverse(&((*nd)->pRight));\rstd::cout<<(*nd)->data<<std::endl;\r}\r}\r Let the input given be\r98,15,100,10,78,120,5,12,96,110\r What would be the output of the following code snippet?\r  int main(void) {\r   tree *bT = new tree;\r   int i = 10;\r   int data;\r   while(i--){\r      std::cout<<\"Enter the node\"<<std::endl;\r      std::cin>>data;\r      bT->InsertNode(bT->GetRootNode(), data);\r   }\r   bT->Func(bT->GetRootNode());\r   bT->InsertNode(bT->GetRootNode(), 99);\r   bT->Func(bT->GetRootNode());\r   bT->traverse(bT->GetRootNode());\r}\r Options\r -5,10,12,15,78,96,98,99,100,1\r10,120\r -5,12,10,99,96,78,15,110,120,\r100,98\r -5,10,12,15,78,96,99,98,100,1\r10,120\r -98,100,120,110,15,78,96,99,1\r0,12,5", "k": ["null", "node", "pleft", "pright", "void func"]}
{"i": "12337753", "t": "Implement Iterator for a n-ary Tree structure.", "k": ["n-ary tree structure", "implement iterator", "tree structure", "n-ary tree", "iterator"]}
{"i": "12333754", "t": "A large integer is stored in an Array , with each index position storing a  single digit of the Number. WAC to increment the integer , stored in the array by one.", "k": ["index position storing", "index position", "position storing", "storing a single", "single digit"]}
{"i": "12336749", "t": "Find the character that has maximum frequency in an array of characters. If n is small and dealing with unicode char-space, extra space for hashtable is overhead, can you avoid?", "k": ["maximum frequency", "find the character", "find", "array of characters", "maximum"]}
{"i": "12337726", "t": "Gave a puzzle - placed two robots and a sensor on the line, write code that will be executed on both machines and make them meet.", "k": ["gave a puzzle", "write code", "make them meet", "machines and make", "gave"]}
{"i": "12332739", "t": "Can you mention any issues that you debugged earlier and thought was tough?", "k": ["thought was tough", "mention any issues", "debugged earlier", "earlier and thought", "tough"]}
{"i": "12331725", "t": "Given a binary tree \r    struct Node { \r     Node* leftChild; \r     Node* rightChild; \r     Node* nextRight; \r    } \r Populate the nextRight pointers in each node.", "k": ["tree struct node", "binary tree struct", "struct node", "node", "binary tree"]}
{"i": "12332738", "t": "A kidnapper wants to write a ransom note. He'll do so by cutting character/words from a magazine. Given a note and the magazine (both in form of strings), find out if the note can be formed from the magazine.", "k": ["write a ransom", "magazine", "ransom note", "note", "kidnapper"]}
{"i": "12331721", "t": "Print all the paths from the root to the leaf in a tree", "k": ["print", "tree", "paths", "root", "leaf"]}
{"i": "12328770", "t": "Given a sorted array, construct a balanced BST.", "k": ["balanced bst", "sorted array", "construct a balanced", "bst", "array"]}
{"i": "12328769", "t": "What happens after www.amazon.com is typed by customer?", "k": ["typed by customer", "customer", "typed"]}
{"i": "12334725", "t": "I showed the feature 'Customers who bought also bought' on amazon.com, and asked to design and implement.\rQ. What if memory is not sufficient?\rQ. How do DB tables look like?\rQ. Can you state what all components are present in the system and how does the control flow after webserver receives the request?\rQ. If you use multiple DB calls for every request, it may be very inefficient as you might be serving millions of requests. can you improve?", "k": ["showed the feature", "design and implement", "customers who bought", "asked to design", "customers"]}
{"i": "12333722", "t": "Given a binary tree where each node contains an integer value and a value k, print all paths which sum upto this value k", "k": ["print all paths", "binary tree", "paths which sum", "sum upto", "print"]}
{"i": "12332725", "t": "what do threads share amongst themselves and what they dont share?Please help me in the ans.I know Heap is shared b/w threads and stack is not shared.What els do the have them in common?", "k": ["ans.i know heap", "heap is shared", "shared.what els", "dont share", "threads share"]}
{"i": "12332722", "t": "Given a list of words, L, that are all the same length, and a string, S, find the starting position of the substring of S that is a concatenation of each word in L exactly once and without any intervening characters.  This substring will occur exactly once in S..\r  .\r Example:.\r L: \"fooo\", \"barr\", \"wing\", \"ding\", \"wing\".\r S: \"lingmindraboofooowingdingbarrwingmonkeypoundcake\".\r                  fooowingdingbarrwing.", "k": ["find the starting", "intervening characters", "starting position", "list of words", "length"]}
{"i": "12323701", "t": "How will you prioritize   below 4 projects \r 1. Minor defects, less business impact but cutomere has reporetd this issue \r2 & 3- Projects whose details are not there but its the VP projects\r4. Critical project with huge impact on business \r ( I told 4 first and 2&3 i told since do not have much details so I will work on the first one since bug reported by customer) However correct answer should be (1,4,2&3 since amazon is customer drive company) make sure you do not flunk in this question", "k": ["projects", "minor defects", "prioritize", "reporetd this issue", "critical project"]}
{"i": "12325696", "t": "Write the test cases for the scenario where you need to verify sum between 1 to 100 inclusive( again you need to tell negative and positive test cases)", "k": ["positive test cases", "test cases", "verify sum", "negative and positive", "positive test"]}
{"i": "12321689", "t": "What all type of testing will you perform on the google search engin and the Negative and positive test cases( Interviewer was more intersted knowing the types like functional, non functional, performance, load , stress and do not forget to mentioned localization terms in your test case) I told almost 10 test cases and covered most of all type of testing", "k": ["google search engin", "mentioned localization terms", "positive test cases", "negative and positive", "test cases"]}
{"i": "12324699", "t": "Give the name of the filed you enter while creating a defect( You need to tell all the filed you have used while creating a defect)", "k": ["creating a defect", "filed you enter", "enter while creating", "defect", "filed"]}
