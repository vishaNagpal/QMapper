{"i": "3178697", "t": "Given a large set of balls say N such that these balls are identical if they are of the same color. We have to randomly pick one of the balls such that the probability of picking is the same. Find an efficient way of solving this in terms of space and running time complexity.", "k": ["large set", "balls", "color", "balls are identical", "set of balls"]}
{"i": "3217706", "t": "find the output of the following code:\r//assume all header files are declared..\r#define concatinate(a,b) a##b\r#define same1(a)  #a\r#define same2(a)  same1(a)\rint main(){\r        printf(\"%s\\n\",same2(concatinate(1,2)));\r        printf(\"%s\\n\",same1(concatinate(1,2)));\r}", "k": ["find the output", "assume all header", "files are declared.", "header files", "printf"]}
{"i": "3389664", "t": "The private member in derived class \r Answer: Can be inherited only if the derived class is inheriting from base class with private access level\r This is an on-line test. I don't know what the answer means.", "k": ["private access level", "derived class answer", "derived class", "on-line test", "inheriting from base"]}
{"i": "3207689", "t": "Using pointers to call a function is called as\r Answer: call by reference\r This is an on-line test. I don't know why the answer is call by reference", "k": ["on-line test", "function is called", "call by reference", "called as answer", "call"]}
{"i": "3217705", "t": "Write a function to determine if a tree(need not be binary) is a BST.", "k": ["write a function", "function to determine", "bst", "write", "tree"]}
{"i": "3179692", "t": "Write a function to determine if a binary tree is a BST.", "k": ["write a function", "function to determine", "binary tree", "bst", "write"]}
{"i": "3239696", "t": "write a function boolean substr(String string, String substr) where substr function returns true if substr is a substring of string.", "k": ["function returns true", "function boolean substr", "substr function returns", "returns true", "string string"]}
{"i": "3374664", "t": "sort the input array. only following operations on array is allowed:\r1)get(index) -gets the element at that index\r2)reverse(int start,int end) - example reverse(1,3) for the array [1,2,3,4,5] will return [1,4,3,2,5]", "k": ["sort the input", "int start,int end", "input array", "sort", "array"]}
{"i": "3181704", "t": "A specification for a very simple file system stored inside a flat file (FS). There is an associated index file (FI) which provides meta-data to the data inside the flat file (FS). \r FS:- FS cannot be larger than 1 MB. The entire space in FS is divided into blocks of 128 bytes. \rFI:- FI provides meta-data regarding what is stored in FS. Directories, sub-directories and files are supported. Files can be binary or text which is marked in the meta-data. The following is a detailed description of FI-  \rFI consists of a sequence of entries or records. Each record (R) is 48 bytes long. Each record has an index and is referred by its index. There can be a max 8192 Records if each file is exactly one block long. Therefore FI can be at most 8192 x 48 = ~384KB in size. The structure of each R is -\r 1             2  3  4    5 \r|-----------------|--|--|---|-------|\r 1  Name (32 bytes)\r2  Attribs (2 bytes) Described below\r3  Directory Entry (2 bytes) - what is the parent directory of this record\r4  Size (4 bytes)  File size, 0 for Directory\r5  Blocks list (8 bytes)\r Name  The file/dir name can be at most 32 bytes long. Only ascii alpha-numeric characters are allowed. The only symbols allowed are - $ and . A string shorter than 32 characters is terminated with an ascii value of 0.\rAttributes  Only the relevant attributes are described here\r            1st bit  if set is a File else Dir\r            3rd bit  if set is a Text file else Binary\rDir Entry The index of the parents Record in FI. The root entry has this value as 0.\rSize - The actual size of the file (not the block count), always 0 for directories\rBlocks list - Lists which blocks in FS holds the contents of this record. 8 bytes allows for 4 block indices to be specified each of size 2 bytes. If a file is larger than 4 block sizes (i.e. larger than 512 bytes) then a chaining mechanism is used where the last 2 bytes of the block from FS is used to point to the next block in FS.  Suppose if the file is of 8 block size, then the last 2 bytes of 4th block will point to 5th block and last 2 bytes of 5th block points to 6th block and so on.\rDirectories will not have any block entries.\r The root directory always occupies R[0].\r Problem\rA] Write a class com.progress.test.FSReader which has a static read method and takes as its only argument a file path similar to \\files\\abc.txt and returns a String of its contents. If the path provided is not a file or not a text file null must be returned. No exceptions must be thrown.\rSignature -> String com.ma.test.FSReader.read(String path)\r For test purposes, you can use file path \\ma\\ProblemStatement.txt which returns present file contents.", "k": ["bytes", "file", "block", "simple file system", "size"]}
{"i": "3176691", "t": "Demonstrate memory leak.", "k": ["demonstrate memory leak", "demonstrate memory", "memory leak", "demonstrate", "leak"]}
{"i": "3211695", "t": "How do you delete the object of a singleton class?", "k": ["singleton class", "delete the object", "class", "delete", "object"]}
{"i": "3376663", "t": "Using pointers to call a function is called as Answer: call by reference\r This is a multiple-choice question from on-line test. The statement above is a correct answer but I don't know why it is called call by reference.", "k": ["on-line test", "multiple-choice question", "question from on-line", "function is called", "call by reference"]}
{"i": "3246685", "t": "The private member in derived class can be inherited only if the derived class is inheriting from base class with private access level\r This is a multiple-choice question from on-line test. The statement above is a correct answer but I don't know what it means.", "k": ["private access level", "derived class", "on-line test", "inheriting from base", "access level"]}
{"i": "3374662", "t": "Using pointers to call a function is called as Answer: call by reference\r This is also multiple-choice question from on-line test. Anyone knows why it is called call by reference?", "k": ["on-line test", "multiple-choice question", "question from on-line", "called as answer", "answer"]}
{"i": "3176690", "t": "The private member in derived class can be inherited only if the derived class is inheriting from base class with private access level.\r This is a on-line test. The statement above is a correct choice. But I don't understand what it means.", "k": ["private access level", "derived class", "access level", "inheriting from base", "base class"]}
{"i": "3246684", "t": "Write an Algorithm to find Level Sum and Store that in an Array??\reg\r                5\r               /  \\\r              3    8\r             / \\  / \\\r            1  4 6  10\r for this tree a[0]=5,a[1]=11,a[2]=21.....", "k": ["find level sum", "level sum", "sum and store", "write an algorithm", "algorithm to find"]}
{"i": "3373661", "t": "A Jar\rA fly that replicates at 1:2 (One fly becoming 2}\rTakes a minute for replication.\rIf the jar is filled(100%) in 60 Mins.\rAt what time it will be filled with 75%.", "k": ["minute for replication", "fly", "fly that replicates", "jar", "mins"]}
{"i": "3372661", "t": "B-Trees\r- Their Structure\r- Search Complexity", "k": ["search complexity", "b-trees", "structure", "search", "complexity"]}
{"i": "3187691", "t": "C++ Variable Scoping\r- Local\r- Global\r- Dynamic", "k": ["variable scoping", "local", "global", "dynamic", "variable"]}
{"i": "3207688", "t": "R = Red\rB = Blue\rI/P - An fixed array { R, B, B, R........}\rO/P - array { R, R, R..........B.........}\r Catch:\rConsider corner cases\r1. All B\r2. All R", "k": ["fixed array", "corner cases", "array", "catch", "red"]}
{"i": "3350665", "t": "Find out the Nth largest number from last end . Let's suppose you are performing this operation in BST.\rex:\r          5\r          /\\\r         3  7\r         /\\ /\\\r        1 4 6 9\rint findlargest(Tree *t,int n)\rint a = findlargest(Root,2)\rO/P : a = 6", "k": ["nth largest number", "operation in bst", "nth largest", "largest number", "performing this operation"]}
{"i": "3307669", "t": "you are given a matrix with lowest left corner as starting point(1, 1) and the upper most right corner as the end point(m,n).Each element of the matrix is having some weight. while traversing from (1, 1) you can go one cell in the right or you can go one cell up. \rQuestions:\ra)What is the total number of paths between (1,1) to (m,n). (note:you have to write only a mathematical expression in this part.)\rb)Write a program to find the costliest path,also return the path  length.\rComplexity should be in polynomial time.\rfor example one path from (1,1) to (m,n) may be as follows.-  -------    ---------\r\n|             ^-> (m,n)|\r\n|             |        |\r\n|             ^        |\r\n|        ^->->|        |   \r\n|_(1,1)->|             |\r\n                     ---", "k": ["lowest left corner", "starting point", "end point", "left corner", "corner as starting"]}
{"i": "3326667", "t": "Given a book find out the number of times each word appeared. Upon clarification I was told the following things 1. punctuations should be removed 2. case sensitive 3. assume book is given as a huge string to the function prototype 4. Words need not be ordered in any way", "k": ["number of times", "word appeared", "book find", "appeared", "find"]}
{"i": "3353669", "t": "The first phone screen the guy asked a question from programming pearls, how do you find all the anagrams in the dictionary.", "k": ["programming pearls", "phone screen", "screen the guy", "guy asked", "asked a question"]}
{"i": "3297671", "t": "Which is the best data structure to hold multiple keys for multiple objects\rie each object have multiple keys", "k": ["hold multiple keys", "multiple keys", "data structure", "structure to hold", "hold multiple"]}
{"i": "3291667", "t": "Given a pointer to the node, the node has one data part and two address pointers of its own type, \rIf the node represent a doubly linked list convert it to B-Tree and vice versa.\rWrite test cases to check the system", "k": ["doubly linked list", "linked list convert", "vice versa", "node represent", "data part"]}
{"i": "3327667", "t": "Given a singly linked list sorted in ascending order, convert it to a height balanced BST from this.", "k": ["height balanced bst", "singly linked list", "linked list sorted", "balanced bst", "ascending order"]}
{"i": "3335664", "t": "Given a text file, implement a solution to find out if a pattern similar to wild cards can be detected.\rfort example find if a*b*cd*, or *win or *def* exists in the text.", "k": ["implement a solution", "pattern similar", "similar to wild", "wild cards", "text file"]}
{"i": "3307664", "t": "Design the data structure to provide the mathematical operations +, - ,/ , * etc for the very very large numbers.\ralso implement the + function for two such very very large numbers ...say numbers with 1 Million digits.", "k": ["design the data", "mathematical operations", "data structure", "structure to provide", "provide the mathematical"]}
{"i": "3338664", "t": "{a} There is a string S ans another string s1,\rDesign the algorithm to check if s1 is contained inside S and return the location as well.\r Hint: Interviewer told me that this is a standard problem from book,\r{b} test cases to check this.", "k": ["design the algorithm", "contained inside", "return the location", "algorithm to check", "design"]}
