{"i": "14580708", "t": "Algorithm best suited to sort a linked list.\r Write a C program to implement that algo.", "k": ["algorithm best suited", "linked list", "suited to sort", "sort a linked", "algorithm"]}
{"i": "14579706", "t": "normal bubble sort require 100sec to sort 10000 entries.what will be the input size if it will solve in 50sec.", "k": ["normal bubble sort", "bubble sort require", "normal bubble", "sort require", "input size"]}
{"i": "14579698", "t": "Input: String array. The output of the method should be the String value out of the array passed in that contains the least number of numeric characters. If two Strings have the same number of numeric characters, return the longest String. If two Strings have the same number of numeric characters and are the same length, return the String that appears first in the input array. If the array is empty, return null.", "k": ["number of numeric", "string", "numeric characters", "string array", "strings"]}
{"i": "14558849", "t": "How to write a program to find how many character in the string..", "k": ["write a program", "program to find", "string.", "write", "program"]}
{"i": "14587679", "t": "There is a linked list where some nodes have similar number. Sort them such that all the similar number nodes are cluster together.", "k": ["linked list", "similar number", "similar number nodes", "similar", "number"]}
{"i": "14588674", "t": "Describe the difference between Chef and Puppet", "k": ["chef and puppet", "difference between chef", "describe the difference", "puppet", "chef"]}
{"i": "14581664", "t": "I/P:1234abcd  in array\r\nO/P:1a2b3c4d\r\nconstraint:In-place.........with out using any extra buffers....though it's rational to use temporary variables. time comolexity o(n)", "k": ["extra buffers", "temporary variables", "in-place", "constraint", "buffers"]}
{"i": "14558809", "t": "WAP to find no of possible paths from source node to destination node. If connection between various nodes is given. If there exists a cycle in a path from source to destination print Infinite path else print total no of path. eg\r5 8\r5 is no of nodes \r8 is no of connection\rand connections are\r1 2\r1 3\r1 5\r2 5\r2 3\r3 4\r3 5\r4 5\rnodes are 1 indexed. ( not 0 )\rfind no of path from 1 - 5.\r ans : 6", "k": ["wap", "wap to find", "path", "destination print infinite", "print infinite path"]}
{"i": "14570810", "t": "There is given a string array and strings having names \r for eg .  careercup , career , dewdeals , onlineshopping\r You have to create a program that finds the largest string in given string array", "k": ["string array", "create a program", "program that finds", "finds the largest", "largest string"]}
{"i": "14565809", "t": "You have a book will billion pages. Each Page P has L lines and each lines has W number of words. Design a search algorithm which gives me best match search results. Best match is when all the words given by user exactly matches.", "k": ["book will billion", "billion pages", "book", "billion", "match"]}
{"i": "14566824", "t": "You came to a parking lot which is like a long road, which goes till very large length(say infinite length). Car parked on both sides of that road. You parked your car somewhere and forgot where is it. Write algirithm and then code to search your car. Note that- you dont know length of parking lot and you cant assume its length, you dont know where is your car, you are in middle of somewhere and your car might be in any side of the road", "k": ["till very large", "long road", "car", "road", "length"]}
{"i": "14572753", "t": "In unix, build a list of file-paths whose size exceed a given number of bytes.", "k": ["build a list", "number of bytes", "list of file-paths", "file-paths whose size", "size exceed"]}
{"i": "14566820", "t": "In unix, gather a list of installed crons.", "k": ["gather a list", "installed crons", "list of installed", "unix", "gather"]}
{"i": "14567821", "t": "In unix, export a database, compress it, and send it to a network server - all in one line.", "k": ["export a database", "network server", "unix", "export", "database"]}
{"i": "14557796", "t": "Manage n queues in a given memory.\rSupport below operations on queues.\r//initialize n queues in memory m of size s\r//queues will be identified with numbers from 0 to n-1\rvoid initialize(void* m,int s,int n);\r//enqueue object o into queue identified by q\r//as long as there is free memory this should be successful\rvoid enqueue(int q,Object o);\r//dequeue an object from queue identified by q\rObject dequeue(int q);\rGive the best solution such that there will be minimum relocation of queues", "k": ["queues", "queue identified", "memory", "object", "manage"]}
{"i": "14568786", "t": "you are given with the project of some newly constructed airport which has only one run-way for both take-off/landing flights. you should design the project in such a way that no two flights should collide with each other even in-case of system failure because life's of passengers is more important.share your design ideas.", "k": ["newly constructed airport", "newly constructed", "constructed airport", "landing flights", "take-off"]}
{"i": "14569808", "t": "Write a function that takes 2 arguments: a binary tree and an integer N, it should return the N-th element in the inorder traversal of the binary tree. I asked the interviewer if I could use a 3rd argument to store the result; he said okay.", "k": ["binary tree", "return the n-th", "n-th element", "write a function", "inorder traversal"]}
{"i": "14563807", "t": "there are 8 balls one is lighter than the others you can use a scale but you can only use it twice how do you figure out which one is lighter?", "k": ["lighter", "balls", "scale", "figure"]}
{"i": "14572727", "t": "Given a char array find possible soln like :\reg   for  \"abc\"\rans: {a,ab,abc.b,bc,c}\r char[] function(char[])", "k": ["char array find", "array find", "find possible soln", "char array", "abc"]}
{"i": "14561766", "t": "Given an integer array find the longest subarray cantaining consequitive nos.\r eg {4,5,34,33,32,11,10,31}\rans is {31,32,33,34}\r int[] function(int[])", "k": ["cantaining consequitive nos", "integer array find", "longest subarray cantaining", "subarray cantaining consequitive", "consequitive nos"]}
{"i": "14560771", "t": "Given a 2D matrix of characters we have to check whether the given word exist in it or not.\reg\rbool function(char[][],char[])\r s f t\rd a h\rr y o\r we can find \"rat in it \r(top down , straight ,diagonal).. even in reverse order. with least complexiety.", "k": ["matrix of characters", "word exist", "char", "matrix", "bool function"]}
{"i": "14561762", "t": "Implement a hashset of size M for numbers.\rMinimum candidate number will be 1, maximum candidate number can be N. (N>M)\r I said simply to initialize an array of size N. when a number X comes in set Arr[X]=1. For lookup return the value of Arr[X].\r He was fine with it, but asked me to give a better algorithm where initialization of array is NOT required. In above case we are assuming all elements of arr will be initialized to 0.\r How can we do this any ideas ?", "k": ["implement a hashset", "hashset of size", "candidate number", "arr", "minimum candidate number"]}
{"i": "14572724", "t": "Re write the below program in such a way that it should print\r Hi\rGood Bye\r  ******NOTE: You cannot change the main method*******\r  Class Program{\rPublic static void main(String args[]){\rTry{\r               System.out.println(\u201cHi\u201d);\rSystem.exit(0);\r}\rFinally{\r               System.out.println(\u201cGood Bye\u201d);", "k": ["public static void", "good bye", "string args", "class program", "static void main"]}
{"i": "14562765", "t": "WriteTestA class on such a way that the below program\u2019s output should be false.\r ***NOTE: You cannot override equals method***\r  Class A{\rTestA testObj = new TestA();\rSystem.out.println(testObj.equals(testObj));\r}", "k": ["writetesta class", "program \u2019s output", "note", "writetesta", "false"]}
{"i": "14570776", "t": "Two elements of BST are swapped by mistake. You have to restore the tree without changing its structure.", "k": ["elements of bst", "bst are swapped", "swapped by mistake", "bst", "mistake"]}
{"i": "14563778", "t": "Design a system for the customer to review a product. It should be able to incorporate web-services. Describe the entire flow from the client to the database.", "k": ["design a system", "review a product", "customer to review", "design", "product"]}
{"i": "14566776", "t": "Convert binary search tree to doubly linked list", "k": ["convert binary search", "doubly linked list", "binary search tree", "convert binary", "linked list"]}
{"i": "14565766", "t": "Given list of words in the order as in the dictionary, find the order of the alphabets.\rSuppose you are given words in the same order as in the dictionary like a, ant, ball, cat, do, dog, fog, frock etc.\rFrom these words you know that there are alphabets a, n, t, b, l, c, d, o, g, f, r, k.\rYou don't know the order of these alphabets before hand.\rYou will have to find the order of these alphabets based on the order of the given words.\rFrom a and ant you cannot make out anything.\rFrom ant and ball you can make out that a comes before b in the order.\rFrom ball and cat you can make out that b comes before c in the order.\rFrom cat and do you can make out that c comes before d in the order.\rFrom do and dog you cannot make out anything.\rFrom dog and fog you can make out that d comes before f in the order.\rFrom fog and frock you can make out that o comes before r in the order.\rFrom these clues you should make out the order of the alphabets.\rNot necessarily you will be given all the dictionary words, but the words which are sufficient enough to make out the order of the alphabets.\rYou can always say you cannot make out the order if the words given are not sufficient.", "k": ["order", "make", "words", "alphabets", "find the order"]}
{"i": "14570750", "t": "u have 2 head pointers the 2 head pointer some where merged,how to heck merged or ot? is there any costly method?", "k": ["head pointers", "costly method", "merged,how to heck", "heck merged", "head"]}
{"i": "14566758", "t": "if you draw chords at random in a circle what fraction of hem will be shorter than chords formed by an inscribed equilateral triangle", "k": ["inscribed equilateral triangle", "equilateral triangle", "circle what fraction", "fraction of hem", "inscribed equilateral"]}
