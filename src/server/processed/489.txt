{"i": "4516749", "t": "Given bucket of jelly beans 16 red, 32 blue, 48 yellow. How many do you have to pick to have two of same color?", "k": ["jelly beans", "bucket of jelly", "red", "blue", "yellow"]}
{"i": "4568750", "t": "Reverse a 4 digit number in one statement. Ex: int n =1234; x= <your code>; cout<<x; //Output: 4321", "k": ["digit number", "output", "reverse", "digit", "statement"]}
{"i": "4519717", "t": "Describe the singleton pattern - its purpose and implementation.", "k": ["describe the singleton", "singleton pattern", "purpose and implementation", "describe", "pattern"]}
{"i": "4529705", "t": "What things should you take into account when you are planning to use multiple threads in your program. And the one connected to this was: What is deadlock and how do you prevent it?", "k": ["multiple threads", "program", "things", "account", "planning"]}
{"i": "4496725", "t": "Explain what is Overloading and overriding.", "k": ["overloading and overriding", "overloading", "explain", "overriding"]}
{"i": "4525718", "t": "What is polymorphism? Give an example.", "k": ["polymorphism", "give"]}
{"i": "4609715", "t": "What is STL auto_ptr? How do you use it and what problems should you be aware of when using it.", "k": ["stl auto", "ptr", "stl", "auto", "problems"]}
{"i": "4528711", "t": "Describe smart pointer and how would you implement it.", "k": ["describe smart pointer", "describe smart", "smart pointer", "describe", "smart"]}
{"i": "4539687", "t": "A robot has to move in a grid which is in the form of a matrix. The robot can go 1) A(i,j) to A(i,j+1) or 2) A(i,j) to A(i+1,j). Find an efficient way of computing the unique number of paths from A(0,0) to A(m-1,n-1) for the grid represented by the matrix A mxn", "k": ["robot", "grid represented", "move", "form", "grid"]}
{"i": "4504679", "t": "Given an array of n numbers (A1, A2, A3....An)(where Ai can be positive or negative, i=1 to n), find the value of maximum sum of all sub-array's sums, such that these numbers (in the sub-array) are continious in the given sample.\r Example:\r -1,1,3,-1\r The max value for the sub-array is 4. The continious sub-array is 1,3\r If the input was 1,-1,-1,3\r then our answer is 3 since 1 and 3 are not continious", "k": ["positive or negative", "maximum sum", "sub-array sums", "numbers", "sub-array"]}
{"i": "4493673", "t": "give an example of symbol table, semantic stack and parse table in an compiler implementation", "k": ["semantic stack", "compiler implementation", "stack and parse", "symbol table", "parse table"]}
{"i": "4532673", "t": "How is C++ related encapsulation, inheritance and recursion", "k": ["related encapsulation", "inheritance and recursion", "related", "encapsulation", "inheritance"]}
{"i": "4545670", "t": "Given the following searching algorithm, what is the complexity and how would you improve it.", "k": ["searching algorithm", "algorithm", "searching", "complexity", "improve"]}
{"i": "4475777", "t": "If you have a file with 1 trillion numbers, but memory can hold only 1 million, how would you find the lowest 1 million out of all these 1 trillion numbers?", "k": ["trillion numbers", "find the lowest", "memory can hold", "trillion", "numbers"]}
{"i": "4504663", "t": "Implement a stack that can have push, pop and find_minimum operations in o(1) time.", "k": ["pop and find", "time", "implement a stack", "minimum operations", "implement"]}
{"i": "4480769", "t": "Write code for Huffman encoding.", "k": ["huffman encoding", "code for huffman", "write code", "huffman", "write"]}
{"i": "4480742", "t": "how to find that a given string is palindrome given a string can contain space as well. we don;t need to consider space. eg:  a cd ef ed ca is a palindrome.. try to reduce to more efficient alogorithm", "k": ["string is palindrome", "string", "space", "find", "palindrome"]}
{"i": "4419686", "t": "Compute square-root of a number x. what's the stopping criteria? What's the time complexity?", "k": ["compute square-root", "stopping criteria", "compute", "criteria", "time complexity"]}
{"i": "4439680", "t": "Given an undirected graph, find if it is bipartite or not. Return true or false.", "k": ["undirected graph", "graph", "find", "return true", "true or false"]}
{"i": "4470681", "t": "Telephone Dir lookup:\rGiven mapping: number to letters (just like on the telephone buttons)\ri/p: digit string e.g. \"1234\"\r1. o/p: all possible letter strings based on the mapping.\r 2. o/p only those strings that are in a given dictionary. (and length of the dictionary is small.)", "k": ["telephone dir lookup", "dir lookup", "telephone dir", "telephone buttons", "dir"]}
{"i": "4449674", "t": "Imagine you are running a typical dropbox website (like x-drive) where users can upload their files/data. How will you go about monetizing this website using online advertising? What are the factors you will consider to match users to ads?", "k": ["typical dropbox website", "upload their files", "running a typical", "typical dropbox", "dropbox website"]}
{"i": "4423692", "t": "Given a histogram of n items stacked next to each other, find the Max area under a given rectangle.\rEach bar in the histogram has width = 1 unit and hight is variable.\r Hint: Brute force approach gives you O(n2) solution. Can you do better?", "k": ["find the max", "max area", "items stacked", "max", "find"]}
{"i": "4472683", "t": "Find and delete nodes from a linked list with value=k. What's the complexity? Does it handle boundary cases?\r Hint: Make sure to free the memory when deleting a node using delete() or free()", "k": ["linked list", "find", "find and delete", "linked", "list"]}
{"i": "4399683", "t": "Implement Queue using stacks. What's the time complexity of various queue operations for this implementation?", "k": ["implement queue", "queue using stacks", "implement", "stacks", "queue"]}
{"i": "4447673", "t": "Find 2 numbers in an integer array that sum to x. If found return true else false.\r1. simple solution is O(n2)\r2. Using certain data struct it can be improved to O(n) but you have to check for a special condition. what is that? Hint: if x = 4 and one of the values in the array is 2.", "k": ["find", "numbers", "integer array", "integer", "sum"]}
{"i": "4425679", "t": "\"Count and Say problem\" Write a code to do following:\rn                 String to print\r0                 1\r1                 1 1\r2                 2 1\r3                 1 2 1 1\r...\rBase case: n = 0 print \"1\"\rfor n = 1, look at previous string and write number of times a digit is seen and the digit itself. In this case, digit 1 is seen 1 time in a row... so print \"1 1\"\rfor n = 2, digit 1 is seen two times in a row, so print \"2 1\"\rfor n = 3, digit 2 is seen 1 time and then digit 1 is seen 1 so print \"1 2 1 1\"\rfor n = 4 you will print \"1 1 1 2 2 1\"\r Consider the numbers as integers for simplicity. e.g. if previous string is \"10 1\" then the next will be \"1 10 1 1\" and the next one will be \"1 1 1 10 2 1\"", "k": ["print", "previous string", "digit", "string", "count"]}
{"i": "4476686", "t": "Given a binary tree, compute min depth of a leaf node.\r Hint:\r1. BFS\r2. Recursive implementation\rWhich is better in time complexity?", "k": ["compute min depth", "binary tree", "compute min", "leaf node", "min depth"]}
{"i": "4464682", "t": "1. Compare and contrast Arraylist and Linked list based on time complexity of various operations.\r2. Inserting into Arraylist and it's complexity. Consider dynamic memory allocation in order to expand the list.", "k": ["arraylist and linked", "linked list based", "arraylist", "contrast arraylist", "inserting into arraylist"]}
{"i": "4418673", "t": "Tower of Hanoi and it's time complexity for tower with n disks.", "k": ["time complexity", "tower of hanoi", "hanoi", "disks", "complexity for tower"]}
{"i": "4468685", "t": "Given a sorted integer array (e.g. 1 2 3 4 5). It is shifted by k pos to right (e.g. for k=2 and the new array is (4 5 1 2 3). Find what's the value of k based on the new array.\rHint: O(n) solutions is obvious. Can you do better? say O(lg n).", "k": ["sorted integer array", "sorted integer", "integer array", "array", "sorted"]}
