{"i": "5738921769041920", "t": "Write a program to print all the columns of a binary tree from left to right and top down.", "k": ["write a program", "program to print", "binary tree", "tree from left", "write"]}
{"i": "6522065568923648", "t": "A sequence of strings, printed first by column, on a screen of width K,\rRequires the first column of the same column by column alignment,\rAt least one character interval between columns and columns,\rAsk how many lines at least?\rsuch as:\rThe string sequence is {\"abc\", \"de\", \"fghij\", \"k\", \"lmno\", \"p\"}\rThe screen width is 10\rThe answer is at least 3 lines\rabc k\rde lmno\rfghij p", "k": ["character interval", "column alignment", "column", "requires", "string sequence"]}
{"i": "5461867051876352", "t": "Give a decimal number, such as 123. Asking a total of smaller num than 123 made up by 1 and 0 composed of decimal numbers.\r111, 110, 101, 100, 11, 10, 1, 0.", "k": ["decimal number", "give a decimal", "give", "number", "numbers"]}
{"i": "6359772914778112", "t": "To a word, and a map, map which is a word, ask this if a word is smash able? That is, you can smash one letter each time, and the rest of the letters can form a single word (the new word is still in the map) until it is completely hit.\rFor example: sprint -> print -> pint -> pit -> it -> i -> \"\"", "k": ["word", "map", "single word", "smash", "completely hit"]}
{"i": "6581919696289792", "t": "Given list of strings like \u201c crane, drain, refrain\u201d and a pattern such as *an* \rwhere * can match any number of chracters. \rReturn the matching word in an efficient manner.\rAnswer to above question : crane", "k": ["number of chracters", "crane", "list of strings", "match any number", "drain"]}
{"i": "4587340843450368", "t": "Partition given string in such manner that i'th substring is sum of (i-1)'th and (i-2)'nd substring. If such partition not possible then return empty arrayList.\reg.\r1) given \"1111223\" then return [\"1\", \"11\", \"12\", \"23\"]\r2) given \"1111213\" then return [\"11\", \"1\", \"12\", \"13\"]\r3) given \"11121114\" then return []", "k": ["manner that i'th", "i'th substring", "substring is sum", "return", "substring"]}
{"i": "4725199160213504", "t": "Minimum number of swaps of chars in only one string to make two strings the same", "k": ["minimum number", "number of swaps", "swaps of chars", "minimum", "string to make"]}
{"i": "6060598176514048", "t": "Lottery big stake spells +27633555301 dr.mamafaima .Lottery big stake spells are capable lottery spells that are centered around influencing you to win one uber lottery big stake that will settle all your budgetary necessities forever. Lottery bonanza spells initially rinse your chi or atmosphere utilizing intense cleaning ceremonies and voodoo. You need to take after my guidelines deliberately for the purging to happen Perfect lotto spells depend on the Hindu showing that a decent or awful spread created by somebody or something decides the future result of all incarnations. Culminate lotto spells work by guiding positive powers to make the best result for you when playing the lottery. It is fundamental not to be associated with exercises that create terrible kharma. On the off chance that there are occasions in your past that have collected negative kharma these should be purged and you will win the lotto The familial spirits would should be counseled on the important strides to rinse your kharma to set you up for full acknowledgment of your ideal karma lotto spell from the divine beings. Ceremonies will be made into a sanctified fire with different items being offered ..Call +27633555301\rEmail:drmamafaima@yahoo.com\rhttps://drmamafaima.wordpress.com/", "k": ["lottery big stake", "big stake spells", "big stake", "uber lottery big", "budgetary necessities forever"]}
{"i": "5190805290483712", "t": "+27633555301 Canada,London{Win one  lottery bonanzaFOR EFFECTIVE LOTTERY BIG MONEY SPELL CASTER CASINO BETTING", "k": ["caster casino betting", "big money spell", "money spell caster", "spell caster casino", "effective lottery big"]}
{"i": "5298570985996288", "t": "Matrix conversion problem. For example, give a matrix\r\na: 1, b: 2.\r\nb: 2, c: 3\r\nThen converted into\r\na, b, c\r\n1, 2, .\r\n., 2,3", "k": ["matrix conversion problem", "conversion problem", "matrix conversion", "problem", "matrix"]}
{"i": "5707238197952512", "t": "A Research team want to establish a research center in a region where they found some rare-elements. They want to make it closest to all the rare-elements as close as possible so that they can reduce overall cost of research over there. It is given that all the rare-element\u2019s location is connected by roads. It is also given that Research Center can only be build on road. Team decided to assign this task to a coder. If you feel you have that much potential..\r Here is the Task :- Find the shortest of the longest distance of research center from given locations of rare-elements.\r Locations are given in the matrix cell form where 1 represents roads and 0 no road..\rNumber of rare-element and their location was also given(number<=5)\rand order of square matrix was less than equal to (20).", "k": ["research center", "research", "center", "rare-elements", "establish a research"]}
{"i": "6526692859314176", "t": "Implement a grep-like function. For example\r[A1 + A2, B1 + B2, C1], grep (A = A1), is to return the result that contains A1,\rFor example, [A1, B1, C1], [A1, B2, C1].\rMore tricky can be grep (A = A1, A2, B = B1), so that is included (A1 || A2) & B1.", "k": ["implement a grep-like", "grep-like function", "implement", "function", "grep"]}
{"i": "4720596834320384", "t": "Given an array {a0, a1, a2, ... an, b0, b1, b2 ... bn},\rRearrange this array into {a0, b0, a1, b1, a2, b2, ... an, bn}\rinplace, O (1) space", "k": ["array", "rearrange", "rearrange this array", "inplace", "space"]}
{"i": "5401911523016704", "t": "Suppose there is a map with N bikes on it and now we have N individuals,\r Design an algorithm so that everyone can get the bike in the shortest distance", "k": ["design an algorithm", "shortest distance", "design", "suppose", "individuals"]}
{"i": "6223674595082240", "t": "Given a string, at each time, you can move any one of the char to the front, \rask you to find the minimum such move to get the target string\rexample\rsource abc, target cba : \rabc -> bac -> cba \rreturn 2", "k": ["source abc", "cba return", "find the minimum", "target string", "target cba"]}
{"i": "5730069841444864", "t": "Minimum Continuous Subsequence: targetList & availabletTagsList are two lists of string.\r \tInput:\r \ttargetList = {\"cat\", \"dog\"};\r\tavailableTagsList = { \"cat\", \"test\", \"dog\", \"get\", \"spain\", \"south\" };\r \tOutput: [0, 2] //'cat' in position 0; 'dog' in position 2\r \tInput:\r \ttargetList = {\"east\", \"in\", \"south\"};\r\tavailableTagsList = { \"east\", \"test\", \"east\", \"in\", \"east\", \"get\", \"spain\", \"south\" };\r \tOutput: [2, 6] //'east' in position 2; 'in' in position 3; 'south' in position 6 (east in position 4 is not outputted as it is coming after 'in')\r \tInput:\r \ttargetList = {\"east\", \"in\", \"south\"};\r\tavailableTagsList = { \"east\", \"test\", \"south\" };\r \tOutput: [0] //'in' not present in availableTagsList\r Note: targetList will contain Distinct string objects.", "k": ["minimum continuous subsequence", "continuous subsequence", "minimum continuous", "distinct string objects", "south"]}
{"i": "5232531568852992", "t": "Give you a bunch of light bulbs. Can flip a range of open change off, turn off open, and then asked to do so k times later, just ask you a light bulb is turned on or turned off, how to do", "k": ["light bulbs", "bunch of light", "give", "light", "bunch"]}
{"i": "5835188494925824", "t": "*e*er -> peter\r**eue -> queue\r**o\rma*\r*p*a*e*\r*erso*\r***k*am*on\r*ouse\r*a*\r*ur*\r***igent\r where there are 26 *, and we can fill all the stars in to form valid english words while using each letter once. Given this array and a dictionary how would you fill all the words in?", "k": ["form valid english", "valid english words", "form valid", "valid english", "english words"]}
{"i": "5457961651535872", "t": "public string stringWrap (String text, int characters)\r text is an input string, characters on behalf of the output of \reach line up to the number of bytes\rinput\"Thank you for shopping at the XYZ store.\\n Your order has been processed successfully.\\n\", 20\r\noutput\uff1a\r\n        \"Thank you for\\n\r\n        shopping at the XYZ\\n\r\n        store.\\n\r\n        Your order has been\\n\r\n        processed\\n\r\n        Successfully.\\n\"\r\n\r\nexample 2:\"Hello! How are you?\"\uff0c6\r\noutput\r\n\u201cHello!\\n\r\nHow\\n\r\nare\\n\r\nyou?\\n\"", "k": ["public string stringwrap", "xyz store.", "processed successfully.", "public string", "string stringwrap"]}
{"i": "5458273439318016", "t": "Modify the following code:def GenerateGraph(data):\r\n    d = {}\r\n    g = Graph()\r\n    for word in data:\r\n        for i in range(len(word)):\r\n            bucket = word[:i] + '_' + word[i+1:]\r\n            if bucket in d:\r\n                d[bucket].append(word)\r\n            else:\r\n                d[bucket] = [word]\r\n\r\n    for v in d.keys():\r\n        for word1 in d[v]:\r\n            for word2 in d[v]:\r\n                if word1 != word2:\r\n                     g.addEdge(word1,word2)\r\n    return gThe objective is to find all combination of words by changing one letter at a time and adding to the graph if word exists in the dictionary.\r We need to rewrite a different logic for the above code.", "k": ["return gthe objective", "def generategraph", "return gthe", "gthe objective", "find all combination"]}
{"i": "5179682482814976", "t": "Give a  string [] words,\rFind the shortest string [] containing the keyword inside.\rexample:\rwords: sky cloud google search sky work blue\rkeywords: sky blue\rreturn: sky work blue", "k": ["find the shortest", "shortest string", "give a string", "keyword inside", "words"]}
{"i": "6270877443293184", "t": "Given an array, find the number of   tuple such that A [i] + A [j] + A [k] = A [l] in an array, where i <j <k <l.", "k": ["find the number", "number of tuple", "array", "find", "number"]}
{"i": "5716778662494208", "t": "Given a n-nary tree, check whether it is a mirror of itself (ie, symmetric around its center).\r class TreeNode {\r     int val;\r     List<TreeNode> children;\r     TreeNode(int val) { \r         this.val = val; \r         children = new ArrayList<>();\r     }\r}", "k": ["n-nary tree", "int val", "children", "val", "treenode"]}
{"i": "5754976440680448", "t": "Imagine a scenario where there are N cars on an infinitely long single-lane road. Each car has a unique, permanent integer speed ranging between 1 and N, inclusive (units are irrelevant). The cars can be placed in any order along the road and then told to start driving indefinitely. Let's assume that the cars are traveling from right-to-left. So the leftmost car is at the front. Given an ordering of N cars, construct an algorithm to return an array of cluster sizes\r N=4\r [2, 4, 1, 3]   -> [2, 2]\r [2, 5, 4, 3, 1] -> [4, 1]\r followup\uff1a\rNew car speed = N+1.  Given an ordering of N cars, construct an algorithm to return an array of arrays of cluster sizes that will arise when the N+1 car is inserted. The ith row in the outer array corresponds to the cluster sizes that exist when the N+1 car is inserted into the ith index\r new car speed = 5\r [2, 4, 1, 3]  -> [[1, 2, 2], [3, 2], [3, 2], [2, 3], [2, 3]]", "k": ["infinitely long single-lane", "long single-lane road", "imagine a scenario", "infinitely long", "long single-lane"]}
{"i": "5720235523964928", "t": "Given a list of characters, write a function to output a list of length of minimum non overlapping subsequences that can partition the input list.\r For example:\rInput : [a,b,c]\rOutput: [1,1,1]\rExplanation: There are no repeated characters.\r Input : [a,b,c,a]\rOutput: [4]\rExplanation: The 'a' is repeated so one subsequence is between a to last a.\r  Input : [a,b,c,b,a,e,b,a,d,f,g,d,f,i,f,k,l,m,n,m,l]\rOutput: [8,7,6]\rExplanation: max length from 1st 'a' to last 'a' is 8.\r1st 'f' to last is 6 adding d to it = 7\rso on", "k": ["write a function", "minimum non overlapping", "list", "explanation", "input list"]}
{"i": "5727640316018688", "t": "Given one string s1, and then insert one char into this string at any place, to get s2, find the inserted char\rCould you do it in logn time", "k": ["find the inserted", "logn time", "inserted char", "place", "find"]}
{"i": "5687276347588608", "t": "There are three numbers a, b, and c. the product of any two numbers is equal to the third number. For example a*b=c or b*c=a or a*c=b. Then what are the possible a, b and c values?", "k": ["numbers", "numbers is equal", "product", "equal", "number"]}
{"i": "6278802060607488", "t": "Give you a 2xN board and two kinds of tiles: 1x2 (two squares across), 2x1 (two squares up) Ask how many ways you can fill the board.**       **       *      *                                      \r\n*         *        **   **Follow up is the new four kinds of tiles: L shape in different angle,  , ask you how many kinds of tiles are now six", "k": ["kinds of tiles", "fill the board.", "follow", "kinds", "tiles"]}
{"i": "5111452498132992", "t": "give a binary matrix, 0 on behalf of the sea, 1 on behalf of the land, the val also represents the height of the altitude, if a cell is originally on land and is also surrounded by eight neighbor are on land, that cell become 2, each cell and its eight neighbor elevation cannot differ by more than 1. Return to the highest altitude can take altitude (special case is if the entire matrix is 1, then it is unlimited)", "k": ["give a binary", "neighbor elevation", "val also represents", "represents the height", "elevation cannot differ"]}
{"i": "5722130812502016", "t": "In the range of 0-n, return all the numbers that in the reverse can be mistaken for another number. E.g. 18 -> 81. The corner case is not counting the same number, such as 101 and not 0 at the end of the figure such as 60 (because 09 is not 9)\rPublic List<Integer> getNum(int n)", "k": ["public list", "return", "range", "reverse", "mistaken"]}
