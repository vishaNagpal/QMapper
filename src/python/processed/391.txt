{"i": "12839666", "t": "write a program to print the given string as alphabets in order next integres with sum next special characters\r example: CAE2W3@D#  as input and output should be\r                   ACDEW5@#", "k": ["write a program", "program to print", "string as alphabets", "alphabets in order", "order next integres"]}
{"i": "12839665", "t": "write a program to print checksum for given number \rby taking last digit sapeate and if sum of squares of remaining numbers are equal to previous last number then print valid checksum else invalid\r example:  321543 take 3 saperately and\r                    let sum of squares be   3^2+2^2+1^2+5^2+4^2 == 3(last digit) then print valid  checksum otherwise invalid", "k": ["print valid checksum", "print valid", "valid checksum", "sum of squares", "write a program"]}
{"i": "12849666", "t": "Given an n-by-n matrix of 0's and 1's where all 1's in each row come before all 0's, find the most efficient way to return the row with the maximum number of 0's.", "k": ["maximum number", "return the row", "row", "matrix", "find"]}
{"i": "12843661", "t": "Compres String\rTest cases", "k": ["compres string test", "string test cases", "string test", "compres string", "test cases"]}
{"i": "12842661", "t": "Find merge node of two linked list\rexample:A->B->C->D\rLinkedlist2: E->F->A->B->C->D", "k": ["find merge node", "find merge", "merge node", "linked list", "find"]}
{"i": "12841661", "t": "Reverse sentence: Example:\r\"Hello life \"\rto\r\"life Hello\"\rTest cases", "k": ["test cases", "reverse sentence", "test", "reverse", "sentence"]}
{"i": "12828668", "t": "Write a function to make the largest number from the digits of a given number.\rExample.\rnumber: 32441\rOutput:  44321\rfunction prototype:\rC/C++ : int biggestNumber(int number)\rJava : int biggestNumber(int number)\r Note: Use minimum , constant space.", "k": ["make the largest", "int biggestnumber", "int", "number", "int number"]}
{"i": "12810663", "t": "Given an array of N integers  with +ve & -ve numbers. Find the maxproduct of 3 numbers ? & Test Cases", "k": ["test cases", "numbers", "test", "cases", "array"]}
{"i": "12806694", "t": "How do you test a WEB SERVICE (C#)..?", "k": ["web service", "test a web", "service", "web", "test"]}
{"i": "12806693", "t": "How do you test a WEB SERVICE (C#)..?", "k": ["web service", "test a web", "service", "web", "test"]}
{"i": "12803681", "t": "Usually first round consists of phone interviews.Try to finish your programming problems asap as the interviewer expects you to solve atleast 3-4", "k": ["programming problems asap", "round consists", "consists of phone", "phone interviews.try", "interviews.try to finish"]}
{"i": "12814669", "t": "Perform multiplication of two bytes without * operator!!!\rUse shift operations", "k": ["operator", "perform multiplication", "perform", "multiplication", "bytes"]}
{"i": "12809695", "t": "Perform right rotate operation in C\runsigned char rotate(unsigned char c,int m)\r Basically rotate m time the bits of char c", "k": ["unsigned char c,int", "unsigned char rotate", "basically rotate", "unsigned char", "time the bits"]}
{"i": "12784705", "t": "Perform right rotate operation in C\runsigned char rotate(unsigned char c,int m)\r Basically rotate m time the bits of char c", "k": ["unsigned char c,int", "unsigned char rotate", "basically rotate", "unsigned char", "time the bits"]}
{"i": "12805677", "t": "Usually first round consists of phone interviews.Try to finish your programming problems asap as the interviewer expects you to solve atleast 3-4", "k": ["programming problems asap", "round consists", "consists of phone", "phone interviews.try", "interviews.try to finish"]}
{"i": "12806691", "t": "Perform multiplication of two bytes without * operator!!!\rUse shift operations", "k": ["operator", "perform multiplication", "perform", "multiplication", "bytes"]}
{"i": "12784704", "t": "Perform right rotate operation in C\runsigned char rotate(unsigned char c,int m)\r Basically rotate m time the bits of char c", "k": ["unsigned char c,int", "unsigned char rotate", "basically rotate", "unsigned char", "time the bits"]}
{"i": "12803680", "t": "Perform multiplication of two bytes without * operator!!!\rUse shift operations", "k": ["operator", "perform multiplication", "perform", "multiplication", "bytes"]}
{"i": "12814667", "t": "Perform multiplication of two bytes without * operator!!!\rUse shift operations", "k": ["operator", "perform multiplication", "perform", "multiplication", "bytes"]}
{"i": "12765676", "t": "Perform right rotate operation in C\runsigned char rotate(unsigned char c,int m)\r Basically rotate m time the bits of char c", "k": ["unsigned char c,int", "unsigned char rotate", "basically rotate", "unsigned char", "time the bits"]}
{"i": "12806688", "t": "Usually first round consists of phone interviews.Try to finish your programming problems asap as the interviewer expects you to solve atleast 3-4", "k": ["programming problems asap", "round consists", "consists of phone", "phone interviews.try", "interviews.try to finish"]}
{"i": "12765675", "t": "Perform multiplication of two bytes without * operator!!!\rUse shift operations", "k": ["operator", "perform multiplication", "perform", "multiplication", "bytes"]}
{"i": "12809694", "t": "Perform right rotate operation in C\runsigned char rotate(unsigned char c,int m)\r Basically rotate m time the bits of char c", "k": ["unsigned char c,int", "unsigned char rotate", "basically rotate", "unsigned char", "time the bits"]}
{"i": "12814662", "t": "Count smaller elements on right side\r eg : [4,12,5,6,1,34,3,2]\ro/p  [3,5,3,3,0,2,1,0]", "k": ["count smaller elements", "count smaller", "smaller elements", "count", "smaller"]}
{"i": "12784697", "t": "#include<iostream>\rusing namespace std;\r class A\r{\r\tpublic:\r \tvirtual\tvoid f() = 0;\t\r};\r class B: public A\r{\r\tpublic:\t\r \tvoid f()\r\t{\r//\t\tf();\t//segmentation Fault\r\t\tcout<<\"\\bB's f() called\"<<endl;\r\t\tf();\t//recursive loop\r\t}\r};\r void A:: f()\r{\r\tcout<<\"\\nA's f() called\"<<endl;\r}\r int main()\r{\r\tA *ptr;\r\tB b;\r \tptr = &b;\r\tb.f();\r return 0;\r}\r Q-> In this problem.. inside the B class f( ), if we call f( ) before \"cout<<\" statement it gives segmentation fault and after \"cout<<\" statement it gives recursive loop. Why segmentation fault is coming. Thanks in Advance :)", "k": ["segmentation fault cout", "segmentation fault", "virtual void", "recursive loop", "int main"]}
{"i": "12804676", "t": "K-Maximum Subarray problem", "k": ["k-maximum subarray problem", "k-maximum subarray", "subarray problem", "subarray", "k-maximum"]}
{"i": "12806664", "t": "print all possible combination of given n parenthesis. Eg: if n=2 then all possible combinations are: (n stands for number of parenthesis pair open-close)\r{}{}\r{{}}", "k": ["parenthesis pair open-close", "print", "parenthesis", "pair open-close", "parenthesis pair"]}
{"i": "12805665", "t": "Find the successor of a node in inorder traversal.", "k": ["find the successor", "inorder traversal", "node in inorder", "find", "traversal"]}
{"i": "12804667", "t": "Algorithm to check a linked list is palindrome or not, each node contains a single character.", "k": ["algorithm to check", "single character", "check a linked", "linked list", "list is palindrome"]}
{"i": "12805664", "t": "How to store a binary tree in a file so that we can re construct the same tree with that file", "k": ["store a binary", "binary tree", "tree", "file", "store"]}
