{"i": "12204784", "t": "Code merge sort\rHow will you test this function", "k": ["code merge sort", "code merge", "test this function", "merge sort", "code"]}
{"i": "12197801", "t": "Talk about sorting algorithms.\rExplain quick sort  and merge sort in details", "k": ["talk about sorting", "sorting algorithms", "talk", "algorithms", "sorting"]}
{"i": "12204783", "t": "Write a function which takes an integer and returns the number of '1' bits in its binary representation.\rHow will you test this function", "k": ["binary representation", "integer and returns", "returns the number", "write a function", "write"]}
{"i": "12201777", "t": "A binary string, of length N, is considered dangerous if it has 3 or more 0's adjacent to each other. Given N, how will you\r1. Compute the number of dangerous binary strings of length N.  \r2. List them.\r ExamplesN = 3 --> only one string 000. \r\nN = 4 --> 3 strings, 1000, 0000, 0001.", "k": ["considered dangerous", "length", "adjacent", "binary", "considered"]}
{"i": "12179062", "t": "Find the longest Zig-Zag path in a Binary TREE", "k": ["binary tree", "longest zig-zag path", "find the longest", "tree", "longest zig-zag"]}
{"i": "12178072", "t": "Given a set of n symbols a size k  and a combination of length k of non repeating characters from the symbol set write only an ITERATIVE algorithm to print the next unique combination.\r Ex: Symbols =[1,2,3,4,5]\rsize  = 3;\rgiven combination = 123, result = 124\rgiven combination = 254, result = 312.", "k": ["symbol set write", "iterative algorithm", "repeating characters", "algorithm to print", "set write"]}
{"i": "12179920", "t": "Given a large document and a short pattern consisting of a few words (eg. W1 W2 W3), find the shortest string that has all the words in any order (for eg. W2 foo bar dog W1 cat W3 -- is a valid pattern)", "k": ["foo bar dog", "short pattern consisting", "find the shortest", "foo bar", "bar dog"]}
{"i": "12177758", "t": "Write a program to find the mirror image of a binary tree?\r if a tree is like\r                01\r            02    03\r          04  05 06  07\r The mirror will be like\r                 01\r              03    02\r          07   06 05  04", "k": ["write a program", "program to find", "find the mirror", "mirror image", "binary tree"]}
{"i": "12174738", "t": "There are n steps in a hill. You stand on the top, you can climb down either one step or two steps at a time. Find the number of paths by which you can reach the bottom?", "k": ["hill", "steps", "top", "time", "find the number"]}
{"i": "12179753", "t": "write a program to find the vertical sum of a binary tree?\r if the tree is like\r                   01\r           02          03\r         04   05   06     07\rvertical sum is 04 02 12 03 07", "k": ["write a program", "program to find", "vertical sum", "binary tree", "write"]}
{"i": "12174686", "t": "Find Least common ancestor for multiple nodes in a binary tree.\r   node* FindCommonAncestor( node* root, key* keys, keys_length)", "k": ["find least common", "binary tree", "common ancestor", "ancestor for multiple", "keys"]}
{"i": "12173687", "t": "Implement stack class, algo for returning minimum number. what is Thrashing, Explain deadlocks.", "k": ["implement stack class", "returning minimum number", "implement stack", "stack class", "algo for returning"]}
{"i": "12174685", "t": "Remove duplicates from string given \" bananas \" Return \"bans\"\r   Write code for both O(n) and O(n2) solutions", "k": ["write code", "remove duplicates", "duplicates from string", "return", "bananas"]}
{"i": "12173686", "t": "Return k most frequently occuring numbers from a file of very large size containing numbers.\r   Give complexity. how your solution will solve scalability issues.", "k": ["frequently occuring numbers", "frequently occuring", "large size", "occuring numbers", "numbers"]}
{"i": "12178683", "t": "How do u represent n-ary tree in a integer array,\r   Write routines for serialize and deserialize n-ary tree.", "k": ["represent n-ary tree", "deserialize n-ary tree", "write routines", "integer array", "n-ary tree"]}
{"i": "12131665", "t": "give the number of integral solutions of the following equation:x[1] + x[2] + ... + x[k] = Nwhere x[i] are non-negative integers and k <= N", "k": ["give the number", "number of integral", "integral solutions", "give", "equation"]}
{"i": "12154732", "t": "A sequence of numbers is called a zig-zag sequence if the differences \rbetween successive numbers strictly alternate between positive and \rnegative. The first difference (if one exists) may be either positive \ror negative. A sequence with fewer than two elements is trivially a \rzig-zag sequence. \r For example, 1,7,4,9,2,5 is a zig-zag sequence because the differences \r(6,-3,5,-7,3) are alternately positive and negative. In contrast, \r1,4,7,2,5 and 1,7,4,5,5 are not zig-zag sequences, the first because \rits first two differences are positive and the second because its last \rdifference is zero. \r  Given a sequence of integers, sequence, return the length of the \rlongest subsequence of sequence that is a zig-zag sequence. A \rsubsequence is obtained by deleting some number of elements (possibly \rzero) from the original sequence, leaving the remaining elements in \rtheir original order", "k": ["zig-zag sequence", "sequence", "successive numbers strictly", "numbers strictly alternate", "zig-zag"]}
{"i": "12139782", "t": "Twisted linked list problem: Two linked lists merge at some node p,both the head pointers are given find the merging point under\rthe following restrictions.\r1. You should not traverse to the end any of the linked list.\r2. Merge node p should be detected by the time you reach at most most k nodes from p.\r3. Space should not exceed by k units.\r4. No saving of nodes to hard discs.\r5. No recursion.", "k": ["twisted linked list", "linked list problem", "linked lists merge", "linked list", "p,both the head"]}
{"i": "11998197", "t": "given two singly-linked lists with very nasty properties: \rfirst, they merge at some point but, more than that,\rtheir common tail might end up in a loop.\rfind the position where the two lists merge", "k": ["nasty properties", "common tail", "tail might end", "singly-linked lists", "properties"]}
{"i": "11996163", "t": "Find and store all the valid numbers in an array that are in the string including negative, positive, hexadecimal, octal, binary?\r For example string \"abcd 0xa 11.12 123\" has values 10, 11.12 , 123.\r I would rephrase the question: find all words(separated from other words through tabs or spaces) in the string that can be expressed in the form of decimal number. After the words are obtained store their value in the array.", "k": ["string including negative", "including negative", "string including", "valid numbers", "string"]}
{"i": "11996157", "t": "Given a set of n symbols and a size k write only an ITERATIVE algorithm to print all possible permutations of the given symbols with respect to the size given.\rFor example: Given symbols ={'A','B', 'C'} and \rsize = 2; \rSolution is {AA,AB,AC,BA,BB,BC,CA,CB,CC} and count = 9.\rDo not give recursive algorithm here", "k": ["iterative algorithm", "iterative", "symbols", "size", "solution"]}
{"i": "12005195", "t": "If pairwise sums of 'n' numbers are given in non-decreasing order \ridentify the individual numbers. If the sum is corrupted print -1 \rExample: \ri/p: \r4 \r4 5 7 10 12 13 \r o/p: \r1 3 4 9Example: N = 4, Say numbers are a, b, c, d.  The input is: pairwise sums in sorted order, i.e. values a+b, a+c, a+d, b+c, b+d, c+d are given sorted order\r We have to find a, b, c, d.", "k": ["non-decreasing order identify", "identify the individual", "individual numbers", "pairwise sums", "non-decreasing order"]}
{"i": "11983859", "t": "Given the head of a Binary Search tree, trim the tree, so that all elements in the new tree returned are between the inputs A and B", "k": ["binary search tree", "binary search", "search tree", "tree returned", "trim the tree"]}
{"i": "12040115", "t": "get a date(mon/day/year) from user. Print exact the week of dates(Sun to Sat)\rex) input: 2/20/2001  if the day is Wednesday\r    output: Sunday 2/17/2001\r            Monday 2/18/2001\r            Tuesday 2/19/2001\r            Wednesday 2/20/2001\r            Thursday 2/21/2001\r            Friday 2/22/2001\r            Saturday 2/23/2002", "k": ["sun to sat", "wednesday output", "mon", "year", "wednesday"]}
{"i": "12082878", "t": "get a string(word) from user, then make every possible permutation words.\rEx)intput: tree => output :  tree, rtee, rete, reet, etre, eetr, eert, eter, eret, teer, reet...", "k": ["permutation words", "tree", "reet", "string", "user"]}
{"i": "12079824", "t": "Average of Nodes in tree.", "k": ["average of nodes", "nodes in tree", "nodes", "average", "tree"]}
{"i": "12081728", "t": "Given an array-based heap on n elements and a real number x, efficiently determine whether the kth smallest element in the heap is greater than or equal to x. Your algorithm should be O(k) in the worst-case, independent of the size of the heap.", "k": ["kth smallest element", "efficiently determine", "real number", "kth smallest", "smallest element"]}
{"i": "12080727", "t": "write an algorithm finding the no.of one bits from 1 to n,for given any n value.\rcomplexity should be good\rexample:\r1=1\r2=10\r3=11\r4=100\r5=101\r6=110\r.\r.\rif n=3 then ur answer is 4\rif n=6 then ur answer is 9 \r Interviewer is looking for an algo in O(log N)time complexity", "k": ["write an algorithm", "algorithm finding", "finding the no.of", "no.of one bits", "write"]}
{"i": "12059938", "t": "why do we need to pass address of the objects as an argument in copy constructor", "k": ["copy constructor", "pass address", "argument in copy", "constructor", "pass"]}
{"i": "12067927", "t": "Rounding of an matrix:\r   it is a 2-d matrix of double values such that the sum of any row or coloumn is integer.floor or ceil every array element so that sum of any row or coloumn remains same.", "k": ["row or coloumn", "integer.floor or ceil", "ceil every array", "array element", "coloumn remains"]}
