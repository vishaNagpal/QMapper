{"i": "4800108041338880", "t": "So recently to someone I know a question was ask how do you rotate a 2 dimensional array? He was asked to white board it. He could get diagram the problem but had trouble coding it. \rThis is not an easy answer because equal dimensional array are easy but require you know the trip that you divide the x and y dimension and then do four swapping rotation around the corners. Not equal X,Y are much harder. When I heard this question, I could get the equal  dimensions done in an hour or two in a compiler. It took me two days to get the total program working. Here is the code:\r{\r#include <stdio.h>\r int main()\r{\r#define xsize 4\r#define ysize 8\r    int matrix[ysize*xsize] ;\r     typedef enum rotation\r    {\r        CW0,\r        CW90,\r        CW180,\r        CW270,\r        CCW0,\r        CCW90,\r        CCW180,\r        CCW270,\r        DONE0\r    } RotationTypes;\r     RotationTypes DesiredRotation = CW270;\r #define min(a,b) ( (a) < (b) ? a : b)\r     int x,y,r,swap0, swap1,rotx,roty, rotidx;\r     //walk through every possibily\r    for (DesiredRotation = CW0; DesiredRotation <= DONE0 ; DesiredRotation++)\r    {\r         for (y=0;y<ysize;y++)\r        {\r            for (x=0;x<xsize;x++)\r            {\r                 matrix[(y*xsize)+x] = y + x*10;\r                 //print the base rotation for references\r                if ( DesiredRotation == CW0\r                    || DesiredRotation == CCW0\r                    || DesiredRotation == DONE0)\r                    printf(\"%d \", matrix[(y*xsize)+x]);\r            }\r            if ( DesiredRotation == CW0\r                || DesiredRotation == CCW0\r                || DesiredRotation == DONE0)\r                printf(\"\\n\");\r         }\r         if ( DesiredRotation == CW0\r            || DesiredRotation == CCW0\r            || DesiredRotation == DONE0)\r            printf(\"\\n\");\r         //flips are generally more effeicient than rotation\r        //bu doing flips you only have to do one 90 degree\r        // type of rotation. flips work on uneven dimeions\r        if (DesiredRotation != CCW90 && DesiredRotation != CW270)\r        {\r            //horiztonal flip\r            for (y=0;y<ysize;y++)\r            {\r                for (x=0; x<xsize/2;x++)\r                {\r                    swap0 = matrix[(y*xsize)+x];\r                    matrix[(y*xsize)+x] = matrix[(y*xsize)+((xsize-1)-x)] ;\r                    matrix[(y*xsize)+((xsize-1)-x)] = swap0;\r                 }\r            }\r             //vertical flip\r            for (y=0;y<ysize/2;y++)\r            {\r                for (x=0; x<xsize;x++)\r                {\r                    swap0 = matrix[(y*xsize)+x];\r                    matrix[(y*xsize)+x] = matrix[(((ysize-1)-y)*xsize)+x] ;\r                    matrix[(((ysize-1)-y)*xsize)+x] = swap0;\r                 }\r            }\r        }\r           if (DesiredRotation != CW0\r            && DesiredRotation != CW180\r            && DesiredRotation != CCW0\r            && DesiredRotation != CCW180\r            && DesiredRotation != DONE0)\r        {\r             //do one CCW90 rotation which is the same as CW270\r            //if would be more effiecient to hard code every\r            //different combination but no way to make it elegant\r             int sqsize=min(ysize,xsize);\r             //first do the inplace square part because it is very efficient\r            for (y=0;y<sqsize/2;y++)\r            {\r                for (x=0;x<(sqsize+1)/2;x++)\r                {\r                      rotx = x;\r                    roty = y;\r                    //store the top, left\r                    int swap0 = matrix[(y*xsize)+x];\r                     //rotate into top left from top right\r                    matrix[(y*xsize)+x] = matrix[(x*xsize)+((sqsize-1)-y)];\r                     //rotate into top right from bottom right\r                    matrix[(x*xsize)+((sqsize-1)-y)] = matrix[(((sqsize-1)-y)*xsize)+((sqsize-1)-x)];\r                     //rotate into bottom right from bottom left\r                    matrix[(((sqsize-1)-y)*xsize)+((sqsize-1)-x)] = matrix[(((sqsize-1)-x)*xsize)+y];\r                     //into into bottom left from original top left\r                    matrix[(((sqsize-1)-x)*xsize)+y] = swap0;\r                 }\r            }\r              //now the challenge is what to do with unequal array left overs\r            //we chose to hardcode inserting rotation and swapping until done\r             //we have to do two different sets of code if height is\r            //greater than width\r            if (ysize>xsize)\r            {\r                int rotinc=0;\r                  int baseptr = sqsize*sqsize;\r                int rowsize = xsize;\r                 for (x=xsize-1;x>=0;x--)\r                {\r                    for (y=sqsize;y<ysize;y++)\r                    {\r                        //find where the extra non square starts after\r                        //the  sqaure part of the arrary\r                        int rotptr = baseptr+((y-sqsize)*rowsize)+x;\r                         //store it for later insertion\r                        swap0 = matrix[rotptr];\r                         //find where in the new dimensions\r                        //the rotation from the end of the square should\r                        //go\r                        int swapptr = (((xsize-1)-x)*ysize)+y;\r                         //swap upswards to make room for the\r                        //insertion\r                        while (rotptr>swapptr)\r                        {\r                            matrix[rotptr] = matrix[rotptr-1];\r                             rotptr--;\r                         }\r                         //insert the rotation at the proper place\r                        //which is now free\r                        matrix[swapptr] = swap0;\r                      }\r                    //we have done one row so increase where the\r                    //base pointer will be for the next time\r                    baseptr+=ysize-sqsize;\r                     //because we did one rotation the remaining rows\r                    //are one rotation smaller\r                    rowsize--;\r                 }\r             }\r              //width is bigger than height\r            if (xsize>ysize)\r            {\r                  int rotinc=0;\r                  int rowsize = xsize;\r                   for (x=sqsize;x<xsize;x++)\r                {\r                     //insert happen at the begging of the array for\r                    //this sizing\r                    int swapptr = 0;\r                     for (y=0;y<ysize;y++)\r                    {\r                        //find the rotation at the end of each row\r                        int rotptr = rotinc+(y*rowsize)+sqsize;\r                         //store it for latter use\r                        swap0 = matrix[rotptr];\r                           //swap upwards to made room for the insertion\r                        while (rotptr>swapptr)\r                        {\r                            matrix[rotptr] = matrix[rotptr-1];\r                             rotptr--;\r                         }\r                        //issert the rotation at the begining of the\r                        //array\r                        matrix[swapptr] = swap0;\r                          //increasement the point\r                        swapptr++;\r                       }\r                     //we have done one row so need to increase\r                    //our start posiiton\r                    rotinc+=ysize;\r                     //we have done one row. the remain is one row smaller\r                    rowsize--;\r                 }\r             }\r              //print out the rotated and maybe flipped new array\r            for (x=0;x<xsize;x++)\r            {\r                for (y=0;y<ysize;y++)\r                {\r                      printf(\"%d \", matrix[(x*ysize)+y]);\r                }\r                 printf(\"\\n\");\r             }\r          } else {\r             //printout the vertical flipped only array\r            if (DesiredRotation != CW0\r                && DesiredRotation != CCW0\r                && DesiredRotation != DONE0)\r            {\r                for (y=0;y<ysize;y++)\r                {\r                    for (x=0;x<xsize;x++)\r                    {\r                          printf(\"%d \", matrix[(y*xsize)+x]);\r                    }\r                     printf(\"\\n\");\r                 }\r            }\r          }\r         printf(\"\\n\");\r     }\r        return 0;\r}\r }", "k": ["matrix", "xsize", "desiredrotation", "ysize", "int"]}
{"i": "4769828521902080", "t": "Create a SQL-like language parser that manipulates directories and files (The compiler/parser may be created in any other language).\rTo summarize, I want you to create a \"file and directory manipulation language\" with the following rules/syntax (you may create another commands):\r CREATE DIR <path>\r CREATE FILE <name> IN <path> [WITH <data>]\r\t'WITH' insert the <data> in the file on the fly, but it's optional\r GET DATA FROM <path/to/file> \r Examples on how this language may be used:import FDML\r\n\r\nex = \"Hey guys\"\r\n\r\ndata = FDML.get('GET DATA FROM \"./path/to/file\"');\r\n\r\nFDML.statement(\"\"\"CREATE DIR \"./imgs\";\r\n\t\t  CREATE FILE \"test.txt\" IN \"./path/to/dir\"\"\")\r\n\r\nFDML.statement('CREATE FILE \"welcome.txt\" IN \"./path/to/dir\" WITH \"{}\"'.format(ex))\r\n\r\nprint(data)Or those commands can be run in a shell:\r > fdml \"CREATE DIR './dir'\"\r> /dir was created!", "k": ["sql-like language parser", "create file", "create dir dir", "create dir", "create"]}
{"i": "6164718740832256", "t": "DropBox Dec 2017\rCongrats to Brian landing @DropBox\r Dropbox always has the most responsive HR and gives review on the interview within a week. The canteen is also one of the best in Bay Area.\r  Phone\uff1a\rLC: game of life\rWhat if the board is huge? \rStore in disk \rwith bitmap\rLoad into memory, process and write to disk row by row\r Visit AONECODE.COM for private lessons by FB, Google and Uber engineers\r Our ONE TO ONE class offers\rSYSTEM DESIGN Courses (highly recommended for candidates of FB, LinkedIn, Amazon, Google & Uber etc.) \rALGORITHMS (conquer DP, Greedy, Graph, Advanced Algos & Clean Coding), \rlatest interview questions sorted by companies,\rmock interviews. \r Members get hired from G, U, FB, Amazon, LinkedIn, MS and other top-tier companies after weeks of training. \r Email us aonecoding@gmail.com with any questions. Thanks!\r Onsite\uff1a\rRound 1\uff1a\rGiven an array of byte and a file name, find if the array of byte is in file.\rSolution: Rolling hash\r Round 2\uff1a\rGiven an Iterator of some photo with IDs, find the top K most hit photo IDs.\r Follow up: What if the input is from a stream? When iterator reaches the end, moments later new hits can be added to the iterator. Modify code for this scenario.\r Lunch was great. \rThen came a demo round. Discussed Dropbox Paper", "k": ["congrats to brian", "brian landing", "dropbox dec", "bay area", "dec"]}
{"i": "5605045579022336", "t": "You are given a binary tree in which each node contains an integer value.\rFind the number of paths that sum to a given value.\rThe path does not need to start at root, but need to end at a leaf, and it must go downwards (traveling only from parent nodes to child nodes).\r/**\r * Definition for a binary tree node.\r * public class TreeNode {\r *     int val;\r *     TreeNode left;\r *     TreeNode right;\r *     TreeNode(int x) { val = x; }\r * }\r */\rclass Solution {\r    public int pathSum(TreeNode root, int sum) {\r    }\r}", "k": ["binary tree", "treenode", "int", "binary", "tree"]}
{"i": "6299149875019776", "t": "Give a bunch of rectangles, randomly return a point within the rectangle, the probability to be proportional to the size of the rectangle.\r  Follow up1: If you want to repeatedly call the function to generate random points how to do.\r  Follow up2: If the rectangles overlap how to do?", "k": ["give a bunch", "randomly return", "generate random points", "follow", "return a point"]}
{"i": "5382257572315136", "t": "A smart-set is a set of distinct numbers in which all the elements have the same number of 1s in their binary form. The set of all smallest elements from each smart-set \rthat can be formed from a given array of distinct positive numbers is known as the smartest-set.\r So given an array of distinct numbers, outline the elements of the smartest-set in ascending sorted order.\rInput Format\r The first line of input consists of an integer t. This is the number of test cases. For each test case, \rthe first line of input contains an integer n. Here n is the number of elements in the array. The next line contains n space separated distinct integers which are the elements \rof the array.\r Output Format\r The output will space separated integer elements of the smartest-set in ascending order.\r Constraints\r 0 < t < 1000 (This is the number of test cases \r2 < n < 10000 (This is the number of integer elements of the array) \r1 < Xi < 100000 (This is the size of each element of the array)\rPython coding", "k": ["distinct numbers", "elements", "number", "binary form", "array"]}
{"i": "6506402179710976", "t": "As clients search for the compressed posting of companions movement. Who is very certain a genuine proprietor is sign through the record as the trickster after hacking one's record peep to the next record and recover access to that one too. There are sure things that should be seen through various verticals and same applies for this situation too. Facebook support number is the best way get this doubt solved.", "k": ["companions movement", "clients search", "compressed posting", "posting of companions", "movement"]}
{"i": "5107602466799616", "t": "We have 4 swimmers A,B,C,D with their records in 4 types of swimming races i.e Freestyle, Frontstroke , Backstroke and Butterffly respectively.The data is given as 4 arrays each for one player where each element in the array represents their time in particular race.\rWe have to select these players for a relay race such that the total time is minimum.", "k": ["butterffly respectively.the data", "backstroke and butterffly", "butterffly respectively.the", "types of swimming", "respectively.the data"]}
{"i": "5742734982774784", "t": "Given an extremely large file that contains parenthesis, how would you say that the parenthesis are balanced?\r The file cannot fit in the memory. How would you process the file and how would you store the intermediate results.\r Walk me through the entire algorithm.Examples: \r\n{[()]}, {[](){}}, [] are some valid examples.", "k": ["extremely large file", "extremely large", "parenthesis are balanced", "large file", "parenthesis"]}
{"i": "6236056805441536", "t": "Magical binary strings are non-empty binary strings if the following two conditions are true: \rThe number of 0's is equal to the number of 1's. \rFor every prefix of the binary string, the number of 1's should not be less than the number of 0's. \rA magical string can contain multiple magical substrings. If two consecutive substrings are magical, then we can swap the substrings as long as the resulting string is still a magical string. Given a magical binary string, str, perform zero or more swap operations on its consecutive magical substrings such that the resulting string is aslexicographically large as possible. Two substrings are considered to be consecutive if the last character of the first substring occurs exactly one index before the first character of the second substring. \r ----- \r Input Format \ra single binary string, str. \r Constraints \rIt is guaranteed that str is a binary string of 1's and 0's only. \r1 \u2264 length(str) \u2264 50 \rIt is guaranteed that str is a magical string. \r Output Format \rFind a string denoting the lexicographically largest magical string that can be formed from str. \r Sample Input 0 \r11011000 \r Sample output \r11100100 \r Explanation of sample \rGiven the magical string str = 11011000, we can choose two consecutive magical substrings, 1100 and 10, to swap such that the resultant string, str' = 11100100, is the lexicographically largest possible magical string possible. Thus, we return the value of str', which is 11100100, as our answer.", "k": ["magical", "string", "magical string", "str", "number"]}
{"i": "5639128023564288", "t": "Given a matrix of each element is the height of the location, the side of the matrix has a river height h, water diffuse matrix results,\rFollow up If there is a place where there is not drowning a person and a dog, people want to reach the dog's position without water, the river is highly uncertain,\rAsk the maximum height h such that the number of steps taken by a person is less than or equal to a given k. Traverse the height h,", "k": ["diffuse matrix results", "water diffuse matrix", "matrix results", "drowning a person", "highly uncertain"]}
{"i": "6564515503144960", "t": "Question: Given a sorted integer array, return sum of array so that each element is unique by adding some numbers to duplicate elements so that sum of unique elements is minimum.\r I.e., if all elements in the array are unique, return the sum. If some elements are duplicates, then increment them to make sure all elements are unique so that the sum of these unique elements is minimum.\r Some examples:\r input1[] = { 2, 3, 4, 5 } => return 19 = 2+3+4+5 (all elements are unique, so just add them up)\rinput2[] = { 1, 2, 2 } => return 6 = 1+2+3 (index 2 is duplicate, so increment it)\rinput3[] = { 2, 2, 4, 5 } => return 14 = 2+3+4+5 (index 1 is duplicate, so increment it)", "k": ["sorted integer array", "elements", "sorted integer", "adding some numbers", "return"]}
{"i": "4938047090065408", "t": "Mr. Octopus has recently shut down hisfactory and want to sell off his metal rods to a local businessman.\rIn order to maximize profit, he should sellthe metal of same size and shape. If he sells  metal rods of length ,he receives N x L xmetal_price. The remaining smallermetal rods will be thrown away. To cut the metal rods, he needs to pay cost_per_cut for every cut.\rWhat is the maximum amount of money Mr.Octopus can make?\rInput Format \rFirst line of input contains cost_per_cut \rSecond line of input contains metal_price \rThird line contains L, the number of rods Mr. Octopus has,followed by L integers in each line representinglength of each rod.\rOutput Format \rPrint the result corresponding to the testcase.\rConstraints \r1 <= metal_price, cost_per_cut <= 1000 \r1 <= L <= 50 \rEach element of lenghts will lie in range [1, 10000].\rSample Input#00\r1\r10\r3\r26\r103\r59\rSample Output#00\r1770\rExplanation Here cuts are pretty cheap. So we can make largenumber of cuts to reduce the amount of wood wasted. Most optimal lengths ofrods will be . So we will cut  pieces of length  from  rod,and throw peice of length  from it. Similarly we will cut  piecesof length  from  rod and throw away a piece of length .From  rod, we will cut  pieces of length  andthrow a piece of length . So in total we have  pieces of length  andwe have made  cuts also. So total profit is\rSample Input#01\r100\r10\r3\r26\r103\r59\rSample Output#01\r1230", "k": ["length", "local businessman", "cut", "metal", "recently shut"]}
{"i": "5507240852193280", "t": "given two strings a and b. \rprint out the minimum number of flips of the characters in a such \rthat a is an anagram of b.", "k": ["minimum number", "number of flips", "strings", "print", "minimum"]}
{"i": "4785260070961152", "t": "JSON parsing is an essential toolkit in modern web development. Whether you are on the client side or server side, these methods need to be fast, efficient and dependable. But what if one day...\rSuddenly, all of the JSON parser libraries went missing.\rYou have been called upon to save us all from impending doom.\rPlease re-implement the standard json parsing methods in your favorite language and restore the world to it's natural order.\r Subproblem #1\rWrite a function, dictionaryToJson to convert a dictionary into a string.\rFor example, assuming you have dictionary like: dict(\u201ca\u201d: \u201capple\u201d, \u201cb\u201d: dict(\u201cb\u201d: \u201cblueberry\u201d, \u201cc\u201d: \u201ccranberry\u201d)), the key field is always a string type, the value field could be a string type or a nested dictionary type. And the output would be \"{a:apple,b:{b:blueberry,c:cranberry}}\"\r Subproblem #2\rWrite a reverse function, jsonToDictionary to convert a string into a dictionary.\rConvert a string into the dictionary. e.g., given the input of \u201c{a:apple,b:{b:blueberry,c:cranberry}}\u201d, output dict(\u201ca\u201d: \u201capple\u201d, \u201cb\u201d: dict(\u201cb\u201d: \u201cblueberry\u201d, \u201cc\u201d: \u201ccranberry\u201d)).\rThe names and values only contains letters. You can assume that there is no error in the input. You should not use regular expressions.", "k": ["modern web development", "web development", "essential toolkit", "toolkit in modern", "modern web"]}
{"i": "4824830946836480", "t": "To a binary array, if you want to move 1 to the array side, 0 to the other side, Can only swap two adjacent elements each time, ask the least number of swap Why? For example, the number of min swaps for [0, 1, 1, 0, 0] is 2 (01100 -> 10100 -> 11000)", "k": ["elements each time", "array side", "adjacent elements", "binary array", "side"]}
{"i": "5286399270977536", "t": "balanceSum, return to the array to meet the minimum sum equal to the minimum index. Title conditions are all positive numbers, the array length> = 3, there must be solution. If a = [1,2,1,3] returns 3 because a [1] + a [2] = a [4]", "k": ["minimum sum equal", "minimum index", "meet the minimum", "minimum sum", "sum equal"]}
{"i": "5254834214141952", "t": "Give a string that outputs the largest alphabetical order of all consecutive substrings For example, \"ab\", substring has {\"a\", \"ab\", \"b\"}, output \"b\"", "k": ["largest alphabetical order", "give a string", "largest alphabetical", "alphabetical order", "consecutive substrings"]}
{"i": "5388615466090496", "t": "stream reading number, with timestamp, Design data structure to know the minimum value of the past year, the average,", "k": ["design data structure", "stream reading number", "design data", "stream reading", "reading number"]}
{"i": "5606014094147584", "t": "sorting nested dictionaries\rgive a \r{b: {cb: cranberry, bb: blueberry} a: apple, c: cherry}\r {a: apple, b: {bb: blueberry, cb: cranberry}, c: cherry}\r To sort the key output, if there is nested dictionaries, but also to sort", "k": ["sorting nested dictionaries", "nested dictionaries give", "nested dictionaries", "key output", "sorting nested"]}
{"i": "5366149834342400", "t": "If xi<xj,yi<yj, we say (xj,yj)dominates(xi,yi). Given a set of number pairs (xi,yi), \rhow many indomitable pairs are there?", "k": ["xi,yi", "xj,yi", "xj,yj", "dominates", "pairs"]}
{"i": "6345421973618688", "t": "Mark likes to listen to music while travelling. His iPod\u2122 contains \rN songs and he wants to listen to L (not necessarily different) songs during \ra trip. So he creates a playlist such that:\r\u2022 Every song is played at least once.\r\u2022 A song can be played again only if at least K other songs have been played\r Mark wants to know how many different playlists are possible. Can you help Mark determine this number? \r As the number can be very large, \rdisplay number modulo 1,000,000,007.\r You are given N, K and L.", "k": ["music while travelling", "listen to music", "mark", "listen", "travelling"]}
{"i": "5320653514211328", "t": "Given a List determine if contiguous elements of the List sum to an input number.  For example:  Array/List [6 5 3 2 1 7], and input number 8.  The numbers 5 + 3 = 8.  Or suppose an input number 10, the elements of the list 2 + 1 + 7 = 10.", "k": ["input number", "list", "determine if contiguous", "list determine", "list sum"]}
{"i": "4943655562379264", "t": "Given number of pipes 1..n, Find two largest pipes of maximum length possible.\rEx: input - 1,2,3,4,6\rOutput - The maximum length possible is 8.\rPipe1 - 2,6\rPipe2 - 1,3,4", "k": ["find two largest", "find", "maximum length", "largest pipes", "output"]}
{"i": "4825165685850112", "t": "How to create account with Sbcglobal, i am currently in United Kingdom, then how to create email account.", "k": ["united kingdom", "create email account", "account with sbcglobal", "create email", "email account"]}
{"i": "5578066473517056", "t": "Given the width, height, start point, end point of the grid, and a list of points, you have to go through these points, ask how many paths are there from the start point to the end point, you can only move from (i, j) down and right.", "k": ["start point", "end point", "point", "start", "end"]}
{"i": "6479366971195392", "t": "The design of two functions, cyclecount (num, mod), cycleHistogram (low, high, mod). Probably, cyclecount (num, mod) do digits square sum mod operation. For example mod (12), mod (5) -> square (1) + square (2) mod 5 = 0 -> square (0) mod 5 = 0. Stop return 2. Finished digits square sum after take mod, mod and before the formation of a repetitive cycle. Return form the size before the cycle. CycleHistogram (low, high, mod) will give a [low, high]. Then return a histogram which stores the number of [low, high] inside the cycle size 1,2,3,4,5.", "k": ["mod", "square", "low", "high", "digits square sum"]}
{"i": "4802431887081472", "t": "I was given this question recently in an interview.. There are three threads and a counter that will increase from 1 to 100. Catch is that thread 1 increments counter from 1 to 20. Thread 2 increments from 21 to 80. Thread 3 increments from 81 to 100.", "k": ["question recently", "increments", "interview.", "thread", "question"]}
{"i": "4594969128992768", "t": "Bob And GCD\rBob has an array A of size N. He doesn't like arrays in which the GCD of all elements is not K. He can perform multiple operations on an array. In each operation, he can either increase or decrease the value of an element by 1. \rYou have to tell the minimum operation Bob will take to make GCD of all elements in an array equal to KK ?\rGCD here is Greatest Common Divisor.\rInput Format\rThe first line contains T, the number of test cases.\rFor Each Testcase : \rThe first line contains 2 integers - K and N respectively, separated by a space.\rThe second line contains N integers, separated by a space, in order of their position in array.\rInput Constraints\r1\u2264T\u226410\r1\u2264N\u226410^6\r1\u2264A[i]\u226410^6\r1\u2264K\u226410^6\rOutput Format\rFor each test case, print minimum number of operations Bob take in a new line.\rSample Input\r1\r5 3\r4 5 6 \rAns - 2", "k": ["gcd", "greatest common divisor", "gcd bob", "bob", "array"]}
{"i": "5509762803302400", "t": "What is the benefit behind using Sbcglobal Email?", "k": ["sbcglobal email", "email", "sbcglobal", "benefit"]}
