{"i": "5659831781294080", "t": "Get total number of all the departments of each employees", "k": ["total number", "employees", "total", "number", "departments"]}
{"i": "5183998058823680", "t": "Given a list of files. Return all the unique lines from all files.", "k": ["files", "list of files", "list", "return", "unique lines"]}
{"i": "5723929873219584", "t": "Given an input string E4N4S4W calculate a robot position", "k": ["input string", "calculate a robot", "robot position", "string", "calculate"]}
{"i": "5652136609185792", "t": "You've escaped Commander Lambda's exploding space station along with numerous escape pods full of bunnies. But - oh no! - one of the escape pods has flown into a nearby nebula, causing you to lose track of it. You start monitoring the nebula, but unfortunately, just a moment too late to find where the pod went. However, you do find that the gas of the steadily expanding nebula follows a simple pattern, meaning that you should be able to determine the previous state of the gas and narrow down where you might find the pod.\r From the scans of the nebula, you have found that it is very flat and distributed in distinct patches, so you can model it as a 2D grid. You find that the current existence of gas in a cell of the grid is determined exactly by its 4 nearby cells, specifically, (1) that cell, (2) the cell below it, (3) the cell to the right of it, and (4) the cell below and to the right of it. If, in the current state, exactly 1 of those 4 cells in the 2x2 block has gas, then it will also have gas in the next state. Otherwise, the cell will be empty in the next state.\r For example, let's say the previous state of the grid (p) was:\r.O..\r..O.\r...O\rO...\r To see how this grid will change to become the current grid (c) over the next time step, consider the 2x2 blocks of cells around each cell.  Of the 2x2 block of [p[0][0], p[0][1], p[1][0], p[1][1]], only p[0][1] has gas in it, which means this 2x2 block would become cell c[0][0] with gas in the next time step:\r.O -> O\r..\r Likewise, in the next 2x2 block to the right consisting of [p[0][1], p[0][2], p[1][1], p[1][2]], two of the containing cells have gas, so in the next state of the grid, c[0][1] will NOT have gas:\rO. -> .\r.O\r Following this pattern to its conclusion, from the previous state p, the current state of the grid c will be:\rO.O\r.O.\rO.O\r Note that the resulting output will have 1 fewer row and column, since the bottom and rightmost cells do not have a cell below and to the right of them, respectively.\r Write a function answer(g) where g is an array of array of bools saying whether there is gas in each cell (the current scan of the nebula), and return an int with the number of possible previous states that could have resulted in that grid after 1 time step.  For instance, if the function were given the current state c above, it would deduce that the possible previous states were p (given above) as well as its horizontal and vertical reflections, and would return 4. The width of the grid will be between 3 and 50 inclusive, and the height of the grid will be between 3 and 9 inclusive.  The answer will always be less than one billion (10^9).", "k": ["commander lambda exploding", "escaped commander lambda", "commander lambda", "lambda exploding space", "escaped commander"]}
{"i": "4808737102495744", "t": "Write a program to print the list of the maximum repeating number from an array.\rExample: \rInput:: a[]={1, 2, 1, 0, 5, 2, 4, 2, 3, 0, 1, 3, 2, 4}\routput: 2, 1, 0, 4, 3, 5", "k": ["maximum repeating number", "write a program", "program to print", "print the list", "maximum repeating"]}
{"i": "5646979695640576", "t": "Was asked to implement a code profiler, which takes a piece of code and provides the run time of a particular function in the code .\rIf a function is internally calling other functions, we just want to see the time spent executing the original function, and not the overall time.", "k": ["time spent executing", "asked to implement", "internally calling", "spent executing", "executing the original"]}
{"i": "5141506538078208", "t": "write a  function that randomly return only odd number in range [min, max)\rpublic int getRandomOdd(int min, int max){}", "k": ["public int getrandomodd", "write a function", "number in range", "function that randomly", "randomly return"]}
{"i": "5090918869762048", "t": "Given array of length n, having element 0 to n-1.\ryou are allowed to swap adjacent element only if Absolute difference of two element is equal to 1.\r Is it possible to sort array.\rIf yes print sorted output.", "k": ["absolute difference", "element", "swap adjacent element", "array of length", "length"]}
{"i": "5189135645016064", "t": "For a string chemical formula like \u201cC6H2(NO2)3CH3\u201d, and output a map with key as element and value as its count.\relement can have two chars, for example Fe2(SO4)3\rpublic HashMap<Character, Integer> getCount(String chemicals){\r}", "k": ["string chemical formula", "output a map", "map with key", "chemical formula", "string chemical"]}
{"i": "5185036367167488", "t": "You are given an unsorted binary array.\rEx [0 1 1 0 0 1 0 1 1 1 1 0 0 1 0 0 1]\rand a number K, which represents the number of swap operations allowed on this binary array.\ryou need to find out the maximum length continuous subarray that can be generated using K many swaps.\rEx if K = 3 in above case\r[0 1 1 0 0 1 0 1 1 1 1 0 0 1 0 0 1] => [0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 1] => [0 1 1 0 1 1 1 1 1 1 1 0 0 0 0 0 0] => [0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0]\rso the answer is 9.", "k": ["unsorted binary array", "binary array", "unsorted binary", "swap operations allowed", "array"]}
{"i": "5715358729109504", "t": "You are given a binary matrix whose each row is sorted. that means each row will have zeros at front and ones at the back. You need to find out the row which contains a maximum number of ones.\rEx :[0 0 0 0 0 0 0 1 1 1 1 1]\r\n[0 0 0 0 1 1 1 1 1 1 1 1]\r\n[0 0 0 0 0 0 1 1 1 1 1 1]\r\n[0 0 0 0 0 0 0 0 0 1 1 1]\r\n[0 0 0 0 0 0 0 1 1 1 1 1]\r\n[0 0 0 0 1 1 1 1 1 1 1 1]Ans : second row and sixth with 8 ones. you will print [2,8] and [6,8];\r Update : Required complexity O(M+N)  + O(1) only.", "k": ["binary matrix", "row", "row is sorted.", "back", "maximum number"]}
{"i": "5681714975211520", "t": "Given an array of unique numbers. Find the number of pairs that make up the difference. This must be solved in under O(N^2)function getPairs(int[] array, int k){\r\n\tHashMap<Integer,Integer> values = new HashMap<Integer,Integer>();\r\n      \tfor(int i = 0; i < array.length; i++){\r\n      \t\tif(!values.containsKey(array[i])){\r\n\t\t\tvalues.put(array[i],1);\r\n                }\t\r\n      \t}\r\n\tint pairs = 0;\r\n        for(int i = 0; i < array.length; i++){\r\n\t\tint diff = array[i] - k;\r\n\t\tif(values.containsKey(diff)){\r\n\t\t\tpairs++;\r\n\t\t}\r\n\t}\r\n\r\n\treturn pairs;\r\n}This will give O(N) time. O(N) Space", "k": ["int", "unique numbers", "array", "pairs", "integer,integer"]}
{"i": "5643438226669568", "t": "A \"derangement\" of a sequence is a permutation where no element appears in its original position. For example ECABD is a derangement of ABCDE, given a string, may contain duplicate char, please out put all the derangement\rpublic List<char[]> getDerangement(char[]){}", "k": ["original position", "derangement public list", "public list", "char", "derangement"]}
{"i": "5637204350074880", "t": "Design a system to monitor services (like when they were down/ CPU time) etc.", "k": ["cpu time", "design a system", "monitor services", "cpu", "system to monitor"]}
{"i": "5752085598437376", "t": "Design a system for dashboard that effectively shows almost real time data.", "k": ["real time data", "design a system", "time data", "system for dashboard", "dashboard that effectively"]}
{"i": "5741637822054400", "t": "Implement a stack that in addition to push and pop has a function that returns the min value of the stack. \r I came up with a O(logn) solution, but he wanted a O(1) for the whole algorithm.", "k": ["addition to push", "push and pop", "function that returns", "returns the min", "implement a stack"]}
{"i": "5689420884738048", "t": "Problem statement\rGiven a set of hotels and its guests reviews, sort the hotels based on a list of words specified by a user. The criteria to sort the hotels should be how many times the words specified by the user is mentioned in the hotel reviews.\r Input\rThe first line contains a space-separated set of words which we want to find mentions in the hotel reviews.\rThe second line contains one integer M, which is the number of reviews.\rThis is followed by M+M lines, which alternates an hotel ID and a review belonging to that hotel.\r Output\rA list of hotel IDs sorted, in descending order, by how many mentions they have of the words specified in the input. If the count is same, sort according to the hotel IDs.", "k": ["problem statement", "hotel", "words", "hotel reviews", "hotels based"]}
{"i": "5639284993294336", "t": "Write a Program in Java, You have an Employee class |\rclass Employee{\rString name;\rInteger id,\rEmployee manager\r}\rEach employee has a manager and the manager of CEO is null. Find all direct and indirect reportees of a manager.\rEg. Say Employee e1 reports to CEO, \re2 and e3 reports to e1,\re4 and e5 reports to e2,\re6 reports to e3.\rThen by giving e1 as input, output should be e2, e3, e4, e5 and e6.", "k": ["program in java", "write a program", "employee", "java", "string"]}
{"i": "5729688686166016", "t": "three sum with duplicate, pirnt all indexes, for example:\r0    2  -2  -2 \r(0)(1)(2)(3)\rprint  (0, 1, 2) (0, 1, 3)\rcan you do it use n^2 (or less) time complexity with as less space as possible?\rpublic List<List<Integer>> threeSum(int[] nums) {}", "k": ["pirnt all indexes", "sum with duplicate", "time complexity", "public list", "list"]}
{"i": "5746831511257088", "t": "Given an integer array which represents the heights of adjacent vertical bars standing on the ground.\rThe width of each bar is 1. Now you have to pick two bars and remove all the remaining such that when\rrain falls the water collected between two bars is maximum. Note that the distance between bars\rremains the same after removing the remaining bars.\r eg:\r1.  [10,5,6,12,14] ans: 30 (10*3)\r2.  [3 16 10 5 6 12 20 18] ans: 80 (16*(number of integers between 16 and 18)).", "k": ["vertical bars standing", "adjacent vertical bars", "array which represents", "represents the heights", "heights of adjacent"]}
{"i": "5752438591062016", "t": "Find the coordinates of the rectangle which is parallel to   axis and has minimum area.", "k": ["find the coordinates", "minimum area", "parallel to axis", "find", "area"]}
{"i": "5688233661825024", "t": "Suppose you have a stream of (timestamp, tag) events. You need to filter this stream (online), leaving only events with tags that haven't been already encountered in the last X seconds.", "k": ["timestamp", "suppose", "online", "stream", "events"]}
{"i": "5737674640982016", "t": "Given an array of integers:\r1. rearrange the array such that all non-zero members appear on the left of the array (order is not important)\r2. return the number of non-zero members\r e.g. [1,2,0,5,3,0,4,0] => [1,2,5,3,4,0,0,0] and return 5. The non-zero array members can be in any order.", "k": ["array", "non-zero", "members", "non-zero members", "integers"]}
{"i": "6264177501929472", "t": "People enter and leave a room over the course of a day. Each person has a badge with a unique integer id, which is logged by the security system on enter/exit. Each log entry is an enter record (\u201cE <id>\u201d) or and leave record (\u201cL <id>\u201d) for the given badge id.\r\tThe room is empty at the beginning and ending of the day, and there are no other \tways into or out of the room.\rE: Enters the room\rL: Leaves the room\r Well formed log:\rE 111\r \tE 222\r\tL 111\r\tE 111\r\tL 222\r\tL 111\r  \tQuestion: You have a log and write a function to check is it the well formed log or not.", "k": ["people enter", "room", "enter", "log", "leave"]}
{"i": "5138277595086848", "t": "One question containing multiple questions\r1) Define the structure of a function which takes an array of size n as input and returns True or False.\r2) Write a function which takes an array as input and returns a string containing all the elements separated by a comma.\rEx : [0, -45, 9, 10] => \"0,-45,9,10\";\r3) Write a function which takes two arrays ass input, and returns minimum common element in them.\rEx : [0, -90, 45, 10, 4], [4, 8, 90, 45] => 4\r4) Now let's say, the function takes an array of arrays, and each array is sorted. now, returns their first common element.\rEx : [0, -90, 45, 10, 4], [4, 8, 90, 45], [-1, -3, -5, -7, 10, 4], [24, 35, 78, -90, 56, 4] => 4", "k": ["true or false", "define the structure", "returns true", "write a function", "multiple questions"]}
{"i": "5749641762045952", "t": "You are given an array of integers both negative and positive.\rPrint the maximum continuous sum of the array and if all the elements are negative, print the smallest of them.\rEx : [-20, -5, -2, -9] :> -2(-2)\rEx : [20, -19, 6, 9, 4] :-> 20(20)\rEx : [10, -3, 4, -2, -1, 10] -> 18 (10, -3, 4, -2, -1, 10)\r Thanks velu007 for pointing out the mistake", "k": ["negative and positive", "maximum continuous sum", "print the maximum", "print the smallest", "integers both negative"]}
{"i": "5712910664859648", "t": "Define a graph using Adjacency list where node and graphs are different entities, for example, Node is a struct/class and graph is set of nodes.\r The graph is an acyclic directed graph(may be a forest not necessarily connected).\r Write an assignment copy constructor for this graph.\rPlease note that the copy constructor should create a new copy of the graph, including all its edges and vertices. Interviewer called this deep copy.", "k": ["adjacency list", "node", "graph", "adjacency", "list where node"]}
{"i": "5640208679698432", "t": "Which types of tests generally make extensive use of mocks and stubs?\r (i) Unit tests\r (ii) Functional tests\r (iii) Integration tests\r  (ii) only\r(i) and (ii) correct\r(i) and (iii)\r(ii) and (iii)", "k": ["generally make extensive", "tests generally make", "mocks and stubs", "generally make", "make extensive"]}
{"i": "5666299800715264", "t": "Simplecov shows results for which type of code coverage?\r  S0 (Method coverage) incorrect\rS1 (Call coverage)\rC0 (Statement coverage)\rC1 (Branch coverage)", "k": ["simplecov shows results", "simplecov shows", "shows results", "type of code", "code coverage"]}
{"i": "5714063595143168", "t": "By convention over configuration, where should movie_spec.rb (specs for the Movie model) be stored?\r  spec/all_tests/models/model_spec.rb\rapp/spec/model_spec.rb incorrect\rspec/models/model_spec.rb\rspec_tests/model_spec.rb", "k": ["convention over configuration", "movie model", "spec.rb", "model", "movie"]}
