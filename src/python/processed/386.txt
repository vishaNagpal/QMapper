{"i": "13058664", "t": "There is an array of numbers\r>> the adjoining elements of array can be either -1 or +1.\r>> if a value is given then what is good way to find it's position in the array.", "k": ["adjoining elements", "numbers", "array", "array of numbers", "adjoining"]}
{"i": "13031690", "t": "How we perform counting inversion(means if(i<j) then a[i]>a[j]) using unix commands ?\rGiven:text file containg 1,00,000 distinct numbers from (1-1,00,000) randomly.", "k": ["text file containg", "perform counting inversion", "counting inversion", "unix commands", "text file"]}
{"i": "13053662", "t": "suppose we are getting an infinite binary stream of characters then after any point of time you need to print whether the no is divisible by 3 or not, how will you do that?", "k": ["infinite binary stream", "infinite binary", "binary stream", "stream of characters", "point of time"]}
{"i": "13054661", "t": "Say there is a string hllsacefgdbdfdfdffd\rYou need to find the biggest string that has all consecutive characters\rConditions\rconsecutive string might have jungled words i.e acb is also continous or bcad is also continuous", "k": ["consecutive characters conditions", "characters conditions consecutive", "conditions consecutive string", "characters conditions", "conditions consecutive"]}
{"i": "13027678", "t": "How to find min-weight (coin) in a given set of '10' distinct weights (coins) in minimum number of weighing's if provided with a balance. (no labels shown on coin resembling the weight). Generalize for 'n' distinct weights.", "k": ["distinct weights", "find min-weight", "minimum number", "number of weighing", "weighing if provided"]}
{"i": "13044670", "t": "Lambda expression .Where() is more efficient than foreach loop?", "k": ["lambda expression", "foreach loop", "efficient than foreach", "lambda", "expression"]}
{"i": "13027676", "t": "Lambda expression .Where() is more efficient than foreach loop?", "k": ["lambda expression", "foreach loop", "efficient than foreach", "lambda", "expression"]}
{"i": "13023676", "t": "Lambda expression .Where() is more efficient than foreach loop?", "k": ["lambda expression", "foreach loop", "efficient than foreach", "lambda", "expression"]}
{"i": "13027675", "t": "Lambda expression .Where() is more efficient than foreach loop?", "k": ["lambda expression", "foreach loop", "efficient than foreach", "lambda", "expression"]}
{"i": "13027671", "t": "In a dial pad(similar to phone dial pad) where if 2 corresponds to 'abc' and 3 corresponds to 'def' etc. Write a program to form all possible and meaningful words for the given number.\rExample: \rif 2 is pressed possible words are a,b,c. But 'a' is only meaningful word. Hence print 'a' and\rif 23 is pressed. The possible words are going to be ad,ae,af,bd,be,bf,cd,ce,cf. 'be' is the only meaningful word. So, print 'be'. \r We are given access to a dictionary. \r (Edited now)", "k": ["phone dial pad", "dial pad", "phone dial", "similar to phone", "pad"]}
{"i": "13025666", "t": "Why do you need Synchronization and how it works? Working of Implicit and explicit wait() and notify", "k": ["working of implicit", "synchronization", "implicit and explicit", "works", "explicit wait"]}
{"i": "13028693", "t": "working of TCP/IP proctocol", "k": ["working of tcp", "tcp", "working", "proctocol"]}
{"i": "13027668", "t": "Count number of higher bits(1) in an integer alongwith its complexity? improvise it", "k": ["count number", "higher bits", "alongwith its complexity", "number of higher", "integer alongwith"]}
{"i": "13027667", "t": "static synchronized method 1()\r{\r    counter++;\r}\r synchronized method 2()\r{\r    counter++;\r}\r use only one counter variable to count the number of method calls to method 1 and method 2?", "k": ["static synchronized method", "static synchronized", "synchronized method", "variable to count", "count the number"]}
{"i": "13042661", "t": "Given a binary tree which is huge and can not be placed in memory, how do you check if the tree is a mirror image.", "k": ["mirror image", "binary tree", "memory", "image", "tree"]}
{"i": "13041661", "t": "Given a book containing 100's of words., If a word is repeated, delete it. Process such that there are no repetitive words.", "k": ["word is repeated", "words.", "repeated", "delete", "book"]}
{"i": "13024686", "t": "Given an ebay site model., you have to deal with auctioning of a particular item. Design the billing & auctioning system of the same.", "k": ["ebay site model.", "site model.", "ebay site", "model.", "item"]}
{"i": "13017708", "t": "There is a sequence {a1, a2, a3, a4, ..... aN}. A run is the maximal strictly increasing or strictly decreasing continuous part of the sequence. Eg. If we have a sequence {1,2,3,4,7,6,5,2,3,4,1,2} We have 5 possible runs {1,2,3,4,7}, {7,6,5,2}, {2,3,4}, {4,1} and {1,2}.\r Given four numbers N, M, K, L. Count the number of possible sequences of N numbers that has exactly M runs, each of the number in the sequence is less than or equal to K and difference between the adjacent numbers is less than equal to L.", "k": ["sequence", "numbers", "runs", "strictly", "equal"]}
{"i": "13028679", "t": "Arrange the following functions in increasing order of growth rate. ie. if g(n) follows f(n) in your list, then f(n) is necessarily O(g(n)).\r a)2^log(n)\rb)2^(2^log(n))\rc)n^(5/2)\rd)2^(n^2)\re)(n^2)log(n)", "k": ["functions in increasing", "increasing order", "order of growth", "growth rate.", "log"]}
{"i": "13031681", "t": "3-way-mergesort : Suppose instead of dividing in half at each step of the mergesort, you divide into thirds, sort each third, and finally combine all of them using a three way merge. What is the overall running time of this algorithm ? (Hint - Note that the merge step can still be implemented in O(n) time.)\rn\rnlog(n)\rn^2(log(n))\rn((log(n))^2)", "k": ["dividing in half", "finally combine", "merge step", "suppose", "log"]}
{"i": "13017705", "t": "k-way-mergesort. Suppose you are given k sorted arrays, each with n elements, and you want to combine them into a single array of kn elements. Consider the following approach. Using the merge subroutine in which you merge the first 2 arrays, then merge the 3rd given array with this merged version of the first two arrays, and so on until you merge in the final (kth) input array. What is the time taken for this strategy, as a function of k and n ? (Optional: can you think of a faster way to do the k-way merge procedure ?)\r\u03b8(n^2(k))\r\u03b8(n(k^2))\r\u03b8(nk)\r\u03b8(nlog(k))", "k": ["merge", "elements", "arrays", "array", "optional"]}
{"i": "13028678", "t": "Assume again two (positive) functions f and g such that f(n)=O(g(n)). Is 2f(n)=O(2g(n)) ? (Multiple answers may be correct.)\r 1.Never\r2.Sometimes\r3.Yes if f(n)\u2264g(n) for all sufficiently large n\r4.Always", "k": ["multiple answers", "positive", "assume", "functions", "multiple"]}
{"i": "12990676", "t": "You are given functions f and g such that f(n)=O(g(n)). Is f(n)*log2(f(n)c)=O(g(n)*log2(g(n))) ? (Here c is some constant >0. You can assume that f and g are always bigger than 1.\r 1.Depends on the choice of f and g\r2.True\r3.False\r4.Depends on choice of c", "k": ["functions", "choice", "constant", "assume", "bigger"]}
{"i": "13031679", "t": "Given an unsorted integer array, place all zeros to the end of the array without changing the sequence of non-zero elements. (i.e. [1,3,0,8,12, 0, 4, 0,7] --> [1,3,8,12,4,7,0,0,0])", "k": ["unsorted integer array", "non-zero elements", "unsorted integer", "changing the sequence", "sequence of non-zero"]}
{"i": "12997719", "t": "given a random array, find all the pairs that sum up to a certain value", "k": ["random array", "pairs that sum", "array", "find", "random"]}
{"i": "13028676", "t": "convert decimal to binary", "k": ["convert decimal", "decimal to binary", "convert", "binary", "decimal"]}
{"i": "13031673", "t": "how TCP/UDP sockets work", "k": ["udp sockets work", "udp sockets", "sockets work", "tcp", "udp"]}
{"i": "13030673", "t": "Given a program on fork() system call.\r #include <stdio.h>\r#include <unistd.h>\rint main()\r{\r   fork();\r   fork() && fork() || fork();\r   fork();\r    printf(\"forked\\n\");\r   return 0;\r}\rHow many processes will be spawned after executing the above program?", "k": ["system call", "fork", "include", "system", "call"]}
{"i": "13029674", "t": "Given the following code snippet:\r class A {\rpublic:\r\tvirtual void foo() = 0;\r}\r class B : public A {\r\tvoid foo(){};\r}\r Create a diagram displaying the virtual table mechanism", "k": ["virtual void foo", "virtual table mechanism", "void foo", "create a diagram", "code snippet"]}
{"i": "12997716", "t": "Given the following definition:\r class C{};\r How much space gets allocated?\rWhat methods get created?", "k": ["space gets allocated", "definition", "class", "allocated", "methods get created"]}
