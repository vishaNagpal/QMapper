{"i": "15434743", "t": "write as many test cases for this : example : 123, 1, 2,... -123, 0,...class Interview {\r\n        // input is max 3 chars\r\n       public static int convertToString(int input) throws IllegalArgumentException;\r\n}", "k": ["test cases", "class interview", "write", "throws illegalargumentexception", "interview"]}
{"i": "15430763", "t": "Write a function, that given a list of integers and an integer s,  prints any 2 numbers in the list that sum to s.\r 1, 2, 3, 4, 5  sum = 6 could print:\r1 + 5 = 6\r2 + 4 = 6\r4 + 2 = 6\r5 + 1 = 6", "k": ["write a function", "list", "list of integers", "write", "function"]}
{"i": "15430756", "t": "Given a string, find the longest substring that occurs more than once. Overlapping is allowed.", "k": ["find the longest", "longest substring", "substring that occurs", "string", "find"]}
{"i": "15424740", "t": "I have a virtual function in base class BASE and in derived class DERIVED, I have overridden the virtual function. I will create 10 object of DERIVED class.Ex: DERIVED d1,d2...d10. How many v tables are created in this scenario?", "k": ["base class base", "derived class derived", "virtual function", "base class", "class base"]}
{"i": "15435724", "t": "swap alternate bits of a given number\r eg: n=5 (0101)\r output: 10(1010)\r n=8(1000)\routput:4(0100)", "k": ["swap alternate bits", "output", "swap alternate", "alternate bits", "swap"]}
{"i": "15424726", "t": "Given  a binary tree return the level with maximum number of nodes1\r\n       / \\\r\n      2   3\r\n      /\\  /\\\r\n     4 5 6 7\r\n    /       \\\r\n   8         9", "k": ["binary tree return", "binary tree", "tree return", "return the level", "level with maximum"]}
{"i": "15434720", "t": "Append the last n nodes of a linked list to the beginning of the list\r eg: 1->2->3->4->5->6\r if n=2\r 5->6->1->2->3->4", "k": ["linked list", "list", "append", "nodes", "linked"]}
{"i": "15422727", "t": "Print the last n lines of a file in one iteration", "k": ["print", "iteration", "lines", "file"]}
{"i": "15443694", "t": "Implement Queue using stacks", "k": ["implement queue", "queue using stacks", "queue", "implement", "stacks"]}
{"i": "15421717", "t": "Given a file which contains list of function with parameters and return types (Assume parameters and return type as primitives) they can be of any order\rExample: File functions.txt contains below info\rint e=f1(a,b,c,d)\rint c=f2(a,b,d)\rf3(a,c)\rfloat d = f4()\rquestion follows as below\rWe need to implement function \rexecute(functions.txt,a,b,d) where functions.txt is the file which contains just functions info and a,b, d are input parameters of functions defined in the file. \rNow read the file and we need to determine the order of execution of function depending on the input parameter list \rwe can't execute f1 first because we have only parameters a , b and d\rf2 can be executed because we have a, b and d parameters, which gives parameter c\rnow f3 can be executed because we have parameters a and c..\rso we need to find the order and execute functions as quickly as possible (can use multi threading)\rso efficient order is \rf2 and f4 can run parallel and then f1 and f3 can be started only after completion of f2.\rWhat are the data structures we use here to solve this problem\r Consider execute function which takes always 1st parameter as filename and the rest of parameters as dynamic (similar to ... in java for dynamic parameter list)", "k": ["assume parameters", "return types", "implement function execute", "input parameter list", "info int"]}
{"i": "15435710", "t": "find the distance between 2 values in a binary search tree. Node will have value, left node and right node\rimplement the function int Distance(Node root, int val1, int val2) without recursionint Distance(Node root, int val1, int val2) {\r\nif(val1== val2) {\r\n  return 0;\r\n}\r\nwhile((root.val<val1 && root.val <val2) || (root.val >val1 && root.val2 >val2)) {\r\n   if(val1 < root.val) {\r\n       root = root.left;\r\n   } else {\r\n        root = root.right;\r\n   }\r\n   \r\n}\r\nreturn depth(root, val1) + depth(root,val2)\r\n}Note: function depth(root, val) returns the depth of sub tree. Interviewer is ok about the depth of tree functionality but he asked  me if Distance(Node root, int val1, int val2) implementation is correct. \rComplexity is O(logN)", "k": ["node root", "binary search tree", "root", "node", "root.val"]}
{"i": "15424715", "t": "Write test cases for stringreversewords(string actual)", "k": ["write test cases", "string actual", "write test", "cases for stringreversewords", "test cases"]}
{"i": "15418698", "t": "Five tree in a row and one monkey. monkey can jump left or right. find out best strategy to kill monkey. large amount of ammunition available.\rSome suggest solution by two shot at every tree and start from one end. \rI doubt it will fail!!\rDoes any strategy exist ??", "k": ["monkey", "row", "tree", "strategy", "jump left"]}
{"i": "15432707", "t": "Given a multidimensional array with only 0s and 1s, reverse the array! I guess what he meant was flip 0s to 1s and vice versa! The array could be of any dimension ex:4X4X4X4....\r (I dint get  this q's so asked for another!)", "k": ["multidimensional array", "reverse the array", "reverse", "array", "multidimensional"]}
{"i": "15434703", "t": "Given a char array   color[]={'a','b','c','d','e','f'.......'z'}\r and a random array  arr[]= {'f','a','b','b','z','a','a','a'}\r you need to sort them such that resultant array will be {'a','a','a','a','b','b','f','z'}.\r Conditions:\r1) You should use swap function.\r2) Every element may repeat minimum 5 times and maximum 26 times.\r3) 'a' can be swapped only 1 time, 'b' can be swapped max 2 times,'c' can be swapped 3 times ...... z can be swapped max 26 times.\r4) You cannot make elements of given array to 0.\r5) you should not write helper functions.\r Input will be of 100 elements each.", "k": ["char array color", "random array arr", "times", "array color", "array arr"]}
{"i": "15420704", "t": "Given a 2D binary array (2D array of 0's and 1's) with 'm' rows and 'n' columns, give an efficient algo to find area of the largest sub array(rectangle) consisting entirely of 1's.", "k": ["give an efficient", "efficient algo", "algo to find", "find area", "binary array"]}
{"i": "15423703", "t": "Which is best data structure among following for recursion? \rArray\rstack\rqueue\rlinked list", "k": ["data structure", "recursion", "data", "structure", "array stack"]}
{"i": "15432683", "t": "If have unlimited memory, how can we achieve concurrency between threads without using locks?", "k": ["unlimited memory", "achieve concurrency", "concurrency between threads", "memory", "locks"]}
{"i": "15419690", "t": "Find max depth of a binary tree", "k": ["find max depth", "find max", "binary tree", "max depth", "find"]}
{"i": "15432682", "t": "Disadvantages of locks? What is Deadlock? What is Starvation?", "k": ["disadvantages of locks", "disadvantages", "locks", "deadlock", "starvation"]}
{"i": "15434681", "t": "How would a mutex lock be implemented by the system?", "k": ["mutex lock", "lock be implemented", "system", "mutex", "lock"]}
{"i": "15416685", "t": "How is mutual exclusion done in C++?", "k": ["mutual exclusion", "mutual", "exclusion"]}
{"i": "15421683", "t": "How would you implement Garbage Collection in C++?", "k": ["implement garbage collection", "garbage collection", "implement garbage", "garbage", "collection"]}
{"i": "15421681", "t": "WAP to find the fibonnaci numbers between 0-32", "k": ["wap to find", "numbers between 0-32", "wap", "find the fibonnaci", "fibonnaci numbers"]}
{"i": "15430677", "t": "You have a cake and you have a knife,you have to cut(straight) cake into 8 parts by using knife 3 times,\rfor example cutting cake horizontally and vertically from middle you had make cake in 4 parts by using 2 times knife", "k": ["cutting cake horizontally", "times knife", "horizontally and vertically", "vertically from middle", "cutting cake"]}
{"i": "15432675", "t": "There are 500 bulbs in the hall of a palace. The switch control(with 500 switches) for these bulbs is located in another room. Unfortunately the switches are not marked with the bulb numbers. A new worker arrives. What is the minimum number of trips he has to make to the hall to know exactly which corresponds to which bulb?", "k": ["palace", "hall", "bulbs", "bulb", "switches"]}
{"i": "15423662", "t": "Suppose that we have a sorted singly linked list with integer values. For example:\r1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7\rWe want to change the pointers of this linked list so that it becomes:\r7->1->6->2->5->3->4\r I did not have enough time left to finish my code and I could not think of a good solution.", "k": ["sorted singly linked", "singly linked list", "sorted singly", "linked list", "singly linked"]}
{"i": "15388725", "t": "Write a method to compute the difference between two ranges. A range is defined by an integer low and an integer high. A - B (A \u201cminus\u201d B) is \u201ceverything in A that is not in B\u201d", "k": ["write a method", "method to compute", "compute the difference", "write", "integer high"]}
{"i": "15390700", "t": "Given N arrays with sizeof N, and they are all sorted, if it does not allow you to use extra space, how will find their common datas efficiently or with less time complexity?", "k": ["common datas efficiently", "extra space", "time complexity", "arrays with sizeof", "find their common"]}
{"i": "15382717", "t": "Imagine you have a sequence of the form 0123456789101112131415... where each digit is in a position, for example the digit in the position 5 is 5, in the position 13 is 1, in the position 19 is 4, etc.\r Write a function that given a position returns the digit in that position.\r (You could think that this sequence is an array where each cell only holds one digit so given an index return what digit is in that index, however you cannot really create an array since the sequence is infinite, you need a way to based on the index calculate the digit that goes there).\r The function has to return a single digit.\r Other examples:\r index = 100, result = 5\rindex = 30, result = 2\rindex = 31, result = 0\rindex = 1000, result = 3", "k": ["digit", "position", "index", "result", "sequence"]}
