{"i": "24042662", "t": "Tell me the unique and critical defect you have identified till now and tell me your experience if you  faced chanllenges with Dev team.", "k": ["dev team", "chanllenges with dev", "unique and critical", "critical defect", "identified till"]}
{"i": "23523665", "t": "Open Google.com and now tell me what are the various types of Testing type you can think of to Test Search Edit Field box\rex: Functionality Testing, Security Testing, Load Testing etc\rNow list down the various possible scenarios for each type of testing you can think of.", "k": ["test search edit", "search edit field", "edit field box", "test search", "search edit"]}
{"i": "23976708", "t": "toggle the given length of bit in 32 bit integer.\r lets say ,i want to toggle 11-15 bit in 32 bit integer.", "k": ["bit integer", "integer", "bit", "toggle 11-15 bit", "toggle"]}
{"i": "23806685", "t": "We have two strings: a normal alphanumeric string and a pattern string. the pattern string can be composed by alphanumeric chars plus the char \"?\" and \"*\"\r We want to check if the first string match the pattern, where the ? means that every char (alphanumeric) is permitted in that position, while * allows to have a sequence of alphanumeric chars.\r  as test we want to check that the function returns true to the following calls.\r isMatching(\"abab\",\"abab\")\risMatching(\"abab\",\"a**b\")\risMatching(\"ababab\",\"ab*b\")\risMatching(\"\",\"*\")\risMatching(\"aaaaaab\",\"*?*b\")\r i found this question hard, since the language we want to parse is not L1 (there's an ambiguity in the parsing tree) it means that a backtrack modality must be implemented.\r Took me a while to find a reasonable solution (that, to be honest i was not happy with)function isLegal(string:String,pattern:String):Boolean{\r\n\t\r\n\tif(pattern.length == 0 && string.length == 0)\r\n\t\treturn true;\r\n\tif(pattern.length == 0 && string.length > 0)\r\n\t\treturn false;\r\n\t// NOT PROUD OF THE FOLLOWING CONDITION\r\n\tif(pattern.length == 1 && string.length == 0){\r\n\t\tif(pattern.charAt(0) == \"*\") return true;\r\n\t}\r\n\r\n\tif(isLetter(pattern.charAt(0))){\r\n\t\tif(string.charAt(0) == pattern.charAt(0)){\r\n\t\t\t// CHAR BY CHAR CONTROL\r\n\t\t\treturn isLegal(string.substr(1),pattern.substr(1));\r\n\t\t}\r\n\t\treturn false;\r\n\t} else if(pattern.charAt(0) == \"?\"){\r\n\t\tif(isLetter(string.charAt(0))){\r\n\t\t  \t // RECURSIVE CALL \r\n\t\t  \t return isLegal(string.substr(1),pattern.substr(1));\r\n\t\t}\r\n\t\treturn false;\r\n\t} else if(pattern.charAt(0) == \"*\"){\r\n\t\tvar possibleSolution:Boolean = false;\r\n\t\tfor(var i:int = 1; i< string.length && !possibleSolution;i++){\r\n\t\t\tpossibleSolution = isLegal(string.substr(i),pattern.substr(1));\r\n\t\t}\r\n\t\treturn possibleSolution;\r\n\t} else {\r\n\t\t// ILLEGAL PATTERN\r\n\t\treturn false;\r\n\t}\r\n}\r\nfunction isLetter(s:String):Boolean{\r\n\treturn s.charCodeAt(0) > 96 && s.charCodeAt(0)<122;\r\n}", "k": ["normal alphanumeric string", "pattern string", "string", "return", "illegal pattern return"]}
{"i": "23849681", "t": "A array of N elements, we have to replace all the elements with nearest greater which is present on the right side of that elements. O(n) is required", "k": ["nearest greater", "elements", "elements with nearest", "array", "replace"]}
{"i": "23972663", "t": "U are given a set of strings, using the characters of the given string, the program needs to find the maximum length string that doesn't has any of the given string as its sub-string. In case, if we can have infinite long string satisfying the property, print -1.\r I solved this, but looking forward to some convincing algo.\r eg 1:\r11, 00\r longest: 010101010101010101010101... (-1, as infinite long)\r eg2\r101, 111, 00, 110\r longest:010(i think, maybe wrong)", "k": ["maximum length string", "find the maximum", "maximum length", "length string", "string"]}
{"i": "23971663", "t": "write the jquery for simultaneous dropdown and pagination i.e. we have 500 rows in a table and we want to display those rows. pagination will be used and also dropdown means if no of rows to be displayed is 10 per page then 10 rows per page should be displayed and dropdown changes should go with pagination.", "k": ["write the jquery", "jquery for simultaneous", "simultaneous dropdown", "rows", "dropdown"]}
{"i": "23954663", "t": "Given a dl representing the spiral level order traversal of a binary tree,convert it to a binary tree using one stack. In Last level, nodes will be either to the right or left only. complete code in C. It is usually done using two stacks. Can it be done using one stack?", "k": ["spiral level order", "level order traversal", "binary tree,convert", "binary tree", "representing the spiral"]}
{"i": "23944665", "t": "Convert ip address(32-bit) into  string format.", "k": ["convert ip address", "string format", "convert", "address", "format"]}
{"i": "23849668", "t": "negate each bit of 32 bit integer.  I answered with XOR with FFFF  but interviewer asked will ~(number) work?  I answered as no.   \r I executed this piece of code \rint x=8;\rint k=~(x);\r printf(%d\",k)\r output: 9\r x=1000\r~(x) =9   how?", "k": ["bit integer", "xor with ffff", "negate each bit", "bit", "ffff but interviewer"]}
{"i": "23927666", "t": "Consider the problem of sorting in ascending order of an array of numbers where each number is in the range 50000 to 50000000. What sorting algorithm is the best choice for the above problem. What is the best case time complexity of sorting available to this problem.\rOptions are:\ra. Merge Sort\rb. Insertion Sort.\rc. Quick Sort.\rd. Counting Sort.\re. Bubble Sort", "k": ["ascending order", "array of numbers", "sorting", "sort.", "problem"]}
{"i": "23824665", "t": "what is difference between array of pointers and pointer to an array?", "k": ["difference between array", "array", "difference", "array of pointers", "pointers and pointer"]}
{"i": "23890665", "t": "WRP to determine if a IP address belongs to a network. \rThe interviewer expected details about subnet masking", "k": ["wrp to determine", "address belongs", "wrp", "network", "subnet masking"]}
{"i": "23891666", "t": "Given array of words, group the anagrams\rIP:{tar,rat,banana,atr}\rOP:{[tar,rat,atr],[banana]}", "k": ["banana", "array of words", "group the anagrams", "words", "group"]}
{"i": "23884662", "t": "From a given integer array values, find if a Total value is possible or not? The numbers in the array can be used more than once.\rexample\rint[] points = {3, 7};\risScorePossible(points, 10) => true\risScorePossible(points, 9) => true", "k": ["points", "total", "integer array", "find", "array"]}
{"i": "23872665", "t": "Design a parking meter.", "k": ["design a parking", "parking meter", "design", "meter", "parking"]}
{"i": "23869663", "t": "A string is called sstring if it consists of lowercase english letters and no two of its consecutive characters are the same.\r You are given string s of length n. Calculate the number of sstrings of length that are not lexicographically greater than s.\rInput format\rThe only line of input contains the string s. It's length is not greater than 100.\rAll characters of input are lowercase english letters.\r Output format:\rPrint the answer of test modulo 1009 to the only line of output.\r Sample input:\rbcd\r Sample output:\r653", "k": ["lowercase english letters", "called sstring", "string", "consecutive characters", "lowercase english"]}
{"i": "23860662", "t": "A lot of transistors contains 0.6 percent defectives. Each transistor is subjected to a test that correctly identifies a defective but also misidentifies as defective about two in every 100 good transistors. Given that a randomly chosen transistor is declared defective by the tester, compute the probability that it is actually defective.", "k": ["percent defectives", "defective", "percent", "good transistors", "lot"]}
{"i": "23778670", "t": "You have a machine that can create anything. You just have to specify the details, and voila, it will give you the output. Design test cases for such a machine", "k": ["machine", "create", "design test cases", "design test", "details"]}
{"i": "23832684", "t": "Problem of concurrent transactions done by two persons of a joint account at two different ATM Machines. How is it managed without introducing any inconsistency in balance of the account holders?", "k": ["atm machines", "problem of concurrent", "concurrent transactions", "joint account", "machines"]}
{"i": "23728669", "t": "Two airline companies, Kingfisher and Jet airways want to do a merger. Design a database migration scheme, so that no inconsistencies and redundancy occur. Assume suitable data and brief on the problems you might face.", "k": ["kingfisher and jet", "jet airways", "airline companies", "kingfisher", "database migration scheme"]}
{"i": "23823662", "t": "Given an equation in the form 2^i * 3^j * 5^k * 7^l where i,j,k,l >=0 are integers.write a program to generate numbers from that equation in sorted order efficiently.\r for example numbers from that equation will be in the order 2,3,5,6,7,8,9.....and so on..", "k": ["sorted order efficiently", "integers.write a program", "program to generate", "order efficiently", "generate numbers"]}
{"i": "23804662", "t": "There are 6 pairs of black socks and 6 pairs of white socks.What is the probability to pick a pair of black or white socks when 2 socks are selected randomly in darkness.", "k": ["randomly in darkness", "probability to pick", "selected randomly", "pairs of black", "white socks.what"]}
{"i": "23735664", "t": "There are three persons A,B,C .A shots the target 6 times out of 7 shots .B shots 4 out of 5 shots .Then what is the probability of hitting the target twice when 2 persons are selected at random.", "k": ["selected at random", "probability of hitting", "hitting the target", "persons are selected", "shots"]}
{"i": "23784662", "t": "Regular expression- String matching. Find as many as patterns found in the given text.\r Pattern  is \"abcd\\\\d*abcd\".  Here the regular expression part is \u2018\\\\d*\u2019. Search for this pattern in a text like follows. \rtext = \"KABabcd123abcsdjhsdh\".  Using above regular expression pattern, we can match a string 'abcd123abcd 'in the text.\rMore explanation: In the pattern, if it is a '*',then digits can be repeated. If it is  a '+', then only one digit. \rThere is a function which will return whether it is a digit or Char.\r public static Boolean IsThisADigitChar(char input). Use this function to find whether the input character is Digit or not.\r example: abcd\\\\d*abcd==> abcd123456abcd is matched\rabcd\\\\d*abcd==> abcd12abcd is matched\rabcd\\\\d*abcd==> abcd1abcd is matched\rabcd\\\\d*abcd==> abcd123456bcd is not matched\r abcd\\\\d+abcd==> abcd1abcd is matched\rabcd\\\\d+abcd==> abcd2abcd is matched\rabcd\\\\d+abcd==> abcd7abcd is matched\rabcd\\\\d+abcd==> abcd123456abcd is not matched", "k": ["abcd", "matched abcd", "matched", "regular expression", "string matching"]}
{"i": "23776662", "t": "Write a program to find whether two lines are intersecting.", "k": ["write a program", "lines are intersecting", "program to find", "write", "intersecting"]}
{"i": "23590663", "t": "Given a set of n integers and sum of all numbers is at most K. find the subset of these n elements whose sum is exactly half of the total sum of n numbers;", "k": ["find the subset", "total sum", "sum", "integers and sum", "elements whose sum"]}
{"i": "23596662", "t": "Longest increasing subsequence:\r Given n numbers A1..An determine subsequence of maximum length values in the subsequence form a strictly increasing sequence.\r ex: input 5,2,6,3,4,1,9,9,8,9,5\routput: 2,3,4,8,9", "k": ["strictly increasing sequence", "longest increasing subsequence", "longest increasing", "increasing sequence", "maximum length"]}
{"i": "23594662", "t": "Given a sequence of numbers A(1) ..A(n), find the continuous subsequenceA(i)..A(j) for which the sum of elements is maximum.\r condition: we should not select two contiguous numbers", "k": ["find the continuous", "continuous subsequencea", "elements is maximum", "sum of elements", "sequence of numbers"]}
{"i": "23250663", "t": "given a matrix of size m * n, place k students in such a way so that cheating in an exam could be minimized", "k": ["place k students", "matrix of size", "place", "minimized", "matrix"]}
