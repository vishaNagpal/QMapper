{"i": "5738030341029888", "t": "Design amazon's frequently viewed product page.", "k": ["design amazon frequently", "viewed product page", "amazon frequently viewed", "frequently viewed product", "design amazon"]}
{"i": "5713351995817984", "t": "Design a ESPN like system. Ensure scaling and availability. Also one should get all details like score of a player, no. of mtches etc.", "k": ["design a espn", "espn like system", "espn", "design", "system"]}
{"i": "5736911233613824", "t": "Round4\r Starting from num = 0, add 2^i (where i can be any non-negative integer) to num until num == N. Print all paths of how num turns from 0 to N.\r For example if N = 4,\r Paths printed are [0,1,2,3,4], [0,1,2,4], [0,1,3,4], [0,2,4], [0,2,3,4], [0,4].\r [0,2,4] is made from 0 + 2^1 + 2^1. [0,1,3,4] from 0 + 2^0 + 2^1 + 2^0", "k": ["non-negative integer", "starting", "starting from num", "num", "add"]}
{"i": "5667270754828288", "t": "Round3\r For N light bulbs, implement two methods\r I. isOn(int i)  - find if the ith bulb is on or off.\r II. toggle(int start, int end)", "k": ["implement two methods", "light bulbs", "int", "implement", "light"]}
{"i": "5749198061305856", "t": "Round1\r Find if two people in a family tree are blood-related.\r  Round2\r Given some nodes in a singly linked list, how many groups of consecutively connected nodes there is.\r For linked list\r 0->1->2->3->4->5->6,\r given nodes 1, 3, 5, 6\r there are 3 groups [1], [3], and [5, 6].", "k": ["tree are blood-related", "family tree", "find", "linked list", "singly linked list"]}
{"i": "5700634597654528", "t": "Explain the linear piecewise function.", "k": ["linear piecewise function", "explain the linear", "piecewise function", "linear piecewise", "explain"]}
{"i": "5739784029863936", "t": "Explain event driven programming in C with example", "k": ["explain event driven", "event driven programming", "explain event", "event driven", "driven programming"]}
{"i": "5666475112136704", "t": "You and your friend go to a game arcade where you choose to play the lucky pick game. In the game,\rthere is a square grid and on each block some money is placed on it. When a player chooses a block, the\rmachine randomly chooses a block from the available neighboring and the chosen block (consider 8\rneighborhood). The player is awarded the money that is placed on the block that the machine selects.\rYour friend needs help choosing the block.\rYour job is to return the block position(s) that will maximize the minimum amount your friend will win\rfor sure. If there are more than one such block positions, then output must return all these positions.\rInput Format\rYou will be given a single input representing the Grid Description (in the form of string array)\r(N rows each containing N numbers separated by '#', each number representing the amount of money\rput on that block)\rOutput Format\rYou need to return the array of string containing the position(s) of a block choosing which will give the\rmaximum amount of money which your friend will definitely win.\rSample Test Case 1\rSample Input\r3 12#45#33 94#54#23 98#59#27\rSample Output\r3#1\rExplanation: In the above example, if he selects the block (3,1), then under the best case, he could win is\r98 and under the worst case the maximum he could win is 54. In such scenario, the worst case of block\r(3,1) gives your friend more money than the worst case of other blocks. \rSample Test Case 2\rSample Input 4\r12#45#33#27\r94#54#23#53\r98#59#27#62\r11#51#67#13\rSample Output\r1#3\r1#4\r2#3\r2#4\rExplanation\rNote: If the output array contains multiple strings(block's positions), all the positions must be in the\rrow-wise traversal order. In Example 2, the output is {1 #3,1#4,2#3,2#4}. If your function is returning an\rarray that has same elements (block's position) but in the different order, then the output array will be\rincorrect.\rFunction to implement:\rpublic static String[] amount_value(String[] input1){\r//implement your logic\r}", "k": ["sample test case", "block", "lucky pick game", "sample", "output"]}
{"i": "5191080885616640", "t": "The array of integers in given . The array indicates nothing but the heights of the cylinders. The robotic arm has two ends-> left and right. \rThe left end points to the left end of the cylinder array and right end searched for the cylinder with least height.\rex: \rarray = {4,5,6,7,1,2}\rleft end => index 0\rright end =>index 0->n giving index 4 with min height\rNow the entire block is rotated by 180 degree.\rnow the array = { 1, 7, 6, 5, 4, 2}\rnow the left end moves forward. \rand right end will search from left index onwards till the end of the array \rso left index = 1\rright index => 1-> n giving index 5 as min. height\ragain do the block rotate .\rWrite the code for this particular algorithm.\rHowever, there is one condition \r1. If there are duplicates in the array then the final order of those duplicates should remain the same. \rex. If the cylinder with height 4 is appearing at index 3 and 5 in the initial array then the cylinder at index 3 should always appear before the one at index 5 in the final array.", "k": ["left end", "array", "end", "index", "left"]}
{"i": "5199985426563072", "t": "We have N gas stations, and we are given all the distances between each pair of station. So we have nC2 distances provided to us. For example if I have 3 stations namely A, B, C the distances provided will be AB, AC, BC. We have to find the exact position of each gas station provided with these nC2 distances.\r eg. we have 5 stations so 5C2 distances are given in random order - 10, 20, 70, 80, 30, 20, 100, 70, 50, 90\r Output the exact positions of gas stations A, B, C, D, E\ri.e\rA - 0\rB - 10\rC - 30\rD - 80\rE - 100 \r refer this image for more clarity\r https://drive.google.com/open?id=0BxPkptdH01OBZzEwX29iRGI4cEU", "k": ["distances", "distances provided", "stations", "gas", "gas stations"]}
{"i": "5667848562147328", "t": "Write a method called createArray that accepts 4 parameters: number of rows, number of columns, a and b.\rThis method creates a 2-D array of number rows and columns as given in the parameter, then fills the array\rwith random values between a and b.\rWrite another method called checkColumn which accepts the position of the column, the min and max\relements of the array as parameter and returns true if the column contains both the minimum value and\rmaximum value, false otherwise.\rFinding the min and max can be done in the main.\rSample run:\rEnter number of rows and columns: 3 2\rEnter 2 integers: 25 40\rArray Elements:\r26 32\r39 28\r27 30\rMinimum: 26 Maximum: 39\rEnter the position of the column to check: 0\rColumn 0 contains both min and max.", "k": ["method called createarray", "method called", "min and max", "column", "number"]}
{"i": "6317947965407232", "t": "We need to develop a game that allows two players to throw a dice ten times and the player who gets the\rhighest sum wins the game.\r\uf0b7 Write a method sum(int[] values) that returns the sum of elements of the array values.\r\uf0b7 Write a method display(int[] values) that displays the elements of the array values.\r\uf0b7 Write a main method where you should:\ra) Create two arrays of integers called player1 and player2 with size 10 both\rb) For each player, generate ten random integers between 1 and 6 inclusively. The generated values\rare added to the associated array of each player.\rc) Display the generated values for each player.\rd) Find and display the winner using the sum method.\rSample run\rGenerated numbers for player 1 are: 6 6 3 1 2 1 4 6 5 4\rGenerated numbers for player 2 are: 6 2 2 4 2 1 1 5 2 4\rPlayer 1 wins with score 38", "k": ["dice ten times", "write", "throw a dice", "player", "highest sum wins"]}
{"i": "5731452061745152", "t": "[Applying a curve to grades] Write a method called \u201capplyCurve\u201d that takes as a parameter a single-\rdimensional array called \u201cgrades\u201d of integers and a single value integer called \u201craise\u201d. This method should\rmodify the array \u201cgrades\u201c, which contains the grades of students in a way that each value in the array is\radded to it the curve value \u201craise\u201d. You should check that the grades after applying the raise does not exceed\r100.\rFor example, if array \u201cgrades\u201d contains the following values:\r 95 100 24 43 76 51 87\r0 1 2 3 4 5 6\r After calling the method \u201capplyCurve\u201d with a raise value +7 the array grades would be as follows:\r 100 100 31 50 83 58 94\r0 1 2 3 4 5 6\r Write a test program (main) that prompts the user to enter the size of an array, the grades and the required\rcurve and then displays the grades after applying a required curve.\rSample run\rEnter the array size: 7\rEnter the grades: 95 100 24 43 76 51 87\rEnter the required curve: 7\rThe grades after applying + 7 are: 100 100 31 50 83 58 94", "k": ["single-dimensional array called", "grades", "integer called", "called", "method called"]}
{"i": "5751311990521856", "t": "count number of combinations which are not possible.\rThere are 'n' empty slots.\rA slot can be filled with 'O', 'E', or 'X'\rA combination is possible if \r1. 'O' s are placed in odd slot , 'E' a are  placed in even slots.\r2. 'O' and 'E' alternate among them, \ri.e (OXOE) not allowed because between O s there is no 'E'; but (OEXXO) is allowed.\rsome allowed combinations\rOEXXX, XXOEO, OXXEX\rFor 3 slots, not allowed combinations are\rOXX\rXXO\rXEX\rXXX\rOXO\rOnly those combinations are considered in which O s and E s are in their respective odd and even slots.\ri.e EEXXX will never be considered because a 'E' is in odd slot\rA combination isn't allowed if 'O' is not followed by 'E' or vice versa", "k": ["count number", "oxx xxo xex", "xxo xex xxx", "xex xxx oxo", "allowed"]}
{"i": "5081309977247744", "t": "Given two sorted arrays A and B. Find the first K pairs (a, b) from A and B which have the smallest sum of a & b. Supposed K is small compared to |A| x |B|\rFor example:\rA = [1, 2, 3, 6, 10]\rB = [1, 4, 5, 7]\rK = 5\rResult [(1,1), (1,4), (1,5), (2,1), (3,1)]", "k": ["sorted arrays", "smallest sum", "sorted", "arrays", "result"]}
{"i": "5716557652033536", "t": "..", "k": []}
{"i": "5741554361696256", "t": "Design a FIDS(Flight Information Display System)\r 1. Consider most important classes & ignore Interfaces as of now\r2. FIDS is not about reservation system but the dasboard to display \r3. the information will look like:\r DEPARTURES\r----------------------\rAttributes: \r        STD\tAirline\tFlight\tDestination/Via\tCheckInCounter#\tGate\t\tStatus\tETD\r Values : \r\t\t12:50\tKingFisher\t6E352\tHyderabad\tA-B\t23\tCheck-In Open\t13:15\t\r ARRIVALS\r-----------------------\rAttributes: \r\t\tSTA\t\tAirline\tFlight#\tDestination/Via\tGate\tStatus\tETA   \r Values : \r\t\t12:50\tKingFisher\t6E352\tUK/Mumbai\tTerminal2\t\tLanded\t13:15", "k": ["std airline flight", "airline flight destination", "airline flight", "flight information display", "gate status"]}
{"i": "5673439401607168", "t": "Given a sorted distinct array of integers and a key K. C closest elements to K are in range [L,R] inclusive, L<=R. Return L as the left index of C closest elements to K.\rFor example:\rA = [1, 2, 5, 8, 9, 13]. K = 8 and C = 4. The result L = 3 because 4 closest elements to 8 are [5, 8, 9, 13]", "k": ["sorted distinct array", "closest elements", "sorted distinct", "distinct array", "array of integers"]}
{"i": "5693382411157504", "t": "Given a tree print in level zig-zag order.Example suppose we have the given tree structure:\r\n     1\r\n    2 3\r\n  4 5 6\r\n\r\nit should print: 1 3 2 4 5 6 \r\n\r\nFirst level prints left to right.\r\nThen next level prints right to left.\r\nAlternating for each level.\r\n\r\nAssume the following node structure:\r\nNode { \r\n  data: Integer,\r\n  left: Node,\r\n  right: Node,\r\n  parent: Node,\r\n}", "k": ["zig-zag order.example suppose", "level zig-zag order.example", "zig-zag order.example", "order.example suppose", "node"]}
{"i": "5713824039567360", "t": "Round 5:\r    Given a set of synonyms such as (fast, quick), (fast, speedy), (learn, study), decides if two sentences were synonymous.\r    (The sentences were structurally the same and has the same number of words in them.\r    The synonymous relation [fast ~ quick] and [fast ~ speedy] does not necessarily mean [quick ~ speedy].)\r     Follow-up:\r    If the synonymous relation passes down so that [fast ~ quick] and [fast ~ speedy] implies [quick ~ speedy], decide if two sentences were synonymous.", "k": ["fast", "quick", "speedy", "set of synonyms", "synonymous"]}
{"i": "5746084612669440", "t": "Round 4:\r    Implement a class Employment with these 3 methods: assignManager(p1, p2): assign p1 as p2's manager. beColleague(p1, p2): make p1 and p2 peer colleagues. isManager((p1, p2): decide if p1 is the manager of p2.", "k": ["implement a class", "class employment", "implement", "employment", "round"]}
{"i": "5673538588508160", "t": "Round 3\r Given a matrix of 0s and 1s where 0 is wall and 1 is pathway, print the shortest path from the first row to the last row.\r Can walk to the left, top, right, bottom at any given spot.\r  Follow-up:\r    If every pathway takes a cost (positive integer) to get through, print the minimum cost path from the first row to the last row.", "k": ["print the shortest", "shortest path", "row", "round", "print"]}
{"i": "5657048330010624", "t": "Google on-site June\rRound 1\r Leetcode 10\r Round 2\r Select a random point uniformly within a rectangle, (The side of rectangle is parallel to the x/ y grid).\r  Follow-up: Given multiple non-overlapped rectangles on the 2D grid, uniformly select a random point from the rectangles.", "k": ["on-site june round", "google on-site june", "june round", "on-site june", "select a random"]}
{"i": "5716937353986048", "t": "Convert Json string to Map\r public Map jsonToMap(String t) {\r    }", "k": ["convert json string", "public map jsontomap", "map public map", "convert json", "map jsontomap"]}
{"i": "5141919683313664", "t": "Design a system that supports updating table with options to discard the updates. It should have the following functions:- create(String: rowName) #cannot be called until startTransaction has been called\r\n- delete(String: rowName) #cannot be called until startTransaction has been called\r\n- update(String: rowName) #cannot be called until startTransaction has been called\r\n- startTransaction() #start transaction operations( create/delete/update)\r\n- commitTransaction() #apply transaction to the actual Table( can be array-of-objects )\r\n- discardTransaction() #discard any transaction applied thus farRough impl is acceptable as long as the design is displayed correctly.", "k": ["supports updating table", "system that supports", "supports updating", "updating table", "string"]}
{"i": "5735975064961024", "t": "Given a list of employees and their bosses as a CSV file , write a function that will print out a hierarchy tree of the employees.", "k": ["csv file", "write a function", "hierarchy tree", "list of employees", "csv"]}
{"i": "5694704455778304", "t": "Design Distributed Web Crawler.", "k": ["distributed web crawler", "design distributed web", "web crawler", "distributed web", "design distributed"]}
{"i": "5185584938090496", "t": "What if server is slow, how to solve\rWhat if one server is down", "k": ["server is slow", "server", "slow", "solve"]}
{"i": "5749305569705984", "t": "Write a  C code matrix multiplication in such a way that the matrix can be read in row major form only", "k": ["row major form", "code matrix multiplication", "read in row", "row major", "major form"]}
{"i": "5750832229253120", "t": "The array of integers in given . The array indicates nothing but the heights of the cylinders. The robotic arm has two ends-> left and right. \rThe left end points to the left end of the cylinder array and right end searched for the cylinder with least height.\rex: \rarray = {4,5,6,7,1,2}\rleft end => index 0\rright end =>index 0->n giving index 4 with min height\rNow the entire block is rotated by 180 degree.\rnow the array = { 1, 7, 6, 5, 4, 2}\rnow the left end moves forward. \rand right end will search from left index onwards till the end of the array \rso left index = 1\rright index => 1-> n giving index 5 as min. height\ragain do the block rotate .\rWrite the code for this particular algorithm.\rHowever, there is one condition \r1. If there are duplicates in the array then the final order of those duplicates should remain the same. \rex. If the cylinder with height 4 is appearing at index 3 and 5 in the initial array then the cylinder at index 3 should always appear before the one at index 5 in the final array.", "k": ["left end", "array", "end", "index", "left"]}
