{"i": "12511679", "t": "Char ch='Z'; ch is stored as\rA. Z\rB. ASCII value of Z\rC Z with single quotes\rD. A&B", "k": ["char", "stored", "ascii", "single quotes", "single"]}
{"i": "12421689", "t": "Given an array of n elements. The array can have duplicates.\rNow sort the array based on frequency of distinct number in array.\r eg: a= [3,4,2,5,3,3,4,2,1,5}\routput = {3, 4,2,5,1} coz, 3 occurs thrice, 4,2,5 occurs twice, so they are retained in order of there occurrence in original array, and at last 1, as it appears least number of time.", "k": ["array", "elements", "occurs", "number", "occurs thrice"]}
{"i": "12511676", "t": ".", "k": []}
{"i": "12442699", "t": "Compute the factorial of an integer using minimum number of multiplications. assume no overflows", "k": ["compute the factorial", "number of multiplications", "integer using minimum", "minimum number", "assume no overflows"]}
{"i": "12511673", "t": "Find O/P\r#define prod(x,y)  x+y*x-y\rmain() {\rprint (\"%d\",  prod(3,4));\r}", "k": ["define prod", "print", "prod", "find", "define"]}
{"i": "12354695", "t": "There are 22 gloves in a drawer: 5 pairs of red gloves, 4 pairs of yellow, and 2 pairs of green\r There are four people who want to cross a bridge; they all begin on the same side. You have 17 minutes to get them all across to the other side. It is night, and they have one flashlight. A maximum of two people can cross the bridge at one time. Any party that crosses, either one or two people, must have the flashlight with them. The flashlight must be walked back and forth; it cannot be thrown, for example. Person 1 takes 1 minute to cross the bridge, person 2 takes 2 minutes, person 3 takes 5 minutes, and person 4 takes 10 minutes. A pair must walk together at the rate of the slower person\u2019s pace. For example, if person 1 and person 4 walk across first, 10 minutes have elapsed when they get to the other side of the bridge. If person 4 returns the flashlight, a total of 20 minutes have passed and you have failed the mission.", "k": ["red gloves", "minutes", "person", "gloves", "side"]}
{"i": "12322728", "t": "how would you design a rate limiter in a client to control the number of transactions it requests the server.", "k": ["requests the server", "design a rate", "rate limiter", "client to control", "control the number"]}
{"i": "12503676", "t": "How do you check if an entered text in a textbox is a student email address (ends with edu). special case xyz@alumni.univ.edu should be rejected", "k": ["student email address", "email address", "entered text", "student email", "special case"]}
{"i": "12505680", "t": "Give data structures for the following problems in making an employee management system:\r1) given a manager give all the employees he manages ( one to many relationship)\r2) represent organizational structure of the company", "k": ["employee management system", "represent organizational structure", "give data structures", "management system", "represent organizational"]}
{"i": "12375726", "t": "Write code for the following problem:\rfind the element in the array that appears consecutively in the array max number of times. Should be O(N)\reg. 1113333244111 ans. 3", "k": ["array max number", "write code", "find the element", "number of times", "array max"]}
{"i": "12322727", "t": "How do you check if an entered text in a textbox is a student email address (ends with edu). special case xyz@alumni.univ.edu should be rejected", "k": ["student email address", "email address", "entered text", "student email", "special case"]}
{"i": "12375725", "t": "Give data structures for the following problems in making an employee management system:\r1) given a manager give all the employees he manages ( one to many relationship)\r2) represent organizational structure of the company", "k": ["employee management system", "represent organizational structure", "give data structures", "management system", "represent organizational"]}
{"i": "12458707", "t": "Write code for the following problem:\rfind the element in the array that appears consecutively in the array max number of times. Should be O(N)\reg. 1113333244111 ans. 3", "k": ["array max number", "write code", "find the element", "number of times", "array max"]}
{"i": "12496663", "t": "Write a efficient power function.\rint pow(int x, int y) for calculating x^y.\r especially for the case when y is of the form 2^n.", "k": ["efficient power function", "write a efficient", "power function", "efficient power", "int"]}
{"i": "12497661", "t": "int error()\r{\rchar *buf=(char *) malloc(10,sizeof(char));\rreturn buf;\r}\r whats the error....?\r warm up question", "k": ["char", "int error", "return buf", "error", "buf"]}
{"i": "12339557", "t": "In a car odometer, what is the smallest number of miles you can travel to go from one palindromic odometer reading to the next palindromic odometer reading? (e.g. 003300 -> 004400 would be 1100 miles).", "k": ["palindromic odometer reading", "palindromic odometer", "odometer reading", "car odometer", "smallest number"]}
{"i": "12491677", "t": "Write a program that finds the largest palindromic number that\u2019s the result of multiplying two four-digit numbers (1000 through 9999) without converting the number to a string first (i.e. a pure-numeric palindrome test)", "k": ["pure-numeric palindrome test", "largest palindromic number", "write a program", "palindrome test", "program that finds"]}
{"i": "12493678", "t": "Several Sql Queries.\reg. relation student -> Student Name| Subject 1| Subject 2| Subject 3 | Subject 4 | Subject 5|\r Q- Now find all those students whose subjects are DS or Networking.", "k": ["sql queries.", "queries. eg. relation", "relation student", "subject", "networking"]}
{"i": "12491669", "t": "7)Search for a element in array in log(n).\r{ 5,7,8,9,10,1,2,3,4}.", "k": ["array in log", "element in array", "search", "log", "element"]}
{"i": "12435689", "t": "6) Write floor and ceiling function to calculate sqrt(n).\rUse any statistical formula to calculate sqrt(n). You dont have to use sqrt function as such.", "k": ["write floor", "floor and ceiling", "write", "calculate sqrt", "calculate"]}
{"i": "12493677", "t": "5) Find second non repeating element in array.", "k": ["element in array", "find", "repeating element", "array", "repeating"]}
{"i": "12493676", "t": "4)  Draw a DFA that accept string containing even a's and odd b's.", "k": ["draw a dfa", "dfa that accept", "accept string", "draw", "dfa"]}
{"i": "12493675", "t": "3) Reverse string by words. Give another algorithm other than reversing whole string and then reverse every word.", "k": ["reverse", "reverse string", "string", "words", "word"]}
{"i": "12339553", "t": "2) Inplace Transpose of Matrix.", "k": ["inplace transpose", "transpose of matrix", "inplace", "matrix", "transpose"]}
{"i": "12494668", "t": "1) Write a program to change big endian to little endian.", "k": ["change big endian", "write a program", "program to change", "change big", "big endian"]}
{"i": "12493669", "t": "Consider a cloak room. It has 3 compartments, small, medium, large\r1 medium = 2 small\r1 large = 2 medium = 4 small\r Design such a system, ensuring maximum capacity optimization of the compartments. Also, make the required number of moves (in-btw compartments) as minimum as possible.\r Write class, functions. Wht functions will u expose. What token will you return back to the user.", "k": ["medium", "cloak room", "large", "small design", "small"]}
{"i": "12477676", "t": "Given pre order traversal of a tree. It has only 2 type of nodes, N & L (non-leaf, leaf).. Also, every node either has zero or two children.\rProduce the tree.\r Eg: Pre-order NNLLL\r Tree;\rN\r/ \\\rN L\r/ \\\rL L", "k": ["pre order traversal", "pre order", "order traversal", "pre-order nnlll tree", "tree"]}
{"i": "12493668", "t": "You have the post order traversal of a tree. produce the tree. \rPossible? \rIf not, what other info you need? \rOk you have that info, now produce the tree. \rWrite code", "k": ["post order traversal", "post order", "order traversal", "tree", "produce the tree"]}
{"i": "12435684", "t": "Generate all the possible substrings using the characters of a  given string. Write code. (The order of chars do not matter, i.e., ac <=> ca)\ri/p: abc\ro/p: { a,b,c,ab,ac,bc,abc}\r <Modified the language of the question, to avoid any confusions>", "k": ["write code", "generate", "string", "modified the language", "substrings"]}
{"i": "12491662", "t": "Write a function that returns true if the bit stream has an alternating pattern. For example 000000101010 would return true and 0000001010000 would return false.  Also I had to write test cases for the function.", "k": ["alternating pattern", "bit stream", "returns true", "pattern", "return false"]}
