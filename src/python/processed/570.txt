{"i": "165103", "t": "print all permutations of a string.", "k": ["print all permutations", "print", "string", "permutations"]}
{"i": "173916", "t": "Given a search engine which uses a cache to store the search results. The size of the cache is 100 records and uses a LRU mechanism. Give test cases to test the features of the search engine, the caching mechanism etc", "k": ["search results", "search engine", "store the search", "lru mechanism", "search"]}
{"i": "173901", "t": "Design a deck of cards.\r Write code for Shuffle() method.", "k": ["design a deck", "deck of cards", "method", "design", "cards"]}
{"i": "173900", "t": "Denition about ordered binary tree.\r How to find the second largest node? Need specific code.", "k": ["ordered binary tree", "denition about ordered", "binary tree", "ordered binary", "denition"]}
{"i": "165079", "t": "Deninition about hash map.\r Space and time complexity.", "k": ["deninition about hash", "hash map", "deninition", "map", "hash"]}
{"i": "165076", "t": "Given a table: CustomerOrders:\r Customer Orders\r-------------------------------\rCustomer ID   |    Order ID    | Order Date\r 1. Write a SQL to find all customers who has placed an order today.\r 2. Write a SQL to find all customers who has placed an order today AND yesterday.", "k": ["order date", "write a sql", "sql to find", "order", "order today"]}
{"i": "165073", "t": "you have a bag full of airplane tickets with various destinations. given two destinations find those tickets in the bag and give the cheapest routing in the least time possible", "k": ["full of airplane", "bag full", "airplane tickets", "bag", "tickets"]}
{"i": "165054", "t": "N people in a party. Find a celebrity among them. Celebrity knows nobody else, while everybody else knows him/her. You are required to do this by asking a single question to see if A knows B. The answer is yes or no. What is the minimum number of questions to be ask? What if there doesn't exist such a celebrity?", "k": ["celebrity", "party", "people", "find a celebrity", "find"]}
{"i": "165053", "t": "Given a sorted linked list, delete all duplicate numbers, leave only distinct numbers from original list. e.g., given 1->2->3->3->4->4->5, return 1->2->5. Given 1->1->1->2->3, return 2->3.", "k": ["sorted linked list", "linked list", "original list", "delete all duplicate", "leave only distinct"]}
{"i": "173870", "t": "You are given a two dimensional array (say 5*5) in which all the rows as well as the columns are sorted.  Describe an efficient algorithm to discover if an element is present or not.", "k": ["dimensional array", "columns are sorted", "array", "sorted", "describe an efficient"]}
{"i": "165026", "t": "Assume that you have a CPU with 4 (r1, r2, r3, r4) registers, which supports the following operations\r\tzero(r) -- resets register value to zero\r\tinc(r) - increments register value by one\r\tloop(r) { /* loop body */ } repeats everything in the loop body x times where x is the value in the register r. The number of iterations does not change if x changes inside the loop body.\r\tAll the registers are integer numbers, not less than zero, and less than infinity. No operations, except from described above. One can not create additional registers or variables.\r \tIn this language, implement a function \"r1 = r4 - 1\" (assuming that r4 > 0)", "k": ["loop body", "loop", "cpu", "body", "resets register"]}
{"i": "173855", "t": "How would you convert a binary tree into a binary search tree?.. write a efficient way of doing that?", "k": ["binary search tree", "convert a binary", "binary search", "binary tree", "search tree"]}
{"i": "173847", "t": "Explain the boot sequence ?", "k": ["explain the boot", "boot sequence", "explain", "sequence", "boot"]}
{"i": "173846", "t": "Difference between Interrupt and a signal when to use each ?", "k": ["difference between interrupt", "interrupt", "difference", "signal"]}
{"i": "164998", "t": "Write a function that removes extra spaces from a string and leaves only one correct space. I got it right the first time so they changed and twisted it a lot.", "k": ["removes extra spaces", "write a function", "function that removes", "removes extra", "string and leaves"]}
{"i": "173837", "t": "Tell me about yourself.  What are your strengths and weaknesses?", "k": ["strengths and weaknesses", "weaknesses", "strengths"]}
{"i": "164996", "t": "Write a function to print out misspelled words from a string containing many words.", "k": ["write a function", "function to print", "print out misspelled", "misspelled words", "write"]}
{"i": "173835", "t": "Where are static variables stored?", "k": ["static variables stored", "variables stored", "static variables", "stored", "static"]}
{"i": "173834", "t": "Write a function to check if a stack grows up or down", "k": ["write a function", "function to check", "stack grows", "write", "function"]}
{"i": "173833", "t": "Explain how virtual functions are implemented.", "k": ["explain how virtual", "functions are implemented", "virtual functions", "explain", "implemented"]}
{"i": "173825", "t": "My final round was with a senior developer/manager.  Very arrogant and intimidating lady. Didnt even shake hands or introduce herself. In one problem, she kept on pressing for a better solution all the while insulting some stuff on my resume, she was clearly testing my patience and see if I would give up. Wasnt happy with my answer and left in a huff..\rI personally didnt like the work environment..people were sitting in straight rows without even cubicles and working on their terminals..dont know how they concentrate!\rI got a feeling that they were looking for people who would take whatever shit they do to them and just do their job.", "k": ["senior developer", "final round", "manager", "developer", "intimidating lady"]}
{"i": "173824", "t": "I did an onsite interview.  Very swanky headoffices..comparable only to google. And free food!  In one interview, I had two developers simultaneously. Not the brightest you meet...they were getting confused themselves. At some point, they showed me everything about the bloomberg terminal. I slipped my tongue a few times and openly criticized their crappy UI. They weren't happy with that.", "k": ["onsite interview", "interview", "onsite", "swanky headoffices.", "headoffices."]}
{"i": "164986", "t": "Print a linked list recursively in a reverse manner without changing the actual list", "k": ["linked list recursively", "print a linked", "reverse manner", "manner without changing", "changing the actual"]}
{"i": "173776", "t": "if there r 2 processes with the same deadline in RTOS and we can run only 1 processes and both the processes are exactly same in everything like start time priority and all how will scheduler decide which process to run", "k": ["start time priority", "deadline in rtos", "start time", "time priority", "scheduler decide"]}
{"i": "164921", "t": "after context switch processes which has interrupted other process starts running but how does os know which process to run after running current process. Simillarly in case of interrupt how does interrupt handler know where it should go back ?", "k": ["context switch processes", "process starts running", "running current process", "context switch", "switch processes"]}
{"i": "164920", "t": "what do you mean by address space of a process what essentially it is ?", "k": ["address space", "process what essentially", "address", "space", "process"]}
{"i": "173775", "t": "What is the difference between process and thread context switch what all needs to be saved for process and thread context switch like do we need to save heap, basically she wanted me to list everything when i said registers she asked me to tell the name of the registers then she asked if process variables needs to be saved and so on ?", "k": ["thread context switch", "thread context", "context switch", "save heap", "basically she wanted"]}
{"i": "173757", "t": "Write a c program to search for an element in a binary tree[not BST] and if found return its level. root is labelled level 0 and children are one level incremented than its parent.\rif not found return -1", "k": ["binary tree", "program to search", "bst", "found return", "level"]}
{"i": "164892", "t": "Given an array of N elements , one element is repeated N/2 times. Find the element if such an element exists.", "k": ["times", "element", "array", "repeated", "element exists"]}
{"i": "164891", "t": "Given a binary tree with the following node structure\r struct node\r{\r//data\r//pointer to left subtree\r//pointer to right subtree\r//pointer to sibling\r };\r  The sibling pointers are NULL for all the nodes.Make the sibling pointers point to their respective nodes in O(n)time complexity", "k": ["sibling pointers point", "node structure struct", "structure struct node", "sibling pointers", "time complexity"]}
