{"i": "10554750", "t": "Explain the following: \rleft and right join...\router and inner join\rsql injection (???..could not answer..but he was ok, i think)", "k": ["explain", "left", "join sql injection", "join", "sql injection"]}
{"i": "10542866", "t": "difference between equalto and == in java", "k": ["difference between equalto", "difference", "java", "equalto"]}
{"i": "10358342", "t": "How would you find out a word with maximum number of occurences in a big book ..like big big book..", "k": ["big big book.", "word with maximum", "maximum number", "number of occurences", "big book"]}
{"i": "10528666", "t": "Given a string. How to convert it into palindrome adding minimum number of character(insertion at any place) but no removal?", "k": ["string", "number of character", "character", "insertion", "place"]}
{"i": "10497835", "t": "Given a matrix which represents 1/0 representing a direct flight between two places in a 2D array, find the number of hops required to reach from one place to another place. In other words, find if it is bi-hop, tri-hop etc.", "k": ["matrix which represents", "representing a direct", "direct flight", "number of hops", "hops required"]}
{"i": "10536033", "t": "There are two tumblers one 7 litre tumbler, one 4 litre tumber and ample water. Get 6 liters of water in 7 litre tumbler.", "k": ["litre tumbler", "tumber and ample", "litre", "ample water", "water"]}
{"i": "10537074", "t": "Given an array of elements and an integer x, rearrange the array such that all the elements greater than or equal to x should be in descending order and all the elements less than x should be in ascending order in most efficient manner.", "k": ["efficient manner", "descending order", "ascending order", "elements greater", "rearrange the array"]}
{"i": "10537073", "t": "Given two indices in a byte m and n such that m>=n extract all the bits between m and n in a single instruction.", "k": ["single instruction", "instruction", "indices", "byte", "extract"]}
{"i": "10537063", "t": "Two very large numbers are represented using arrays. Multiply these two numbers. E.g. Two numbers 12 and 13 are represented as a=[1,2] adn b=[1,3]. The expected result is 12*13=156 i.e. c=[1,5,6]", "k": ["large numbers", "numbers", "represented using arrays", "arrays", "represented"]}
{"i": "10537004", "t": "Design a hashtable, you have 1000 items, how many slot would you choose. why.", "k": ["design a hashtable", "items", "design", "hashtable", "choose"]}
{"i": "10525980", "t": "You have been given a dictionary containing some words which data structure you will\ruse to store all those words and why\rYou have been given a word you have to find its anagrams within that dictionary\rNow you haven\u2019t been given any word you have to find all the anagrams already existing\rwithin given dictionary.\rNow you can have as much time as you want for preprocessing of dictionary words\ralready existing but the solution should give efficient result for accessing the anagram of\rgiven word\rSuppose the length of each word in dictionary is of length N and it has M no of words in\rdictionary then how much time it will take for preprocessing and after preprocessing to\rfind the angrams in dictionary\r(they were asking for as many solutions as you can give for each question)", "k": ["data structure", "dictionary", "word suppose", "find", "words"]}
{"i": "10536976", "t": "You have a BST in which each and every node has an extra pointer (called rand) which\ris pointing to any random node within the tree. Now if that rand pointer is pointing to any\rof its inorder successor then its fine otherwise you have to make it null.\rNow you are also having the duplicate entries in that BST. Now how will you handle it.\rNext question was suppose the tree is not BST and also has duplicate entries what will\ryou do now to handle that rand pointer.\rWhat is the time complexity and space complexity in every solution", "k": ["random node", "called rand", "rand pointer", "bst", "extra pointer"]}
{"i": "10523980", "t": "design a data structure for a phone address book with 3 fields\rname, phone number , address\rone must be able to search this phone book on any of the 3 fields", "k": ["phone address book", "design a data", "data structure", "phone number", "address book"]}
{"i": "10525951", "t": "how would you detect mouth in a picture", "k": ["detect mouth", "picture", "detect", "mouth"]}
{"i": "10517903", "t": "write iterative version of seed fill algorithm", "k": ["write iterative version", "seed fill algorithm", "write iterative", "fill algorithm", "iterative version"]}
{"i": "10535870", "t": "find longest increasing subsequence not necessarily contiguous in nlogn time. I knew how do it n2 time but was unable to do it in nlogn", "k": ["find longest increasing", "longest increasing subsequence", "find longest", "longest increasing", "increasing subsequence"]}
{"i": "10471941", "t": "OO design for Vector Graphics Program.", "k": ["vector graphics program", "graphics program", "vector graphics", "design for vector", "program"]}
{"i": "10427113", "t": "Design a data structure for word processor", "k": ["design a data", "word processor", "data structure", "structure for word", "design"]}
{"i": "10476741", "t": "Find all permutations of a given string in lexicographical order.", "k": ["find all permutations", "lexicographical order", "string in lexicographical", "find", "order"]}
{"i": "10471741", "t": "Given a binary tree. Find the minimum element at a given depth.", "k": ["binary tree", "tree", "find the minimum", "binary", "minimum element"]}
{"i": "10471740", "t": "Given an array which is sorted in ascending order upto kth element and then in descending order. Find the maximum element.", "k": ["ascending order upto", "order upto kth", "upto kth element", "sorted in ascending", "upto kth"]}
{"i": "10520745", "t": "Find 2 numbers that add to given sum in  an array.", "k": ["find", "numbers that add", "numbers", "array", "add"]}
{"i": "10471674", "t": "Why the cover of a drainage system is always circular ?", "k": ["drainage system", "circular", "cover", "drainage", "system"]}
{"i": "10527674", "t": "Difference between overriding and overloading ?", "k": ["difference between overriding", "overriding and overloading", "difference", "overloading", "overriding"]}
{"i": "10527673", "t": "Why the cover of a drainage system is always circular ?", "k": ["drainage system", "circular", "cover", "drainage", "system"]}
{"i": "10426890", "t": "Write a program to find 2nd last element in a linked list ?\r Also change the code to find n-th last element in linked list ?", "k": ["linked list", "write a program", "n-th last element", "change the code", "program to find"]}
{"i": "10511354", "t": "Design a class for a product, which has several promotional offers based on its buy weight. Input are: product-Rice,buy weight-105kg, provided the offer price are Rs.30/Kg, Rs.28 per 2Kg, Rs.25 per 5Kg, Rs.24 per 10Kg. Come out with an output that would quote the least price, and if there are 2 offers with the same price, the choice has to be made on the least number of baggages.", "k": ["promotional offers based", "design a class", "buy weight", "promotional offers", "offers based"]}
{"i": "10512338", "t": "How much space does a pointer and integer takes?\rFor eg :-\rint a;\rint *a;\r I told him that the take same amount of space but he was not convinced. Am i missing something??", "k": ["pointer and integer", "int", "space", "pointer", "integer"]}
{"i": "10446332", "t": "Which data structure would you use to implement Phone book?\rI told him about tries.\rHe asked me some other D.S and then he hinted me about hash table.\rThen he asked about the difference between both the approaches and which one to use when? He specifically asked the advantages of both the approaches??\rfollow up ques:-  Which data structure for Dictionary?\rWhich among tries and hashtable would you use for phone book and which one for Dictionary?\rI answered that dictionary and phone book are same but he was not at all convinced..", "k": ["implement phone book", "implement phone", "phone book", "dictionary", "phone"]}
{"i": "10517256", "t": "How to find the shortest path to reach from one profile to another through friends in facebook.", "k": ["friends in facebook", "find the shortest", "shortest path", "path to reach", "facebook"]}
