{"i": "3176680", "t": "How will you sort 1 million floating point numbers?", "k": ["million floating point", "floating point numbers", "million floating", "point numbers", "floating point"]}
{"i": "3220676", "t": "Write a chunk of code in Java which shows an example of deadlock.", "k": ["code in java", "java which shows", "write a chunk", "chunk of code", "java"]}
{"i": "3193689", "t": "Write a URL shortner (like tinyurl) . Take a URL as input & return a shortened URL. If you use any kind of storage or persistence, please use the appropriate api's of the language. Another requirement is that we want to make our URLs as different as possible, so that successive calls return very different URIs\rThis is to ensure that small typo errors do not lead to users getting to a valid URL, but rather throwing up an error page.", "k": ["url shortner", "shortened url", "url", "write a url", "url as input"]}
{"i": "3252663", "t": "What Data Structure will you use to implement a garbage collection engine?", "k": ["garbage collection engine", "data structure", "collection engine", "implement a garbage", "garbage collection"]}
{"i": "3216677", "t": "Given a BST and a node value, find the mirror node of the node containing that value.", "k": ["find the mirror", "mirror node", "bst", "node", "find"]}
{"i": "3206679", "t": "Given a Tree, verify that it is a binary search tree. (input not specified as a binary tree, just a tree)", "k": ["binary search tree", "search tree", "tree", "binary tree", "binary search"]}
{"i": "3251664", "t": "How would you Implement an LRU Cache?", "k": ["lru cache", "implement an lru", "cache", "implement", "lru"]}
{"i": "3248665", "t": "Suppose in your first week of joining Amazon you come across a customer who says he has a problem. your team member is on leave and the problem is there is a reader which is reading labels and classifying packages. this reader is misclassifying. how do you handle this.\r  the reader is third party. labels are ours\r  we need to corner the problem", "k": ["joining amazon", "week of joining", "amazon", "problem", "reader"]}
{"i": "3252662", "t": "solve the following design problem: we have n instances of a service s1, s2, s3 ... sn running. And there are m orders o1, o2, ... om and whenever i % n + 1 = j, the order goes to service sj\r  what are the problems ?\r  how to solve these problems", "k": ["design problem", "problems", "design", "instances", "solve"]}
{"i": "3215687", "t": "Write an algorithm to find the duplicates in two unsorted arrays", "k": ["write an algorithm", "unsorted arrays", "algorithm to find", "find the duplicates", "write"]}
{"i": "3194683", "t": "Design classes for Themes in UI. A Theme has a font, background colour, background image etc.", "k": ["design classes", "classes for themes", "design", "background colour", "background"]}
{"i": "3169681", "t": "Memory is an array R[1..n]. And a Block is essentially all memory between two indexes i, and j. Now, each application uses some blocks. And blocks can be contained within one another or can be disjoint, but they cannot be intersecting otherwise. So in this scenario, write an algorithm to lock or unlock a block.  if a block is locked, none of its child blocks should be allowed to be locked and none of its parent blocks should be allowed to be locked.", "k": ["blocks", "block", "memory", "locked", "array"]}
{"i": "3248664", "t": "In Amazon 100 million queries for various objects can arrive at a database . This can cause bottleneck. Design a system for this.", "k": ["million queries", "objects can arrive", "amazon", "million", "database"]}
{"i": "3205679", "t": "how will you find a maximum path in a graph", "k": ["find a maximum", "maximum path", "graph", "find", "maximum"]}
{"i": "3181678", "t": "In our website, people enter addresses. Each address is made up of some lines. And each address can be represented as rows in a database. how would you design a system which would verify if the addresses are valid or not, that is if the address really exists or not.", "k": ["people enter addresses", "people enter", "enter addresses", "website", "people"]}
{"i": "3218685", "t": "When an employee joins amazon , he has to go through various departments. like the admin department, finance etc. you have to create a design for this.", "k": ["employee joins amazon", "joins amazon", "employee joins", "amazon", "admin department"]}
{"i": "3237684", "t": "Given a two strings, determine if one is a circular permutation of the other or not. For example abcd, cdab are circular permutations", "k": ["strings", "determine", "circular permutation", "circular", "cdab are circular"]}
{"i": "3229685", "t": "Stock prices are given to you at various time intervals. p1, p2, p3,... you are allowed to buy and sell only once each. So write a program to find the index where you would buy and where you would sell to maximize profit", "k": ["stock prices", "time intervals", "stock", "intervals", "prices"]}
{"i": "3210689", "t": "Given a number line 1734, how to return the next higher permutation of its digits", "k": ["number line", "higher permutation", "line", "digits", "number"]}
{"i": "3231676", "t": "input is n, find the no. of 0's at the end of n! [factorial of n]", "k": ["input", "find", "end", "factorial"]}
{"i": "3246665", "t": "Explain about hashing. Give one example of a hash function and explain how collision is handled.", "k": ["explain about hashing", "hashing", "explain", "collision is handled", "hash function"]}
{"i": "3171680", "t": "I want to create a LRU [least recently used cache] such that push, pop and find min [without deletion] are done in constant time how to do this?", "k": ["create a lru", "recently used cache", "pop and find", "find min", "constant time"]}
{"i": "3220674", "t": "Design a Train & reservation system. Give class structure and design\r  UML", "k": ["reservation system", "design a train", "train", "design uml", "reservation"]}
{"i": "3184686", "t": "Given an array of n elements such that one element repeats n/2 times and rest of the elements are distinct, how to find the repeating element ?", "k": ["times and rest", "find the repeating", "element repeats", "repeating element", "elements are distinct"]}
{"i": "3254661", "t": "You are given a sorted array that is rotated circularly from a particular point. for example 12345 rotated about 3, circularly is 34512\r  you have to search for a number in that list\r  in O(lgn)", "k": ["sorted array", "point", "rotated circularly", "rotated", "circularly"]}
{"i": "3250663", "t": "What should be the test strategy for testing a text engine?", "k": ["text engine", "test strategy", "strategy for testing", "testing a text", "engine"]}
{"i": "3246662", "t": "Amazon.com has the feature that if users search for particular CD or books etc then it also tells what other related books/CDs users bought.\rExample, if a user search for the book \"Introduction to Algorithms\" then it also shows users who bought this book also bought \"Robert Sedgewick - Alogrithms in C++\" or \"Fundamentals in Data Structures\".\r Assuming everything is maintained in memory & file system what algorithm will give this set of related intersection/connection ?", "k": ["cds users bought", "robert sedgewick", "fundamentals in data", "data structures", "cds users"]}
{"i": "3238672", "t": "there is 1000*1000 matrix each row is filed with 0 and 1 . left 1 right 0 once a 0 come thn 1 cannot come.. \rU have to find out the row which has maximum 1 and no. of 1 in that row..\r This thing hav to do in complexity O(n+constant)", "k": ["matrix each row", "left", "row is filed", "matrix", "thn"]}
{"i": "3210683", "t": "u hav root a node address and length is given\ru need to find all the node frm  give node which can be reachabe upto the given length.  It can be left or right or top of node.  but tree is simple binary which donot hav parent link", "k": ["frm give node", "node frm give", "frm give", "reachabe upto", "node address"]}
{"i": "3227675", "t": "Implement a phone book.\r 1. u can search either by name or phone number.\r2. u can serach by prefix also.\r3. They want to write whole code with proper syntax..\r I told its possible by hashing thn i come to tri... but whole code is too big to write. I almost took 1.5 hour to write", "k": ["phone book", "implement a phone", "implement", "book", "write"]}
