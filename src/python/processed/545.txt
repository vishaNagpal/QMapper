{"i": "315745", "t": "Given a 32-bit binary number, what is the quickest way to find the position of the most significant 1 bit?", "k": ["binary number", "find the position", "bit", "binary", "number"]}
{"i": "311132", "t": "Given a sequence of ascending integers that start at 1 and one integer is missing from the sequence, what is the quickest way to find the missing integer?", "k": ["ascending integers", "missing integer", "sequence of ascending", "find the missing", "sequence"]}
{"i": "315744", "t": "Given a cube of dimensions 10 x 10 x 10, if the outer layer is stripped off, how many units remain?", "k": ["cube of dimensions", "units remain", "outer layer", "layer is stripped", "dimensions"]}
{"i": "311117", "t": "#include<stdio.h>\r   #define TOTAL_ELEMENTS (sizeof(array) / sizeof(array[0]))\r  int array[] = {23,34,12,17,204,99,16};\r   int main()\r  {\r      int d;\r       for(d=-1;d <= (TOTAL_ELEMENTS-2);d++)\r          printf(\"%d\\n\",array[d+1]);\r       return 0;\r  }\rwhat is wrong ??", "k": ["define total", "int main", "int array", "array", "total"]}
{"i": "315714", "t": "How will you dynamically allocate 2D array? Use 2 malloc and then do the same thing using only 1 malloc.", "k": ["dynamically allocate", "array", "allocate", "malloc", "dynamically"]}
{"i": "311103", "t": "Design a TV remote control for children less than 6 years old.", "k": ["remote control", "control for children", "design", "years", "remote"]}
{"i": "315713", "t": "Write a function to generate all possible n pairs of balanced parentheses. For example, if n=1\r{}\rfor n=2\r{}{}\r{{}}", "k": ["write a function", "balanced parentheses", "function to generate", "pairs of balanced", "write"]}
{"i": "315708", "t": "Program 2: Implement an elevator system", "k": ["implement an elevator", "program", "elevator system", "implement", "system"]}
{"i": "315707", "t": "Program 1: Find the number with highest frequency in an array.", "k": ["find the number", "program", "find", "number with highest", "highest frequency"]}
{"i": "315706", "t": "In a telephonic interview:\r1. Advantages and disadvantages of recursions\r2. Comparison of BT and BST\r3. BFS and DFS - advantages and disadvantages\r4. how to detect a loop using DFS\r5. shortes path algorithm", "k": ["telephonic interview", "advantages and disadvantages", "dfs", "interview", "advantages"]}
{"i": "315673", "t": "Did you use any Maven repository like nexus? How Maven is better than ANT", "k": ["repository like nexus", "maven repository", "maven", "nexus", "ant"]}
{"i": "315672", "t": "How inheritance works in Hibernate, for example 1. Map one table per concrete class. explain all", "k": ["works in hibernate", "hibernate", "inheritance works", "inheritance", "works"]}
{"i": "311074", "t": "Generate a random number for SSN i,e int of xxx-xx-xxxx (9 digits), then write a function that checks if xxx and xx and xxxx and the total xxx-xx-xxxx is a prime number and return true or false. What is the complexity of the algorithm?", "k": ["ssn i,e int", "generate a random", "true or false", "write a function", "function that checks"]}
{"i": "315664", "t": "boggle solver problem: given a NxN matrix of letters, print all the valid words. You can make assumption on the dictionary to support hasPrefix, isWord etc. How would u write the recursive function in order to search word efficiently?", "k": ["boggle solver problem", "boggle solver", "solver problem", "matrix of letters", "nxn matrix"]}
{"i": "311055", "t": "#include<stdio.h>\r#define FUN(x,y) x##y\rint main()\r{    \r         int val1=10;\r         int val2=20;\r         printf(\"%d\\n\",FUN(val1,val2));\r         return 0;\r}\rwhat is the output of the program?", "k": ["define fun", "int main", "fun", "include", "stdio.h"]}
{"i": "311053", "t": "How to find minOfStack()in O(1). restriction is: pop()and  push() should be in O(1) only.", "k": ["find minofstack", "minofstack", "pop", "find", "restriction"]}
{"i": "311042", "t": "Write a code to clear nth bit in an integer.", "k": ["clear nth bit", "write a code", "code to clear", "clear nth", "nth bit"]}
{"i": "311041", "t": "Write a code to reverse words in a sentence of words. for ex: I am a boy --> boy a am I.", "k": ["write a code", "code to reverse", "reverse words", "sentence of words", "words"]}
{"i": "311039", "t": "scope of x,y,p,q and where respective variables are stored.\r static int x;\rint y;\r void foo()\r{ \rstatic int p;\rint q;\r}", "k": ["variables are stored", "respective variables", "static int", "int", "scope"]}
{"i": "311877", "t": "What is the use of volatile keyword in C?Gave a standard answer,asked to elaborate more.Don't know how.", "k": ["gave a standard", "answer,asked to elaborate", "gave", "volatile keyword", "standard answer,asked"]}
{"i": "311038", "t": "How is concurrency handled in operating systems?Difference between Mutex and Semaphores in context of threads and processes.", "k": ["difference between mutex", "mutex and semaphores", "semaphores in context", "operating systems", "threads and processes"]}
{"i": "311033", "t": "how would u implement mutex?", "k": ["implement mutex", "mutex", "implement"]}
{"i": "311870", "t": "how would you design a parking lot?", "k": ["parking lot", "design a parking", "lot", "design", "parking"]}
{"i": "311032", "t": "find most often seen string from a log file", "k": ["log file", "find", "file", "string", "log"]}
{"i": "311869", "t": "struct node{\r   struct node* next;\r   struct node* reference;\r}\r duplicate the list by: \rstruct node* duplicate(struct node* original)\r how to handle the \"reference\" in the new list?", "k": ["struct node", "struct", "node", "reference", "duplicate"]}
{"i": "311009", "t": "class A1 {\rpublic:\r  int upper;\r  int lower;\r  A1( int i ) : lower( i ), upper( lower+1 ) { };\r};\r what is wrong with the above code?", "k": ["int upper", "int lower", "int", "lower", "class"]}
{"i": "311004", "t": "class A {\r  // ...\r};\r class B : public A {\r  // ...\r};\r void fct( A a ) { /* ... */ };\r int main() {\r  B b;\r  fct( b );\r};\r what could be the errors because of this code?", "k": ["class", "fct", "void fct", "int main", "public"]}
{"i": "310994", "t": "You are given two arrays \rint Array1[n], Array2[n];\r Each array contains numbers which are half even and half odd. Write C code that will return two arrays one having only even numbers and other having only odd numbers. You are not allowed to use additional data structures like hash,array etc but can use temp variables. The solution should have O(n) complexity.", "k": ["arrays int", "half", "half odd", "numbers", "int"]}
{"i": "311842", "t": "You have a database which catalogs all the buildings in NY. You decide to use a 4 byte integer value as unique identifier for the table. Will it work ? \r (The answer would reduce to finding number of buildings in NY)", "k": ["database which catalogs", "buildings", "byte integer", "database", "catalogs"]}
{"i": "311841", "t": "What types of data structures can you use for Look ups? If you have an associative array A with index \"hello\". How is A[\"hello\"] actually evaluated , as in how does system map to a memory location using index \"hello\"", "k": ["types of data", "data structures", "ups", "index", "types"]}
