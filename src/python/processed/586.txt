{"i": "62796", "t": "Given location of huge number of points (you decide the data structure to represent them). Write a function that returns the number of points that are with distance D of a given point P.\r Write function, complete with what data structures, function signature etc.", "k": ["location of huge", "huge number", "number of points", "number", "points"]}
{"i": "62795", "t": "Question about Constructors, Destructors, Virtual functions, order in which these are called when creating objects, deleting objects etc.", "k": ["question about constructors", "virtual functions", "deleting objects", "called when creating", "destructors"]}
{"i": "62794", "t": "Design a One shot timer library capable of supporting multiple times simultaneously. Cancel is also supported. Only ONE hardware timer register.So basically, a process/function can call SetTime(10) and it will get notified after 10 seconds. It can also say SetTime(2)... SetTime(7). Then it will get two notifications, one after 2 and one after 7. [SetTime returns a handle]\r The process(s) can also issue a cancel. Cancel(handle), to cancel a specific timer they set. \r The hardware timer registers, assume decrements by 1 every 1 second. So if you set it to 10, it will notify you after 10 seconds. Basically it interrupts, and lets say calls RegExpired(). You can Read/Write this register anytime very fast (uS).\r The key here how you make use of this single register to support any number of timer events that applications/processes are demanding asynchronously.\r Discuss the data structure you would use and implement it in C.", "k": ["multiple times simultaneously", "supporting multiple times", "shot timer library", "timer library capable", "times simultaneously"]}
{"i": "62616", "t": "Make a nonblocking UART library given a underlying UART hardware, data registers and flags that mark end of transmission and stuff.\r This is very common. Simply look for Software UART in embedded systems. Also uses some OS concepts like round-robin, preventing spin locks etc.", "k": ["underlying uart hardware", "nonblocking uart library", "make a nonblocking", "data registers", "transmission and stuff"]}
{"i": "62615", "t": "Print a Link list in reverse order.\rGiven: PrintReverse(List *head){}\r Discuss Pros and cons of Inplace reversal, as compared to reversing by creating a new list. They were looking not only for Memory and Space, but also from a concurrency Point of View.", "k": ["print a link", "link list", "reverse order", "discuss pros", "link"]}
{"i": "62613", "t": "On campus Microsoft for SDET:\r1. Why SDET ?\r2. How do you approach a testing problem - Explain ?", "k": ["campus microsoft", "microsoft for sdet", "sdet", "microsoft", "explain"]}
{"i": "62792", "t": "How will you test a soda can?", "k": ["test a soda", "test", "soda"]}
{"i": "62791", "t": "You are given a set of reference files (.txt files). The files contain sentences in English language. You have to write a function to process these files. The input to the function is path to the files. Take each file, read each line and process it so that you get first word last, last word first and so on (reversing the order of the words) and send the words to a function that translates each word into Hebrew. Assume that you already have the function that translates to Hebrew. You just have to use it. Function prototype is not provided. You can make your assumptions.", "k": ["set of reference", "function", "files", "txt files", "english language"]}
{"i": "62598", "t": "Give the inorder,postorder& preorder forms of a tree in a single traversal", "k": ["give the inorder,postorder", "preorder forms", "single traversal", "give", "inorder,postorder"]}
{"i": "62774", "t": "Given an n*n matrix A. Each row of the matrix and each column of the matrix is sorted.\rGiven a number S, you are required to find S in the matrix( report k, l such that A[k,l] = S) or conclude S is not in A.\rHow can you solve it in O(n)?", "k": ["matrix", "sorted", "row", "column", "report"]}
{"i": "62762", "t": "code a function that returns the nth fibnocci number... coded it the most efficient way by using 3 variable... Then the interviewer wrote the recursive form and asked me what are the pros and cons of your(iterative) approach and recursive approach.", "k": ["nth fibnocci number", "code a function", "fibnocci number", "function that returns", "returns the nth"]}
{"i": "62591", "t": "REverse the words of a string.. Code it and write test cases.. Here many test cases failed ... Since I was able to point out myself what went wrong I think that covered up for the buggy code I wrote.", "k": ["reverse the words", "reverse", "string.", "write test cases.", "words"]}
{"i": "62590", "t": "Tell me about yourself and briefly describe what is in your resume", "k": ["briefly describe", "resume", "briefly", "describe"]}
{"i": "62761", "t": "Test a UI function that takes inputs from the keyboard keys 1,2,3,4,5,6,7,8,9,0,. and returns a valid mathematical value. Write different test cases for this function.", "k": ["keyboard keys", "returns a valid", "valid mathematical", "keys", "test"]}
{"i": "62589", "t": "Given a canoe, what test cases would you write for it.", "k": ["test cases", "canoe", "test", "cases", "write"]}
{"i": "62760", "t": "You have a coke machine that is spitting 2-3 coke cans a second. You have a requirement to test every coke can that comes out. What test cases will you automate?\r He made me think for 15 mins to get all possible wired things that you can test.. and also how you can test...\r This truly required a lot of thought .. In the end he was impressed ( lucky me :) )", "k": ["coke machine", "coke", "test", "spitting 2-3 coke", "machine"]}
{"i": "62759", "t": "You are a consulting company, that had done good once upon a time and now is in a almost bankrupt situation. \r Then a big client comes and says that they wanted to code a distributed application using HTTP. You know that for the scenario the client is describing, SOAP would do a much better job. But the client is adamant at going with HTTP. What would you do?", "k": ["consulting company", "bankrupt situation", "http", "client", "company"]}
{"i": "62588", "t": "How would you go about testing a pen? If you needed 10 weeks to test the pen comprehensively and you are 5 weeks into your work. Then they give another pen based on a new technology and ask you to test it along with the original pen within the remaining 5 weeks. What do you do?\r a) you shout at management saying that this is crazy\rb) You work overtime to complete the work\rc) you inform the management that the time is not sufficient\r I said a combination of b and c.", "k": ["pen", "weeks", "work", "testing", "pen comprehensively"]}
{"i": "62758", "t": "Given a string as input , say \" ababcdcec\", the output should be the number of times the character that has repeated the maximum. In the example a occurs twice, b occurs twice, c occurs thrice, d and e once each.. Thus the function should return 3.\r Asked to write test cases for this.( wrote arnd 10 ) for which the interviewer said that the testcases are 80-90% compprehensive", "k": ["string as input", "repeated the maximum", "number of times", "times the character", "occurs"]}
{"i": "62587", "t": "Why Microsoft? Which is your technically most challenging project? \r NOTE: These 2 questions were asked in every round of 5 onsite interview rounds", "k": ["microsoft", "note", "challenging project", "project", "technically most challenging"]}
{"i": "62586", "t": "Convert a doubly linked list to a binary search tree in place.", "k": ["doubly linked list", "binary search tree", "convert a doubly", "tree in place", "doubly linked"]}
{"i": "62755", "t": "divide an array of numbers into two set of numbers in such a way that difference in their sum of numbers is minimum.", "k": ["divide an array", "array of numbers", "set of numbers", "sum of numbers", "numbers"]}
{"i": "62754", "t": "in a given sorted array find two num whose difference is equal to a given number", "k": ["sorted array find", "sorted array", "array find", "find two num", "num whose difference"]}
{"i": "62584", "t": "in binary tree find two nodes whose sum is a given number in lg n time.", "k": ["binary tree find", "binary tree", "tree find", "find two nodes", "nodes whose sum"]}
{"i": "62583", "t": "in a given array of numbers, find all the set of 2 or more numbers whose sum is a given number.", "k": ["find", "array of numbers", "numbers whose sum", "numbers", "array"]}
{"i": "62582", "t": "print the tree in level by level i new line????", "k": ["print the tree", "print", "line", "tree in level", "level"]}
{"i": "62752", "t": "When u use free() in C how would system now the limits of the memory block that should be freed?", "k": ["memory block", "free", "freed", "system", "limits"]}
{"i": "62751", "t": "How would u debug a process that is using 99% of CPU?", "k": ["cpu", "debug a process", "debug", "process"]}
{"i": "62750", "t": "Types of polymorphism", "k": ["types of polymorphism", "types", "polymorphism"]}
{"i": "62733", "t": "you are given a binary tree....write a code that returns the leaf node \rpresent at topmost level....\rtwo leafs may be present at same level\r(take care of this condition)", "k": ["binary tree", "write a code", "code that returns", "leaf node present", "topmost level"]}
