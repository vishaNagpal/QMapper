{"i": "5654543980298240", "t": "Implement a2i - what are the edge cases you can think of? Signed integer only, subject to OS dependent MIN, MAX values", "k": ["implement", "edge cases", "dependent min", "min", "max"]}
{"i": "5718640562274304", "t": "Running with Bunnies\r====================\r You and your rescued bunny prisoners need to get out of this collapsing death trap of a space station - and fast! Unfortunately, some of the bunnies have been weakened by their long imprisonment and can't run very fast. Their friends are trying to help them, but this escape would go a lot faster if you also pitched in. The defensive bulkhead doors have begun to close, and if you don't make it through in time, you'll be trapped! You need to grab as many bunnies as you can and get through the bulkheads before they close. \r The time it takes to move from your starting point to all of the bunnies and to the bulkhead will be given to you in a square matrix of integers. Each row will tell you the time it takes to get to the start, first bunny, second bunny, ..., last bunny, and the bulkhead in that order. The order of the rows follows the same pattern (start, each bunny, bulkhead). The bunnies can jump into your arms, so picking them up is instantaneous, and arriving at the bulkhead at the same time as it seals still allows for a successful, if dramatic, escape. (Don't worry, any bunnies you don't pick up will be able to escape with you since they no longer have to carry the ones you did pick up.) You can revisit different spots if you wish, and moving to the bulkhead doesn't mean you have to immediately leave - you can move to and from the bulkhead to pick up additional bunnies if time permits.\r In addition to spending time traveling between bunnies, some paths interact with the space station's security checkpoints and add time back to the clock. Adding time to the clock will delay the closing of the bulkhead doors, and if the time goes back up to 0 or a positive number after the doors have already closed, it triggers the bulkhead to reopen. Therefore, it might be possible to walk in a circle and keep gaining time: that is, each time a path is traversed, the same amount of time is used or added.\r Write a function of the form answer(times, time_limit) to calculate the most bunnies you can pick up and which bunnies they are, while still escaping through the bulkhead before the doors close for good. If there are multiple sets of bunnies of the same size, return the set of bunnies with the lowest prisoner IDs (as indexes) in sorted order. The bunnies are represented as a sorted list by prisoner ID, with the first bunny being 0. There are at most 5 bunnies, and time_limit is a non-negative integer that is at most 999.\r For instance, in the case of\r[\r  [0, 2, 2, 2, -1],  # 0 = Start\r  [9, 0, 2, 2, -1],  # 1 = Bunny 0\r  [9, 3, 0, 2, -1],  # 2 = Bunny 1\r  [9, 3, 2, 0, -1],  # 3 = Bunny 2\r  [9, 3, 2, 2,  0],  # 4 = Bulkhead\r]\rand a time limit of 1, the five inner array rows designate the starting point, bunny 0, bunny 1, bunny 2, and the bulkhead door exit respectively. You could take the path:\r Start End Delta Time Status\r    -   0     -    1 Bulkhead initially open\r    0   4    -1    2\r    4   2     2    0\r    2   4    -1    1\r    4   3     2   -1 Bulkhead closes\r    3   4    -1    0 Bulkhead reopens; you and the bunnies exit\r With this solution, you would pick up bunnies 1 and 2. This is the best combination for this space station hallway, so the answer is [1, 2].\r   Test cases\r==========\r Inputs:\r    (int) times = [[0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 0]]\r    (int) time_limit = 3\rOutput:\r    (int list) [0, 1]\r Inputs:\r    (int) times = [[0, 2, 2, 2, -1], [9, 0, 2, 2, -1], [9, 3, 0, 2, -1], [9, 3, 2, 0, -1], [9, 3, 2, 2, 0]]\r    (int) time_limit = 1\rOutput:\r    (int list) [1, 2]", "k": ["bulkhead", "time", "bunnies", "bunny", "collapsing death trap"]}
{"i": "5727141812502528", "t": "Given 2 numbers (where 6 can also be written as 5, and 5 as 6), calculate the maximum and minimum possible sum\r Ex:- \r 645 666\r545 + 555\r 646 + 666", "k": ["calculate the maximum", "maximum and minimum", "minimum possible sum", "numbers", "calculate"]}
{"i": "5662382832484352", "t": "Given 2 numbers (where 6 can also be written as 5, and 5 as 6), calculate the maximum and minimum possible sum\r Ex :\r456 485\rMin 455 + 485\rMax 466 + 486", "k": ["calculate the maximum", "maximum and minimum", "minimum possible sum", "min", "max"]}
{"i": "5655717580111872", "t": "Random generate a NxN matrix with only four types of  element: 1,2,3,4. \rHowever, no column or row can have same type of element appears 3 times or above continuously (three same type of elements are connected)\r ex:\r valid:\r1 2 1 1\r3 1 4 2\r1 2 4 2\r3 1 2 3\r invalid because the first column has element 1 appears three times and all 1s are connected to each other :\r 1 2 1 3\r1 3 4 2\r1 2 4 4\r2 3 2 2", "k": ["random generate", "generate a nxn", "nxn matrix", "types of element", "type of elements"]}
{"i": "5670600447098880", "t": "If we have telephone directory with 1,00,000 entries,which sorting algorithm is best?", "k": ["entries,which sorting algorithm", "entries,which sorting", "telephone directory", "sorting algorithm", "entries,which"]}
{"i": "5726088203337728", "t": "I have Start time and End Time in a log file in lines next to each other. Can anyone suggest me Unix command to get output of Start time and Endtime in side by side columns", "k": ["start time", "end time", "time and end", "log file", "file in lines"]}
{"i": "5708853170667520", "t": "given the array of n elements can we output in sorted order k elements following median in sorted order in time O(n+klogk)", "k": ["sorted order", "output in sorted", "median in sorted", "order in time", "sorted"]}
{"i": "5750868554022912", "t": "An interesting question asked in Google\u2019s phone interview : suppose a row of parking lot with n spots, one of them is empty and n-1 spots are occupied with cars. Only one operation is allowed: move one car from its position to the empty spot. Given a initial order of cars and a final order, output steps needed to convert initial order to final oder with that operation. \r Follow up: Minimize steps needed.\r ex:\r {1 2 3 -1 4 5}\rmove car 1 to empty spot(denoted as -1) will make it {-1,2,3,1,4,5}\rpush 1 to the output list because you move car 1 to the empty spot\r suppose you have a initial order {1 2 3 -1 4 5} and a final order  {5,1,-1,3,2,4}, you need to transfer {1 2 3 -1 4 5} to {5,1,-1,3,2,4}, push each car moved into a output list.", "k": ["interesting question asked", "asked in google", "google \u2019s phone", "empty spot", "phone interview"]}
{"i": "5754499009347584", "t": "Given points on a plane like (0,0), (1,0), (0,1), (1,1), (0,2), (2,2), (1,2). How many rectangles can be formed ?", "k": ["points", "plane", "formed", "rectangles"]}
{"i": "5735204271423488", "t": "Write test conditions and test data to test a app which has login and signup screen on a mobile app and once you click on signup or login it takes you to a website to fill the remaining details(for sign up) or to perform any activities post login. The screens were provided with all the fields.", "k": ["write test conditions", "activities post login", "remaining details", "write test", "website to fill"]}
{"i": "5750385504419840", "t": "Write a code for reversing letters of string in java.", "k": ["write a code", "string in java", "code for reversing", "reversing letters", "letters of string"]}
{"i": "5667947767922688", "t": "Write code for implementing Binary Search algorithm.", "k": ["binary search algorithm", "implementing binary search", "binary search", "search algorithm", "implementing binary"]}
{"i": "6193411917873152", "t": "C++ Questions", "k": ["questions"]}
{"i": "5745463203463168", "t": "You are part of a team that develops push notifications on an app (android/iOS). The push notifications are sent out for ads published by a marketing team from a data source that they own. Come up with the test plan/cases", "k": ["develops push notifications", "push notifications", "develops push", "android", "ios"]}
{"i": "4786973605625856", "t": "With the best time complexity, please come up with a code to find the minimum delta of two elements from two different arrays of integers of different sizes - a[-3, 1, 999], b[-1, 2, 3]\r  Edit: Please dont forget the min delta can also be from b-a not just a-b", "k": ["time complexity", "code to find", "find the minimum", "arrays of integers", "dont forget"]}
{"i": "5685978980155392", "t": "Interview Question: essentially given a bunch of sets in an array, print out the cross product of all of those sets", "k": ["interview question", "cross product", "question", "bunch of sets", "sets"]}
{"i": "5728199582416896", "t": "Given two big files merge the files on to a third file such that the lines interleave.", "k": ["big files merge", "lines interleave", "big files", "files merge", "interleave"]}
{"i": "5727027861651456", "t": "Given an array of random numbers, shuffle the numbers once again with the least possibility of it being same as previous configuration.", "k": ["previous configuration", "array of random", "random numbers", "shuffle the numbers", "shuffle"]}
{"i": "5671211406196736", "t": "Given two linked lists find if they are making a shape of 'Y' or a shape of 'V'.", "k": ["linked lists find", "making a shape", "linked lists", "lists find", "shape"]}
{"i": "5747801813155840", "t": "Design an ATM machine system..", "k": ["atm machine system.", "design an atm", "atm machine", "machine system.", "atm"]}
{"i": "5198471469465600", "t": "Given a few pairs of names in the order child, father. The input is a person name and level number. The output should be the number of children in that particular level for the person given.\rExample:\rInput:\r[\r{Ram, Syam},\r{Akil, Syam},\r{Nikil, Ram},\r{Subhash, Ram},\r{Karthik, Akil}\r];\r Syam 2\r Output: 3 (Syam has Ram and Akil in level 1 and in level 2 he have Nikil, Subhash, Karthik. So the answer is 3).", "k": ["order child", "syam", "ram", "subhash", "akil"]}
{"i": "5072809853190144", "t": "Given a singly linked list of integers, write a function in java that returns true if the given list is palindrome, else returns false", "k": ["singly linked list", "write a function", "returns false", "singly linked", "function in java"]}
{"i": "5699311095513088", "t": "Convert an unordered tree to a binary tree", "k": ["convert an unordered", "unordered tree", "binary tree", "convert", "tree"]}
{"i": "5733590840115200", "t": "merge two binary search trees", "k": ["binary search trees", "merge two binary", "search trees", "binary search", "merge"]}
{"i": "5713851707293696", "t": "Sort a stack using only one other stack and no recursion.", "k": ["sort a stack", "sort", "recursion", "stack"]}
{"i": "5716926367006720", "t": "Does it relevant to my professional?", "k": ["professional", "relevant"]}
{"i": "5639110149537792", "t": "Questions to be asked from my profession", "k": ["questions", "profession", "asked"]}
{"i": "5123159217930240", "t": "Given a string and dictionary of words, form a word by removing minimum number of characters. Characters can be removed in-order only.", "k": ["removing minimum number", "string and dictionary", "removing minimum", "minimum number", "form a word"]}
{"i": "5765048791203840", "t": "I was asked to design a stock ticker system. Stock ticker is simply the shortened name of company and its current stock size. e.g. for Apple - \"AAPL\" -> \"115\"\rHe asked me to design a data structure to store incoming stream of stock tickers. Stream can contain same company more than once but all the values of it had to be stored. I used HashMap<String, List<Integer>>. Then he was adding more functionalities to system I don't exactly remember the questions now but one of them was related to calculating some ratio in constant time. Some of the questions were challenging.", "k": ["stock ticker", "stock", "stock ticker system", "current stock size", "design"]}
