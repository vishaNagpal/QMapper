{"i": "10137779", "t": "skills assesment test had more or less similar kind of questions posted here. Other tests included some peculiar math test which had some really peculiar ques....Neway, the interview left a bad taste in my mouth....after doing everything pretty well in onsite...they still rejected me...God knows on what basis do they hire !", "k": ["skills assesment test", "skills assesment", "similar kind", "kind of questions", "questions posted"]}
{"i": "10065160", "t": "If we contact your references, what strong qualities would each one of them tell about you, also what areas would they say you need improvement.", "k": ["contact your references", "strong qualities", "references", "improvement", "contact"]}
{"i": "10129730", "t": "write paranthesis matching code and to find palindrome .", "k": ["write paranthesis matching", "paranthesis matching code", "write paranthesis", "find palindrome", "paranthesis matching"]}
{"i": "10130722", "t": "3 divides 111 , 13 divides 111111 etc.. find a number having all one's which is shortest divisible by a given number which has 3 as its last digit.", "k": ["divides", "etc.", "number", "find", "digit"]}
{"i": "9960553", "t": "n=4 and k=3 . team name can be formed by four digits 1,2,3,4 . so n=4 now make team number using any three digits so that b1<b2<b3. Basically print numbers which are in form b1<b2<b3..e.g. 123,124,234 etc", "k": ["make team number", "make team", "team", "digits", "team number"]}
{"i": "10128665", "t": "How many child processes will be generated by the following?\r void main() {\r         int p1= fork();\r         if (p1 == 0) {\r              int p2 = fork();\r              if (p2 != 0) {\r                   fork();\r              }\r         }\r }", "k": ["child processes", "fork", "int", "void main", "child"]}
{"i": "10125764", "t": "A \"Most efficient data structure\" is designed to optimize the following operations. Pop, Push, Min. The best possible time-complexities with no extra space, respectively would be?", "k": ["efficient data structure", "data structure", "efficient data", "designed to optimize", "push"]}
{"i": "10124752", "t": "Write a function that takes an input string and a pattern string and returns a collection of indices of occurences of pattern within the input string.", "k": ["input string", "write a function", "returns a collection", "collection of indices", "indices of occurences"]}
{"i": "10123753", "t": "A test plan and cases for a highway system that has three components: (a) a camera that takes pictures of vehicle license plates (b) an embedded system that sends the image taken by the camera and send it to (c) some OCR... link server that actually processes the image and sends details to DMV ticketting system", "k": ["vehicle license plates", "license plates", "test plan", "plan and cases", "pictures of vehicle"]}
{"i": "10082763", "t": "* What exactly I work and my responsibilities\r* How do I approach improving efficiency and testing plans", "k": ["approach improving efficiency", "testing plans", "approach improving", "improving efficiency", "efficiency and testing"]}
{"i": "9952495", "t": "Given two arrays \ra[] = {1,3,2,4} \rb[] = {4,2,3,1} \rboth will have the same numbers but in different combination. \rWe have to sort them . The condition is that you cannot compare only \relements within the same array.", "k": ["combination", "numbers", "compare only elements", "arrays", "array"]}
{"i": "10123730", "t": "Given a number N find the next number M which is greater than N and the difference between M and N is small and  M consists of same digits as N ! i.e M is an anagram of N ...\rExample : 678   -- Ans=687\r          52430 -- Ans=53024\rif number is 876 ans=no solution", "k": ["ans", "number", "number n find", "find", "greater"]}
{"i": "10094152", "t": "will abstract class creates virtual table or not?", "k": ["abstract class creates", "class creates virtual", "creates virtual table", "abstract class", "class creates"]}
{"i": "10123696", "t": "Convert the BST to sorted doubly linked list , don't use additional data struct.", "k": ["doubly linked list", "additional data struct", "convert the bst", "sorted doubly linked", "bst to sorted"]}
{"i": "10122695", "t": "Print the M*N matrix in spiral manner.", "k": ["spiral manner", "matrix in spiral", "print", "manner", "matrix"]}
{"i": "10125690", "t": "Write a C code to find Leftmost right cousin at the same level.\r For ex:\r               10\r               /\\\r              2  3\r             /\\  /\\\r            8  56  9\r Leftmost right cousin of 5 is 6. Leftmost right cousin of 3 is NULL.", "k": ["leftmost right cousin", "code to find", "find leftmost", "leftmost", "cousin"]}
{"i": "10125685", "t": "Reverse link list using recursion.", "k": ["reverse link list", "reverse link", "list using recursion", "link list", "reverse"]}
{"i": "10123689", "t": "Write a algo for implementing the word prediction for MS word.", "k": ["write a algo", "algo for implementing", "word prediction", "write", "implementing the word"]}
{"i": "10125684", "t": "Write a validate function for sort API , which cover all the validations for sort . Not particular about lines of code, but looking for varieties , and logic of the code.", "k": ["sort api", "write a validate", "validate function", "function for sort", "validations for sort"]}
{"i": "9952444", "t": "result of this:select *\r\nfrom A, B;", "k": ["select", "result"]}
{"i": "9979019", "t": "How do you make variables public, private, or protected in Perl?", "k": ["make variables public", "protected in perl", "private", "variables public", "perl"]}
{"i": "9952443", "t": "Program to check validity of an email id.", "k": ["program to check", "check validity", "program", "check", "validity"]}
{"i": "9952442", "t": "Find the largest and smallest element in binary tree/binary search tree at level n.", "k": ["binary search tree", "find the largest", "largest and smallest", "smallest element", "binary search"]}
{"i": "9952441", "t": "Write test cases for smple TFTP program.", "k": ["smple tftp program", "write test cases", "tftp program", "smple tftp", "write test"]}
{"i": "10122688", "t": "Describe the difference between $_ and @_ .", "k": ["describe the difference", "describe", "difference"]}
{"i": "10094143", "t": "result of this:main()\r\n{\r\n  fork();\r\n  fork();\r\n  fork();\r\n\r\n    printf(\"hello\\n\");\r\n}", "k": ["fork", "main", "printf", "result"]}
{"i": "10123686", "t": "Given string input1, input2, remove wherever the occurrence of input2 in input1.\re.g: \rinput1: skjthshetheshetesm\rinput2: she\rinput1 will become \"skjththetesm\" \rGive the test cases.", "k": ["give the test", "string", "remove", "occurrence", "give"]}
{"i": "10123684", "t": "given an array , find three  numbers a,b and c such that a^2+b^2=c^2   ..\rI have given algo of o(n^2) complexity. But he is expecting still better algo.", "k": ["find three numbers", "array", "find", "numbers", "algo"]}
{"i": "10064862", "t": "The 2020 is a number where index value is equal to number of times occurrence of index in number. for eg: for 2020\rindex(0)=2 (as 0 occured 2 times in 2020)\rindex(1)=0 (as 1 occured 0 times)\rindex(2)=2 (as 2 occured 2 times)\rindex(3)=0 (as 3 occured 0 times)\r Now input given is a number, determine whether the given number posses property same as 2020 (given as example in above question)", "k": ["occured", "index", "number", "times", "times occurrence"]}
{"i": "9987845", "t": "This was the technical question in the recent interview..Print a n*n matrix in spiral order and what will be the consequences(if u use recursion) in case of larger matrices like 10000*10000..", "k": ["recent interview.", "technical question", "matrix in spiral", "spiral order", "case of larger"]}
