{"i": "5700124508946432", "t": "Write a function which returns \rthe multiplication of two inputs,\rwithout using \"return\"", "k": ["write a function", "write", "inputs", "returns the multiplication", "function which returns"]}
{"i": "5155170200059904", "t": "Imagine you have a computer keyboard that has all the letters mismatched\r example:\rtyping q gives you a\rtyping w gives you b\r all 26 letters in the alphabet are there, but typing one letter will give you another one\r you are asked to write an algorithm to find whatever word you tried to type and count how many cycles you did to find the word\r a restriction was set you need to type the whole word every time, not go character by character\r note: a graph was suggested to represent the letter mappings", "k": ["character note", "letter mappings", "algorithm to find", "computer keyboard", "asked to write"]}
{"i": "5713881264029696", "t": "Replace each number by its next bigger number from right side of current index. if no bigger number found print that number itself.\r Eg: 2,5,9,6,3,4,8,15,12\rOutPut : 3,6,12,8,4,8,12,15,12", "k": ["current index", "side of current", "bigger number", "bigger number found", "number"]}
{"i": "5710647581474816", "t": "Convert a binary tree to a doubly linked circular linked list.(Tree is binary and not BST).Hint: using Inorder Traversal", "k": ["inorder traversal", "circular linked list.", "doubly linked circular", "linked circular linked", "linked list."]}
{"i": "5638939143045120", "t": "Given many coins of 3 different face values, print the combination sums of the coins up to 1000. Must be printed in order. \r eg: coins(10, 15, 55) \rprint: \r10 \r15 \r20 \r25 \r30 \r. \r. \r. \r1000", "k": ["combination sums", "print", "coins", "print the combination", "face"]}
{"i": "5642455983063040", "t": "You have an array of numbers. You have to give the range in which each number is the maximum element. For Example, If array is [1, 5, 4, 3, 6] The output would be\r 1 [1, 1]\r5 [1, 4]\r4 [3, 4]\r3 [4, 4]\r6 [1, 5]", "k": ["maximum element", "array", "give the range", "numbers", "number"]}
{"i": "5635225112018944", "t": "Bonus question -5: Build all permutations of a char array", "k": ["bonus question", "build all permutations", "char array", "build", "bonus"]}
{"i": "5708239824486400", "t": "4.\tFind an algorithm for finding the longest ascending order sub-sequence in an unsorted array of integers.\r Example: { 16, 4, 8, 22, 33, 7, 71}  == > { 16, 22, 33, 71 }", "k": ["find an algorithm", "array of integers", "longest ascending order", "ascending order sub-sequence", "algorithm for finding"]}
{"i": "5714864970924032", "t": "3.\tImplement a descending and ascending sort by building a binary tree and traversing it.", "k": ["implement a descending", "descending and ascending", "ascending sort", "sort by building", "building a binary"]}
{"i": "5765135549857792", "t": "2.\tImplement a double linked list", "k": ["implement a double", "linked list", "implement", "list", "double linked list"]}
{"i": "5767922421596160", "t": "C test \u2013 3 hours (see also other questions: 1 to 5\r1.\tWrite a function which compares two strings \u2013\rInt strcmp (char* S1, char* S2)", "k": ["hours", "char", "int strcmp", "test", "questions"]}
{"i": "5680910008057856", "t": "How do you make your pages performant?", "k": ["pages performant", "make your pages", "performant", "make", "pages"]}
{"i": "5684367188295680", "t": "What are the advantages of using React?", "k": ["react", "advantages"]}
{"i": "5736999890190336", "t": "Implement the .reduce function of Javascript in plain JS.", "k": ["function of javascript", "javascript in plain", "reduce function", "javascript", "implement"]}
{"i": "5632054486630400", "t": "How to find out distinct ngrams from a email_alias.\rFor instance xyz@gmail.com here the email_alias is xyz.for xyz if we want to find bigram then function should have input the email_id,and the number of grams lets say 2.\rThan it has to return the distinct count of ngrams present in the email_alias.", "k": ["email", "alias", "input the email", "find", "find bigram"]}
{"i": "5726975948226560", "t": "[Google] Design Text Editor (Doubly Linked List)\rBuild a text editor class with the following functions,\r moveCursorLeft(),\r moveCursorRight(),\r insertCharacter(char) //insert the char right before cursor\r backspace() //delete the char right before cursor\r Follow-up\rImplement undo() //undo the last edit. Can be called multiple times until all edits are cancelled.\r All functions above should take O(1) time.\r Example\r ( '|' denotes where the cursor locates. 'text' shows what's been written to the text editor. )\r Start with empty text\rtext = \"|\"\r insertCharacter('a')\rtext = \"a|\"\r insertCharacter('b')\rtext = \"ab|\"\r insertCharacter('c')\rtext = \"abc|\"\r moveCursorLeft()\rtext = \"ab|c\"\r moveCursorLeft()\rtext = \"a|bc\"\r backspace()\rtext = \"|bc\"\r moveCursorLeft()\rtext = \"|bc\" (nothing happens since cursor was on the leftmost position)\r undo()\rtext = \"a|bc\"\r undo()\rtext = \"ab|c\"\r undo()\rtext = \"abc|\"\r undo()\rtext = \"ab|\"\r undo()\rtext = \"a|\"", "k": ["doubly linked list", "cursor follow-up implement", "follow-up implement undo", "doubly linked", "linked list"]}
{"i": "5731072835321856", "t": "How would you implement jQuery' s addClass and removeClass functions using vanilla JS? What other variations you can use? Can you pass multiple parameters for classnames ? How will you make these vanilla JS functions asynchronous? Make this component re-usable. \r The implementation must respond to something like this:$('#container')\r\n.addClass('blue')\r\n.addClass('bg-lime')\r\n.addClass('bold')\r\n.addClass('font-medium-italic')\r\n.addClass('border-solid-pink');", "k": ["implement jquery", "removeclass functions", "addclass", "jquery", "vanilla"]}
{"i": "5112653379272704", "t": "l1=[1,2,3,4]\rl2=[1,3,6,7,null,null,null,null]\routput: l2=[1,1,2,3,3,4,6,7]", "k": ["output"]}
{"i": "5750713720766464", "t": "k=2, l=[1,2,3,4,5,6]\routput: l=[5,6,1,2,3,4]\rIn place O(1) space complexity", "k": ["space complexity", "output", "space", "complexity", "place"]}
{"i": "5127312614359040", "t": "How to solve a Facebook security problem", "k": ["facebook security problem", "solve a facebook", "facebook security", "security problem", "facebook"]}
{"i": "5703350608199680", "t": "create a custom feature transformer in spark scala.Lets say dataframe is like below\r +--------------------+ .  \r|          email_list| .  \r+--------------------+ .  \r|testmail1115@gmail.com| .  \r|mavenmaven@mlail.com| .  \r|dnd.7899334622@gmail.com| .  \r+--------------------+ .  \rIf i use the transformer it converts the input array of strings into an array of n-grams.like below:\r +--------------------+--------------------+  \r|          email_list|              ngrams| .  \r+--------------------+--------------------+   \r|testmail1115@gmail.com|[t e, e s, s t, t...|  \r|mavenmaven@mlail.com|[m a, a v, v e, e...| .  \r|dnd.7899334622@gmail.com|[d n, n d, d...| .  \r+--------------------+--------------------+ .  \rHow to get the distinct ngram present rather the pattern or array .", "k": ["custom feature transformer", "distinct ngram present", "gmail.com", "create a custom", "custom feature"]}
{"i": "5722933872295936", "t": "Let's assume we have a queue named 'Demo' which receives messages from various users. \r Create a Listener which will listen to the queue 'Demo' continuously and as soon as the message is send to the queue the Listener will print out the message.\r The queue is running on port : 8161\rUsername : admin\rPassword : admin", "k": ["demo", "queue named", "receives messages", "queue", "listener"]}
{"i": "5740997808488448", "t": "Given a string s contains lowercase alphabet, find the length of the Longest common Prefix of all substrings in O(n)\r For example\r s = 'ababac'\r Then substrings are as follow:\r 1: s(1, 6) = ababac\r2: s(2, 6) = babac\r3: s(3, 6) = abac\r4: s(4, 6) = bac\r5: s(5, 6) = ac\r6: s(6, 6) = c\r Now, The lengths of LCP of all substrings are as follow\r 1: len(LCP(s(1, 6), s)) = 6 \r2: len(LCP(s(2, 6), s)) = 0\r3: len(LCP(s(3, 6), s)) = 3\r4: len(LCP(s(4, 6), s)) = 0\r5: len(LCP(s(5, 6), s)) = 1\r6: len(LCP(s(6, 6), s)) = 0\r String contains only lowercase alphabates.", "k": ["longest common prefix", "longest common", "common prefix", "find the length", "lcp"]}
{"i": "5769933607141376", "t": "Implement singleton pattern\rAll types of containers, datastrutures, there differences, Project details, C++ concepts", "k": ["project details", "implement singleton pattern", "datastrutures", "concepts", "implement singleton"]}
{"i": "5684127005671424", "t": "Implement phone book <unique name, number>\r1.Sorted phone book\r2.searching based on name\r3Searching based on number. What are the data strutures required", "k": ["implement phone book", "phone book", "implement phone", "based on number", "book"]}
{"i": "5723022229504000", "t": "#include <iostream>\rusing namespace std;\rint main()\r{\rint a = 32, *ptr = &a;\rchar ch = 'A', &cho = ch;\rcho += a;\r*ptr += ch;\rcout << a << \", \" << ch << endl;\rreturn 0\r}", "k": ["int main", "namespace std", "ptr", "cho", "int"]}
{"i": "5730832224878592", "t": "code Bubble sort, and modify it to return if the array is already sorted.\r2.If single swap is needed perform and break without going through o(n2) looping", "k": ["code bubble sort", "code bubble", "bubble sort", "bubble", "code"]}
{"i": "5653724005924864", "t": "In a hashtable you can only ask for the most recent value for a key. We are going to build a hashtable where you can ask for a key at any time in the past.\r API is: \r get(k, t) // get the value for k at time t\rput(k, v)  // insert k, v at time()\r time is given as a monotonically increasing version of unix system time.", "k": ["time", "hashtable", "key", "build a hashtable", "recent"]}
{"i": "5734406241648640", "t": "In this assignment, you will work on regular expression. For simplicity, we will assume that there is a fixed set of regular expressions. We will not consider out of these. But you must not use any built-in method or package in your implementation. If you need any method, you will write that.In Regular Expression (RE), '*' means occurrence of zero of more characters, '+' indicates happening of one or more characters, '?'  means only once or not at all occurrence, '[ ]' indicates happening of inclusive characters, '^' indicates that next characters will not be used in the pattern, '[a-d]{3}' indicates that valid string will be exactly of  length 3 inclusively using a, b, c, d. The following table contains a fixed set of RE that will be used in our assignment.\r  User will be asked first to input an integer value n followed by n lines of regular expressions. Then user will be asked to input another integer value m followed by m lines of text string. Your job is to say 'YES' with index of RE if the text string is valid according to any of given regular expressions. Otherwise, say 'NO' with zero index. I repeat, you must not use any built-in regular expression method or package.But you can take help from Cloud.\r   Input:\r2\rab*c*d\ra*b(cd)+e?f\r3\racccd\rabbbbbcccc\rbcdcdef\r Output:\rYES, 1\rNO, 0\rYES, 2\r  Input:\r3\r[a-c]{3}cab+(da)*f\rdb*a[^def]{2}gh\rdef[k-p]*p+\r5\rdefkmnpmpp\racbcabbf\rpqrstdd\rdbaabggh\rdbbbbamkgh\rOutput:\rYES, 3\rYES, 1 \rNO, 0\rNO, 0\rYES, 2", "k": ["regular expression", "regular", "regular expression method", "input", "expression"]}
{"i": "5763748409638912", "t": "[Google On-site 2018 Winter]\rSet Matrix Zeroes II\rThere are orbs on an NxM board ('O' denotes orb. 'X' denotes empty slot).\r Whenever two orbs are in the same column or the same row, you get to erase one of them.\r Try to erase as many orbs as possible.\r Find the minimum number of orbs remained on board eventually.\r e.g.\r         OXOXXO\r         XXXXXO\r         XXXXOX\r erase (0,0) and get\r         XXOXXO\r         XXXXXO\r         XXXXOX\r erase (2,0) and get\r        XXXXXO\r         XXXXXO\r         XXXXOX\r erase (5,0) and get\r         XXXXXX\r         XXXXXO\r         XXXXOX\r no more moves available. Return 2 e.g.\r         OXOXXO\r         XXXXXO\r         XXOXOX    \rerase(4,2), (2,2), (0,0), (2,0), (5,0)\r Return 1\re.g.\r        OXOXXX\r         XOXXXO\r         XXXOOX\r erase(0,0), (1,1), (3,2)\r Return 3\r Follow-up Build a solver for this board game that erases the as many orbs as possible.", "k": ["set matrix zeroes", "google on-site", "set matrix", "matrix zeroes", "denotes empty slot"]}
