{"i": "6203547599241216", "t": "Find a triplet that sum to a given value in an array of integers. I know it can be done in O(n^2) with either using a hashmap(space O(n)) or pre-sorting(space O(1)) the array. Is there any way to do this better than O(n^2)?", "k": ["find a triplet", "triplet that sum", "array of integers", "space", "find"]}
{"i": "5975394641510400", "t": "Implement a sudoku solution verifier function. \u00a0The rules for sudoku is this:\r You have a 9 by 9 board. \u00a0This board is divided into nine rows, nine columns, and nine 3x3 blocks. \u00a0In a solved puzzle, every row, every column, and every 0 block has to contain each of the digits from 1 to 9. \u00a0This is an example of a solved puzzle:248|395|716\r\n571|628|349\r\n936|741|582\r\n---+---+---\r\n682|539|174\r\n359|174|628\r\n714|862|953\r\n---+---+---\r\n863|417|295\r\n195|286|437\r\n427|953|861", "k": ["solution verifier function", "sudoku solution verifier", "verifier function", "solution verifier", "sudoku solution"]}
{"i": "6246597667061760", "t": "Given a set of numbers, find those numbers that occur odd number of times. I used the hash table approach where  I insert the count (no. of times occurred as of now) of the current number whose hash I am making. Time complexity: O(n). Space complexity: O(n).", "k": ["occur odd number", "occur odd", "odd number", "find", "times"]}
{"i": "5399745006665728", "t": "Find the smallest number m(>0) whose product of digits equal to a given number n.\rex:- n = 24 and m = 38\rn = 12 and m = 26", "k": ["find the smallest", "product of digits", "digits equal", "smallest number", "number"]}
{"i": "5632873147138048", "t": "Design a program that would select which elevator in a building would be the most efficient, based on where the elevator is located and headed and where the user is located and headed.", "k": ["located and headed", "design a program", "user is located", "elevator is located", "located"]}
{"i": "5118048302268416", "t": "Print all the elements in an array that have occurred an odd number of times. I know we can XOR all numbers, but that only solves the problem where there is only one odd number in the array. But I was asked to find all of them. Another method I can think of is to keep one hashset, then walk through the array, if the number is in the map, remove it. If the number is not present, add it. But this requires O(n) space. Is there any way to do this with O(n) time and O(1) space?", "k": ["odd number", "number", "array", "occurred an odd", "odd"]}
{"i": "6478794906927104", "t": "You are trying to cook an egg for exactly 15 minutes, but instead of a timer, you are given two\rropes which burn for exactly 1 hour each. The ropes, however, are of uneven densities \u2013 eg,\rhalf the rope length-wise might take only 2 minutes to burn?", "k": ["cook an egg", "minutes", "timer", "hour", "burn"]}
{"i": "5711223014293504", "t": "public interface Intervals {\r\n \r\n    /**\r\n     * Adds an interval [from, to] into internal structure.\r\n     */\r\n    void addInterval(int from, int to);\r\n \r\n \r\n    /**\r\n     * Returns a total length covered by intervals.\r\n     * If several intervals intersect, intersection should be counted only once.\r\n     * Example:\r\n     *\r\n     * addInterval(3, 6)\r\n     * addInterval(8, 9)\r\n     * addInterval(1, 5)\r\n     *\r\n     * getTotalCoveredLength() -> 6\r\n     * i.e. [1,5] and [3,6] intersect and give a total covered interval [1,6]\r\n     * [1,6] and [8,9] don't intersect so total covered length is a sum for both intervals, that is 6.\r\n     *\r\n     *                   _________\r\n     *                                               ___\r\n     *     ____________\r\n     *\r\n     * 0  1    2    3    4    5   6   7    8    9    10\r\n     *\r\n     */\r\n    int getTotalCoveredLength();\r\n}", "k": ["public interface intervals", "public interface", "internal structure", "adds", "addinterval"]}
{"i": "6511672982241280", "t": "A(1) = () \rA(2) = (())\rA(3) = (()) ()\rA(4) = (())() (())\rA(5) = (())()(()) (())()\r A(N) = A(N-1) + A(N-2)\r I/P: N, i \r O/P: A(N).charAt(i);\r Interviewer was not looking at iterative or recursive solution. He was looking at a closed form solution.", "k": ["iterative or recursive", "closed form solution", "recursive solution", "form solution", "interviewer"]}
{"i": "5681506135572480", "t": "Given an array of numbers find the maximum count of duplets and triplets such that there sum is a multiple of three. Number that has appeared once can\u2019t be included anywhere else.", "k": ["find the maximum", "maximum count", "count of duplets", "duplets and triplets", "numbers find"]}
{"i": "5473489091821568", "t": "Given an array of n distinct integers sorted in ascending order. Find an index i s.t ar[i] = i. Return -1 if no such index exists. Note that integers in array can be negative.", "k": ["ascending order", "distinct integers sorted", "sorted in ascending", "distinct integers", "integers sorted"]}
{"i": "4872867141386240", "t": "Write a program for finding a minimum element in rotated sorted array(either ascending or descending ) and array contains duplicates.", "k": ["rotated sorted array", "write a program", "ascending or descending", "program for finding", "finding a minimum"]}
{"i": "5447822065270784", "t": "Suppose you are a project manager and you're certain your project is going to be late. What actions should you take?", "k": ["project manager", "project", "suppose", "late", "manager"]}
{"i": "5375484615458816", "t": "What are the most important things to a software development project?", "k": ["software development project", "development project", "important things", "software development", "project"]}
{"i": "5476282397622272", "t": "What is integration testing?", "k": ["integration testing", "testing", "integration"]}
{"i": "5938434568880128", "t": "What types of security testing do you know? do you know SQL injections?", "k": ["types of security", "security testing", "sql injections", "types", "security"]}
{"i": "4859859027623936", "t": "Give us an example of meeting a deadline that you are particularly proud of", "k": ["meeting a deadline", "give", "meeting", "deadline", "proud"]}
{"i": "5073041071538176", "t": "What is your greatest failiure?", "k": ["greatest failiure", "failiure", "greatest"]}
{"i": "6048242118688768", "t": "Do you know any C#?", "k": []}
{"i": "6039232351043584", "t": "Are you familiar with .NET?", "k": ["net", "familiar"]}
{"i": "4922342211846144", "t": "What is polymorphism? what does it do?", "k": ["polymorphism"]}
{"i": "4571249070047232", "t": "What are design patterns?", "k": ["design patterns", "patterns", "design"]}
{"i": "4804004722769920", "t": "There are N objects kept in a row. The ith object is at position x_i. You want to partition them into K groups. You want to move all objects belonging to the same group to the same position. Objects in two different groups may be placed at the same position. What is the minimum total amount by which you need to move the objects to accomplish this?\r Input:\rThe first line contains the number of test cases T. T test cases follow. The first line contains N and K. The next line contains N space seperated integers, denoting the original positions x_i of the objects.\r Output:\rOutput T lines, containing the total minimum amount by which the objects should be moved.\r Constraints:\r1 <= T <= 1000\r1 <= K <= N <= 200\r0 <= x_i <= 1000\r Sample Input:\r3\r3 3\r1 1 3\r3 2\r1 2 4\r4 2\r1 2 5 7\r Sample Output:\r0\r1\r3\r Explanation:\r For the first case, there is no need to move any object.\rFor the second case, group objects 1 and 2 together by moving the first object to position 2.\rFor the third case, group objects 1 and 2 together by moving the first object to position 2 and group objects 3 and 4 together by moving object 3 to position 7. Thus the answer is 1 + 2 = 3.", "k": ["objects", "position", "object", "group objects", "group"]}
{"i": "6222132728037376", "t": "sort the array so that the odd number in front of the even number and their relative order doesn't change in Time O(n) and Space O(1). I believe quickselect can do this, but it will change the relative order of the input.", "k": ["sort the array", "relative order", "odd number", "change in time", "number in front"]}
{"i": "5726366532108288", "t": "/** \r* Return the smallest character that is strictly larger than the search character, \r* If no such character exists, return the smallest character in the array\r* @param sortedStr : sorted list of letters, sorted in ascending order.\r* @param c : character for which we are searching.\r* Given the following inputs we expect the corresponding output:\r* ['c', 'f', 'j', 'p', 'v'], 'a' => 'c'\r* ['c', 'f', 'j', 'p', 'v'], 'c' => 'f'\r* ['c', 'f', 'j', 'p', 'v'], 'k' => 'p'\r* ['c', 'f', 'j', 'p', 'v'], 'z' => 'c' // The wrap around case\r* ['c', 'f', 'k'], 'f' => 'k'\r* ['c', 'f', 'k'], 'c' => 'f'\r* ['c', 'f', 'k'], 'd' => 'f'\r*/", "k": ["return the smallest", "smallest character", "sorted list", "list of letters", "ascending order"]}
{"i": "6461301740011520", "t": "Explain some of the text encoding types and advantages/disadvantages of each.", "k": ["text encoding types", "types and advantages", "text encoding", "encoding types", "explain"]}
{"i": "5707498740776960", "t": "If your browser crashes, how would you debug it only using the command line?", "k": ["browser crashes", "command line", "crashes", "line", "browser"]}
{"i": "5067995290271744", "t": "There are 3 ants at 3 corners of an equilateral triangle they randomly start moving towards another corner what is the probability that they do not collide? Follow up: Suppose if all ants go in same direction(say ant 1 travels from point A to B, ant 2 from B to C and ant 3 from C to A. Either all ant travels in  clockwise or anti clockwise) when will they collide", "k": ["randomly start moving", "equilateral triangle", "triangle they randomly", "randomly start", "start moving"]}
{"i": "5630945243693056", "t": "design an iterator over a LinkedList of LinkedList's", "k": ["design an iterator", "design", "linkedlist", "iterator", "linkedlist of linkedlist"]}
{"i": "4716571167555584", "t": "How will you sort 1 billion integers stored in an array?", "k": ["billion integers stored", "billion integers", "integers stored", "sort", "billion"]}
