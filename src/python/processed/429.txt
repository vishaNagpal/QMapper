{"i": "10037928", "t": "Given a binary tree and head node, write a function that takes head node and some node as input and returns leftmost right cousin of it.\rex:\r          1\r        /   \\\r       2     3\r      / \\   / \\\r     3   4 5   6\rfor the above tree if node 4 is given as input then the function should return 5 as output.", "k": ["head node", "leftmost right cousin", "binary tree", "returns leftmost", "write a function"]}
{"i": "9987819", "t": "In an array find out the nth maximum number.", "k": ["nth maximum number", "maximum number", "array find", "nth maximum", "number"]}
{"i": "10118672", "t": "Given an unsorted array. How to find out the maximum number.\rThen how to do it in minimum number of comparisions\rThen how to find out the second largest number", "k": ["unsorted array", "array", "find", "number", "unsorted"]}
{"i": "10118671", "t": "Asked me what is heap corruption.\rProcess n threads.\rWhat threads share with each other.", "k": ["heap corruption", "asked", "corruption", "heap", "threads"]}
{"i": "9960843", "t": "How will you implement your own garbage collector in C.", "k": ["garbage collector", "implement", "garbage", "collector"]}
{"i": "10071580", "t": "There is a 2d matrix and in each point there are some gold coins.\rThen starting from the bottom  left point you have to collect the maximum number of points. The constraint is that you can only move in right and up direction.\rThen asked me to optimize it\rAfter that do it using recursion\rCompare the two methods\rGive a mathematical formula for this problem.", "k": ["gold coins", "bottom left point", "matrix", "coins", "point"]}
{"i": "10037924", "t": "Lowest common ancestor of bst\rAfter that modified it for binary tree", "k": ["lowest common ancestor", "lowest common", "binary tree", "common ancestor", "ancestor of bst"]}
{"i": "10037923", "t": "Given a large string . then you have to find out largest string such that all its character are consecutive . Asked me to write a neat C code for this problem.", "k": ["character are consecutive", "find out largest", "write a neat", "neat c code", "large string"]}
{"i": "9960841", "t": "Maximum contigous subarry for one dimensional array\rAfter that modified this question for 2d array. Find the biggest square or rect matrix such that sum is max.", "k": ["maximum contigous subarry", "maximum contigous", "contigous subarry", "modified this question", "dimensional array"]}
{"i": "10064821", "t": "This round was focused on DS only\rReverse a link list\rGave me a link list in which loop is there. What will happen if we reverse such a kind of LL.\rDetect loop in LL\rStarting node at which loop is starting", "k": ["link list gave", "link list", "list gave", "round was focused", "link"]}
{"i": "10071551", "t": "WAP to check a tree is symmetric.", "k": ["wap to check", "tree is symmetric", "wap", "check a tree", "symmetric"]}
{"i": "10116784", "t": "WAP to reverse pair of nodes in linked list", "k": ["wap to reverse", "linked list", "wap", "reverse pair", "pair of nodes"]}
{"i": "9960809", "t": "find third largest element of a array in a single pass?", "k": ["find third largest", "single pass", "largest element", "find", "pass"]}
{"i": "9960799", "t": "Given an array of integers. Each number in the array repeats ODD number of times, but only 1 number repeated for EVEN number of times. Find that number.", "k": ["array repeats odd", "repeats odd number", "number", "repeats odd", "array of integers"]}
{"i": "9941787", "t": "Given an array of integers. Each number in the array repeats even number of times, only 1 number repeats odd number of times. Find that number.", "k": ["number", "array of integers", "times", "integers", "array"]}
{"i": "9976590", "t": "How the find the kth last element in a linked list?", "k": ["linked list", "find the kth", "kth last element", "list", "find"]}
{"i": "10034704", "t": "Create a structure that will allow you to search a person by first name or last name (or both), in better than O(N) timeframe.", "k": ["create a structure", "search a person", "timeframe", "create", "structure"]}
{"i": "10067145", "t": "What is wrong with this program :\rmain()\r{\rchar *p,*q;\rp=(char *)malloc(25);\rq=(char*) malloc(25);\rstrcpy(p,\"amazon\" );\rstrcpy(q,\"hyd\");\rstrcat(p,q);\rprintf(\"%s\",p);\r}", "k": ["char", "malloc", "strcpy", "main", "amazon"]}
{"i": "10063672", "t": "A function GetWordFromList takes an integer parameter and returns the word at the corresponding index. Now you are given a word,say \"string\", how do you optimally get the index of the word where it occurs. You don't know the data structure used to store the words.Assume that all the words in list/database are sorted.Also assume that the function returns null or some exception if the index which is given as input is out of bound", "k": ["integer parameter", "function getwordfromlist", "function returns null", "index", "function returns"]}
{"i": "10103678", "t": "How do you go about finding the top 10 google searches at the end of a day? In case you are storing the information about them, how and where would you store it? (like disks etc)", "k": ["finding the top", "google searches", "top", "google", "day"]}
{"i": "10094092", "t": "Given a sorted array, output all triplets <a,b,c> such that a-b = c. Expected time is O(n^2). My approach using binary search took O(n^2 logn). When you attempt an approach, test your code with this example and list your outputs for verification. Thanks. \r-12, -7, -4, 0, 3, 5, 9, 10, 15, 16", "k": ["sorted array", "array", "triplets", "output all triplets", "sorted"]}
{"i": "10092001", "t": "This was a question asked in an onsite interview with amazon.  The interviewer had to be the bar raiser because every other question was pretty easy.\r given a number, come up with all of the possible ways to insert '+' and '-' in that number.  for example given 123, possible answer would be\r 1+23\r1+2+3\r1-23\r1-2+3\r1-2-3\r1+2-3\r12+3\r12-3", "k": ["interview with amazon", "onsite interview", "question asked", "amazon", "question"]}
{"i": "10102784", "t": "Given an array containing elements 1..N but containing repeated elements.we have to find the missing element..No extra spaces allowed and time complexity should be O(n).", "k": ["extra spaces allowed", "array containing elements", "missing element.", "repeated elements.we", "find the missing"]}
{"i": "9944813", "t": "Given a binary tree we have to update another pointer sibling in the node such that every node sibling is the left node of current node.If there is no left node then its sibling should point to the right most node at that level...!!", "k": ["left node", "binary tree", "update another pointer", "current node.if", "pointer sibling"]}
{"i": "9944812", "t": "Design an algorithm such that we have to find the k th element in the array such that their only prime factors are 3,5 an 7.\rExample: Array will contain 1,3,5,7,9,21,25,...\rWe have to return the kth element  in array...!!!", "k": ["design an algorithm", "prime factors", "array", "design", "element"]}
{"i": "10091800", "t": "round 2:\r1.  explain me final, finally and finalized in java.   (on JAVA)\r2. 2. you have unsorted array[n] elements. the numbers in the array[n] occurs event times except one number occurs odd time. So, write an algorithm to find that number. Also explain its complexity too. (time and space) both.  (On ALGORITHM)\r3. you have html page directory. in each html page u have written name and phone number. now you have to make normal directory from that information. write an algorithm that convert  html directory to normal directory.", "k": ["round", "java", "directory", "algorithm", "html"]}
{"i": "9983670", "t": "3. tell me the class design of playing cards for any game.", "k": ["game", "class", "design", "playing", "cards"]}
{"i": "9987664", "t": "2. what is the time and space complexity of above algorithm. It is the best approach ?", "k": ["time and space", "space complexity", "algorithm", "approach", "time"]}
{"i": "10020246", "t": "1. you have array[n-1] elements and you have 1 to n numbers. now you have to find one missing number in array[n-1]. Write an algorithm to find that missing number.", "k": ["array", "find", "missing", "number", "missing number"]}
{"i": "10094712", "t": "How can make Mutex global to All CPUs in your Board? Because spinlock is global to all CPUs in SMP system. Just make Mutex work like spinlock?", "k": ["board", "make mutex", "cpus in smp", "make mutex global", "mutex"]}
