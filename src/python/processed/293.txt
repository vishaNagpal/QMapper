{"i": "18043679", "t": "Find the Max sum subsequence in array", "k": ["max sum subsequence", "find the max", "max sum", "subsequence in array", "sum subsequence"]}
{"i": "18064672", "t": "There is a HealthMonitor and two Servers (Primary and Secondary), all connected to one and another. \rThe HealthMonitor keeps pinging both the servers at specific time intervals and waits for their response for a time-out period after the request has been sent.\rThe server responds with a health status of itself and of its neighbor (meaning Primary responsds: OK; NEIGHBOR_OK)\r Implement the server's code to send and receive responses and then take action based on response.", "k": ["primary and secondary", "meaning primary responsds", "secondary", "implement the server", "meaning primary"]}
{"i": "18069669", "t": "Write a class that will have following functions:\rlong CheckOut()\rCheckIn(long)\r Range of values is 1 to LONG_MAX\rAt any given point in time checkout should return the minimum available LONG number\rCheckin can return the value back\rNo need to check for border conditions (e.g. check out when all values are exhausted)\rImplement:\r1. long checkout()\r2. void checkIn(long input)", "k": ["long number checkin", "write a class", "border conditions", "return the minimum", "point in time"]}
{"i": "18058672", "t": "Write a class For Contacts on a device\rImplementing Search a contact was the biggest problem I faced (because search should potentially search: FirstName, LastName, Address, PH#, Email etc)", "k": ["device implementing search", "device implementing", "implementing search", "write a class", "problem i faced"]}
{"i": "18064671", "t": "Write a class for a parking garage:\r  One level\r  One entry point\r  No membership or payments required\r  Handles multiple types of cars", "k": ["payments required handles", "required handles multiple", "handles multiple types", "required handles", "handles multiple"]}
{"i": "18069668", "t": "Implement:\r1. a search that will return all the strings that match a sub-string\r2. an insert into this datastructureClass\r\n{\r\n\tInsert (string str){};\r\n\tList<strings> Predictions(string subString){};\r\n}", "k": ["implement", "list", "predictions", "insert", "match a sub-string"]}
{"i": "18062667", "t": "Implement an iterator for a Binary tree. It should have the following things:\r1. bool HasNext()\t\r2. <T> Next()\r It should be an in-order traversal.", "k": ["binary tree", "implement an iterator", "binary", "implement", "tree"]}
{"i": "18063669", "t": "How could you make sure that thread A ,B and C run sequentially without using join method?", "k": ["join method", "run sequentially", "method", "make", "thread"]}
{"i": "18063668", "t": "You have a string str = \"I love you\".\rWrite a program to print the output as \"you love I\". Calculate the efficiency of your coding.", "k": ["string str", "str", "love", "write a program", "string"]}
{"i": "18066665", "t": "What design pattern does AOP use?", "k": ["pattern does aop", "design pattern", "aop", "design", "pattern"]}
{"i": "18062665", "t": "You have two class A and B in a jar file and you have no source code with you. Write a class C which will rewrite the behaviour of the methods in A and B. You are not allowed to write any other class or interface.", "k": ["jar file", "source code", "class", "jar", "file"]}
{"i": "18061668", "t": "Write program of thread pool.", "k": ["write program", "thread pool", "program of thread", "write", "pool"]}
{"i": "17891673", "t": "You have an array Char[] chArray = {'a','a','b','c','a','b','d','c','c','d','a','a'}\r Write a program to remove the duplicate and the output should be as per the below:\r{'a','b','c','d','','','','','','',''} . You should not use any collection api", "k": ["array char", "write a program", "collection api", "program to remove", "remove the duplicate"]}
{"i": "18061667", "t": "What design pattern does Exception handling use and why?", "k": ["pattern does exception", "exception handling", "design pattern", "exception", "design"]}
{"i": "18064666", "t": "Why do we have both checked exception and Runtime Exception? What will happen if we have only one of a kind?", "k": ["runtime exception", "exception and runtime", "checked exception", "exception", "runtime"]}
{"i": "18067666", "t": "You are in a maze, and you need to find all possible path from an entrance to an exit. Here are the constraints: \u25cf The maze is represented by a 2D grid. \u25cf Spots that you can step on are represented by a 0. \u25cf Pits that you will fall into (aka spots that you cannot step on) are represented by a 1. \u25cf The entrance is represented by a 2. \u25cf The exit is represented by a 3. \u25cf Each path can only have two endpoints; entrance and exit. You cannot use the entrance or exit more than once for each path. \u25cf You have to step on every spot exactly once. \u25cf You can only move like a King in chess (horizontally or vertically but not diagonally) \rHere is an example of the maze: 2  0  0  0  0 0  0  0  0  0 0  0  0  3  1 Possible paths are:\r Your program should read from standard input with a series of integers with whitespace as delimiter. The first two integer represents the width and height of the maze. It will then be followed by width*height more integers. Your output should be an integer which shows the total number of possible path. Marks will be given for efficiency as well.", "k": ["represented", "maze", "path", "entrance", "exit"]}
{"i": "18065663", "t": "A List PARENTLIST which contains primitive type and List L, this List L further can have primitve type and List L and so on. Given a Root node calculate how many List it have", "k": ["list parentlist", "list", "primitive type", "type and list", "root node calculate"]}
{"i": "18059664", "t": "What is stale object in Java? How will you handle it? For example: You have a Class A as shown below \rpublic class A{\rA(){\r\t// code for database connection \r }\r// code for other method\r}\rNow,you are trying to create a object A by its constructor. To initialize constructor it throws some exception to create database connection.\r A obj = new A().\robj.amethod() ;\r If obj.amethod() ;  will be executed successfully  or not ?\r How will you stop your code not to use obj?", "k": ["object in java", "java", "stale object", "database connection", "create database connection"]}
{"i": "18053665", "t": "For a given number, print this number in words(in Indian style number system).\reg: \ri/p 345  o/p: three hundred fourtyfive\ri/p 3145  o/p: three thousand one hundred fourtyfive\ri/p 314520  o/p: three lakh fourteen thousand five hundred twenty.\r  * http://en.wikipedia.org/wiki/South_Asian_numbering_system", "k": ["indian style number", "style number system", "indian style", "number system", "style number"]}
{"i": "17912674", "t": "If a function is der mostCommonChar(String str, int num) , \r1-.First input is Aabra Ka Daabra and second argument is 1 then the function should return first most repeated character in the string .Means in sorted descending .\r2-> First input is Aabra Ka Daabra and second argument is 2\rthen the function should return second most repeated character in the string \rlike wise 3rd 4rth ....etc", "k": ["aabra ka daabra", "input is aabra", "repeated character", "int num", "string str"]}
{"i": "18047673", "t": "Write a C program to find the number of shift required to convert one string to another. Check all the corner cases.\r Eg: abc to acb o/p shd be 2 as 'b' shifted from 1st index to 2nd and 'c' shifted to 1st from second.", "k": ["program to find", "find the number", "number of shift", "shift required", "required to convert"]}
{"i": "18044667", "t": "You have a very large file of integers which cannot be loaded into memory at once. How would you find the ten largest numbers of that file?", "k": ["loaded into memory", "large file", "file", "large", "integers"]}
{"i": "18025664", "t": "Let A be an array of size n, containing positive or negative integers, with A[1] < A[2] <...< A[n]. Design an efficient algorithm (should be more efficient than O(n)) to find an i such that A[i] = i provided such an i exists. What is the worst case computational complexity of your algorithm?", "k": ["negative integers", "array of size", "positive or negative", "integers", "efficient algorithm"]}
{"i": "18032663", "t": "Problem statement\rYou are planning a big programming conference and have received many proposals which have passed\rthe initial screen process but you're having trouble fitting them into the time constraints of the day -- there\rare so many possibilities! So you write a program to do it for you.\r\u00b7 The conference has multiple tracks each of which has a morning and afternoon session.\r\u00b7 Each session contains multiple talks.\r\u00b7 Morning sessions begin at 9am and must finish by 12 noon, for lunch.\r\u00b7 Afternoon sessions begin at 1pm and must finish in time for the networking event.\r\u00b7 The networking event can start no earlier than 4:00 and no later than 5:00.\r\u00b7 No talk title has numbers in it.\r\u00b7 All talk lengths are either in minutes (not hours) or lightning (5 minutes).\r\u00b7 Presenters will be very punctual; there needs to be no gap between sessions.\rNote that depending on how you choose to complete this problem, your solution may give a different\rordering or combination of talks into tracks. This is acceptable; you don\u2019t need to exactly duplicate the\rsample output given here.\rTest input:\rWriting Fast Tests Against Enterprise Rails 60min\rOverdoing it in Python 45min\rLua for the Masses 30min\rRuby Errors from Mismatched Gem Versions 45min\rCommon Ruby Errors 45min\rRails for Python Developers lightning\rCommunicating Over Distance 60min\rAccounting-Driven Development 45min\rWoah 30min\rSit Down and Write 30min\rPair Programming vs Noise 45min\rRails Magic 60min\rRuby on Rails: Why We Should Move On 60min\rClojure Ate Scala (on my project) 45min\rProgramming in the Boondocks of Seattle 30min\rRuby vs. Clojure for Back-End Development 30min\rRuby on Rails Legacy App Maintenance 60min\rA World Without HackerNews 30min\rUser Interface CSS in Rails Apps 30min\rTest output:\rTrack 1:\r09:00AM Writing Fast Tests Against Enterprise Rails 60min\r10:00AM Overdoing it in Python 45min\r10:45AM Lua for the Masses 30min\r11:15AM Ruby Errors from Mismatched Gem Versions 45min\r12:00PM Lunch\r01:00PM Ruby on Rails: Why We Should Move On 60min\r02:00PM Common Ruby Errors 45min\r02:45PM Pair Programming vs Noise 45min\r03:30PM Programming in the Boondocks of Seattle 30min\r04:00PM Ruby vs. Clojure for Back-End Development 30min\r04:30PM User Interface CSS in Rails Apps 30min\r05:00PM Networking Event\rTrack 2:\r09:00AM Communicating Over Distance 60min\r10:00AM Rails Magic 60min\r11:00AM Woah 30min\r11:30AM Sit Down and Write 30min\r12:00PM Lunch\r01:00PM Accounting-Driven Development 45min\r01:45PM Clojure Ate Scala (on my project) 45min\r02:30PM A World Without HackerNews 30min\r03:00PM Ruby on Rails Legacy App Maintenance 60min\r04:00PM Rails for Python Developers lightning\r05:00PM Networking Event", "k": ["rails", "common ruby errors", "ruby errors", "rails legacy app", "ruby"]}
{"i": "17995666", "t": "Adding Very Large Numbers. Write clean code for it. please check all corner cases..\r Number can be really really large", "k": ["adding very large", "adding", "large", "large numbers", "write clean code"]}
{"i": "17985664", "t": "Design a singleton design pattern.", "k": ["singleton design pattern", "design pattern", "singleton design", "pattern", "design a singleton"]}
{"i": "17899667", "t": "Design a class in C++ such that only one object of it can be created.", "k": ["design a class", "design", "created", "class", "object"]}
{"i": "17905669", "t": "Given 'n' coins, print the number of ways to form an amount 'A' . This is a standard denomination problem with one small twist(We have only one coin of each type,not infinite number,if we choose one coin for making change we should not choose it again) . Can somebody give a code with explanation ?\r Example:\r Amount:3 coins : 1 2 3\r There are only two ways (1,2)(3) not (1,1,1)(1,2)(3)", "k": ["standard denomination problem", "type,not infinite number,if", "print the number", "small twist", "code with explanation"]}
{"i": "17952669", "t": "Find the 3rd  closest element in a bst.You will be given a pointer to root and a value within the tree against which the closest has to be figured out. (closeness is in terms of value, not by distance ) and then follow up qn: for finding the kth closest in a bst.", "k": ["pointer to root", "closest element", "closest", "find", "kth closest"]}
{"i": "17886663", "t": "Consider a city with 50 locations each numbered from 0 to 49.  Mr. XYZ runs a taxi service in a city. He has 25 Taxi\u2019s to service the passengers. When passenger needs a taxi he makes a call to Mr. XYZ and give details like his current location as a source, and where he is willing to travel as a destination. He also tells max time he can wait for a taxi. In return Mr. XYZ either allocate a taxi to the passenger or tell him request can\u2019t be satisfied within the given max_waiting time. Allocated taxi travels from its current location to the passengers pick-up point i.e. the source. This travel is termed as non revenue travel. Mr. XYZ charge passenger only for the distance from source to the destination. After dropping passenger to the destination taxi waits for call from Mr. XYZ to serve next passenger.\rLet\u2019s assume we know all TaxiHireRequests in advance. We also know the distance and time to travel between any two locations in the city.\r  Write a program which will choose the taxi\u2019s such that sum of non_revenue distance travelled by all the Taxi\u2019s is minimum and the number of unsatisfied requests are minimized. Also print the total non_revenew distance and number of unsatisfied requests.\r  pseudo helper structures. \rstruct TaxiHireRequest{\rint Time Of Request;//Number of seconds from 12AM\rint Source; // an int from 0 to 49\rint Destination;// an int from 0 to 49\rint Maximum waiting time // in seconds;\r}[200]\r  struct Taxi{\rint location;//an int from 0 to 49\rbool isHired//true or false\r}[25]\r  int Distance[50][50];\rint Time[50][50];\r// Extend the structure whenever required.", "k": ["taxi", "xyz", "int", "time", "distance"]}
