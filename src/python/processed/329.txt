{"i": "14946971", "t": "program to get a list of arrays like 121 121 121 and eliminate duplicate and print 121 as output", "k": ["duplicate and print", "list of arrays", "eliminate duplicate", "program", "print"]}
{"i": "14954925", "t": "program to print only alphabets by getting input as j@1vu etc", "k": ["program to print", "print only alphabets", "program", "print", "alphabets"]}
{"i": "14922052", "t": "A Matrix of cells is given. A cell may be desert (represented as 1) or forest (represented as 0). Now every year all forests adjacent to desert convert to deserts. You are supposed to find out how many forests will be there after 'k' years (also give their location).\r ** : on phone interview, interviewer will ask you to code on the online real-time editors like collabedit.com, sync.in or docs.google.com", "k": ["matrix of cells", "matrix", "represented", "desert", "forests"]}
{"i": "14946937", "t": "How to find maximum path sum in a binary tree.\r The path need not be a top-bottom, can start and end nodes need not be root or leaf, path can start in left/right subtree and end in right/left subtree wrt any node.", "k": ["maximum path sum", "find maximum path", "binary tree", "find maximum", "maximum path"]}
{"i": "14927926", "t": "Give a BST and a number. we need to find next bigger number in BST.", "k": ["give a bst", "bst", "give", "number", "bigger number"]}
{"i": "14944921", "t": "We have n number of sorted array for fixed length.\rNow we have to merge  these and need to save finaly result array into given array.\rNote- we can't use extra space except the given array.", "k": ["fixed length", "number of sorted", "sorted array", "array", "length"]}
{"i": "14944912", "t": "Here is the second:\r def babylon(a):\r    def test(x):\r        return 0.5 * ((a / x) + x)\r    return test\r def sqrt(a):\r    return fixedPoint(babylon, 0.0001)\rThis code has a bug in it. You can fix this by correcting exactly one line of the definition.", "k": ["test def sqrt", "return test def", "return fixedpoint", "return test", "def babylon"]}
{"i": "14951915", "t": "Successive approximation is a general method in which on each iteration of an algorithm, we find a closer estimate of the answer for which we are seeking. One class of successive approximation algorithms uses the idea of a fixed point. If f(x) is a mathematical function, then finding the x such that f(x) = x gives us the fixed point of f.\r One way to find a fixed point is to start with some guess (e.g. guess = 1.0) and, if this is not good enough, use as a next guess the value of f(guess). We can keep repeating this process until we get a guess that is within epsilon of f(guess).\r Here is a slightly incorrect definition of this function:\r def fixedPoint(f, epsilon):\r    \"\"\"\r    f: a function of one argument that returns a float\r    epsilon: a small float\r     returns the best guess when that guess is less than epsilon \r    away from f(guess) or after 100 trials, whichever comes first.\r    \"\"\"\r    guess = 1.0\r    for i in range(100):\r        if f(guess) - guess < epsilon:\r            return guess\r        else:\r            guess = f(guess)\r    return guess\rThis function definition has a bug in it. You can fix this by correcting exactly one line of the definition.", "k": ["guess", "successive approximation algorithms", "successive approximation", "fixed point", "general method"]}
{"i": "14946929", "t": "Assuming you have corrected the implementation of the fixedPoint function, we can use it to compute other useful things such as square roots. In particular, the square root of a number, a, is the fixed point of the function f(x)=12(a/x+x).\r The next two questions define two different implementations of this idea. Each has one incorrect line of code. The first is below:\r def sqrt(a):\r    def tryit(x):\r        return 0.5 * (a/x + x)\r    return fixedPoint(tryit(a), 0.0001)\rThis code has a bug in it. You can fix this by correcting exactly one line of the definition.", "k": ["square roots", "square", "corrected the implementation", "fixedpoint function", "function"]}
{"i": "14974707", "t": "Design a O(n) algo for following scenario: Given a n-element array, n being even, find atleast (n/2) distinct element pairs that when summed is divisible by an integer k. eg: (a,b);(b,a) not allowed & (a+b)%k==0", "k": ["distinct element pairs", "find atleast", "n-element array", "distinct element", "element pairs"]}
{"i": "14942912", "t": "Determining trending topics\r  How do you think Twitter determines trending topics? \r If needed, explain that trending topics are N most common occurring substrings across all tweets in a given time window, which is constantly moving. Later you can expand the question by putting the scale constraint considering the rate at which tweets come in, etc.", "k": ["twitter determines trending", "twitter determines", "determining trending topics", "determines trending topics", "trending topics"]}
{"i": "14948922", "t": "first non repeating character from a given string", "k": ["repeating character", "string", "repeating", "character"]}
{"i": "14967849", "t": "find the sub array of sum K from the the given unsorted array", "k": ["unsorted array", "array of sum", "array", "find", "sum"]}
{"i": "14944905", "t": "only pre oder of BST is given need to construct BST in O(n)...O(nlog(n)) is rejected", "k": ["construct bst", "pre oder", "nlog", "oder of bst", "bst"]}
{"i": "14945908", "t": "matrix contains a 1's and 0's find the entities filled with 1's and bounded by 0's ...we need to give the no of such entities exists in the matrix", "k": ["entities filled", "entities exists", "find the entities", "find", "matrix"]}
{"i": "14927907", "t": "given a binary search tree, find the any 3 nodes such that sum is K", "k": ["binary search tree", "search tree", "binary search", "tree", "find"]}
{"i": "14945907", "t": "find the largest BST from the given Binary tree", "k": ["binary tree", "largest bst", "find the largest", "bst", "binary"]}
{"i": "14948921", "t": "3)array contains only 0 and 1's need to sort  the array such that all zeros at first and 1's later part of the array", "k": ["sort the array", "array", "sort", "part"]}
{"i": "14942901", "t": "2)2D graph, there are two pints (x1, y1) (x2, y2) x1<x2 & y1<y2 and we are supposed to move in positive direction either right or up i.e (x1+1) or (y1+1) only \rwe need to find the no of paths to reach that point x2, y2", "k": ["reach that point", "supposed to move", "move in positive", "positive direction", "paths to reach"]}
{"i": "14967847", "t": "total 3 questions\r1)pre fix to post fix", "k": ["pre fix", "post fix", "total", "questions", "pre"]}
{"i": "14942895", "t": "What is shallow copy?", "k": ["shallow copy", "copy", "shallow"]}
{"i": "14944900", "t": "What is multithreading", "k": ["multithreading"]}
{"i": "14959873", "t": "Difference between process and thread", "k": ["difference between process", "process and thread", "difference", "thread", "process"]}
{"i": "14974690", "t": "Class A, B and C all cout their own names in their constructor. C is B\u2019s subclass while it has an instance of A as its private member. When a C object is instantiated, what will the order of printed letters?", "k": ["class", "constructor", "private member", "cout", "object is instantiated"]}
{"i": "14954873", "t": "C++ class animal has virtual method render which prints \u201cAnimal\u201d while its subclass Tiger has virtual method render which prints \u201cTiger\u201d. Tiger kitty;; Animal * beast = &kitty; what is the outcome of beast->render()?", "k": ["virtual method render", "virtual method", "method render", "render which prints", "class animal"]}
{"i": "14942886", "t": "Given a number x = 0x25. Convert it into y = 0x25252525.", "k": ["number", "convert"]}
{"i": "14947877", "t": "If a key has to be inserted in binary tree, say the value of root as well as the key to be inserted as same. Will the key becomes left child or right child of Root? Can binary tree have duplicate values? If yes, why, If no why?", "k": ["inserted", "root", "key", "binary tree", "binary"]}
{"i": "14974676", "t": "int num=1;\r*(char*)&num;\r//what this statement does basically\r because when it is 1 it means lower order byte is 1 else higher order byte is 1(used for calculating little endian and big endian).", "k": ["lower order byte", "higher order byte", "order byte", "int num", "lower order"]}
{"i": "14974673", "t": "McDonald\u2019s sells Chicken McNuggets in packages of 6, 9 or 20 McNuggets. Thus, it is possible, for example, to buy exactly 15 McNuggets (with one package of 6 and a second package of 9), but it is not possible to buy exactly 16 McNuggets, since no non- negative integer combination of 6's, 9's and 20's add up to 16. To determine if it is possible to buy exactly n McNuggets, one has to find non-negative integer values of a, b, and c such that\r6a+9b+20c=n\rWrite a function, called McNuggets that takes one argument, n, and returns True if it is possible to buy a combination of 6, 9 and 20 pack units such that the total number of McNuggets equals n, and otherwise returns False. Hint: use a guess and check approach.", "k": ["sells chicken mcnuggets", "sells chicken", "mcdonald \u2019s sells", "chicken mcnuggets", "mcnuggets"]}
{"i": "14942873", "t": "Write a recursive procedure, called laceStringsRecur(s1, s2), which also laces together two strings. Your procedure should not use any explicit loop mechanism, such as a for or while loop. We have provided a template of the code; your job is to insert a single line of code in each of the indicated places.def laceStringsRecur(s1, s2):\r\n    \"\"\"\r\n    s1 and s2 are strings.\r\n\r\n    Returns a new str with elements of s1 and s2 interlaced,\r\n    beginning with s1. If strings are not of same length, \r\n    then the extra elements should appear at the end.\r\n    \"\"\"\r\n    def helpLaceStrings(s1, s2, out):\r\n        if s1 == '':\r\n            #PLACE A LINE OF CODE HERE\r\n        if s2 == '':\r\n            #PLACE A LINE OF CODE HERE\r\n        else:\r\n            #PLACE A LINE OF CODE HERE\r\n    return helpLaceStrings(s1, s2, '')", "k": ["line of code", "place a line", "write a recursive", "code", "called lacestringsrecur"]}
