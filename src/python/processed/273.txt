{"i": "5112858991919104", "t": "You are planning a big programming conference and have received many proposals which have passed the initial screen process but you're having trouble fitting them into the time constraints of the day -- there are so many possibilities! So you write a program to do it for you.\r\u00b7 The conference has multiple tracks each of which has a morning and afternoon session. \u00b7 Each session contains multiple talks. \u00b7 Morning sessions begin at 9am and must finish by 12 noon, for lunch. \u00b7 Afternoon sessions begin at 1pm and must finish in time for the networking event. \u00b7 The networking event can start no earlier than 4:00 and no later than 5:00. \u00b7 No talk title has numbers in it. \u00b7 All talk lengths are either in minutes (not hours) or lightning (5 minutes). \u00b7 Presenters will be very punctual; there needs to be no gap between sessions. Note that depending on how you choose to complete this problem, your solution may give a different ordering or combination of talks into tracks. This is acceptable; you don\u2019t need to exactly duplicate the sample output given here.", "k": ["initial screen process", "big programming conference", "planning a big", "big programming", "received many proposals"]}
{"i": "4546507424399360", "t": "write a program that prints numbers 1 to 100\rwith most efficient condition \r1. Run Time Complexity\r2. Run time Space complexity\r3. Compilation Time\r4. Compile Time Space Complexity\r5. Power complexity (reduction of battery used)", "k": ["time space complexity", "space complexity", "run time space", "write a program", "prints numbers"]}
{"i": "6287528252407808", "t": "A k-palindrome is a string which transforms into a palindrome on removing at most k characters.\r Given a string S, and an interger K, print \"YES\" if S is a k-palindrome; otherwise print \"NO\".\rConstraints:\rS has at most 20,000 characters.\r0<=k<=30\r Sample Test Case#1:\rInput - abxa 1\rOutput - YES\rSample Test Case#2:\rInput - abdxa 1\rOutput - No", "k": ["sample test case", "test case", "palindrome on removing", "sample test", "input"]}
{"i": "4981467352399872", "t": "What is the minimum representation in bits of two positions on an 8x8 chessboard?", "k": ["chessboard", "minimum representation", "representation in bits", "minimum", "representation"]}
{"i": "6121554609963008", "t": "How does a search engine perform exact phrase search? i.e. search for the term \"the bees knees\" exactly.", "k": ["engine perform exact", "perform exact phrase", "search engine perform", "exact phrase search", "engine perform"]}
{"i": "5834130029805568", "t": "There is a fictional company called fooBar in fooLand. The CEO of fooBar, fooMan, directs all managers to minimize the total hike that they give to employees, while ensuring that the hike is fair to them. Usually, this is done by giving more hike to employees who are rated better. So, for example, if an employee is rated 2 and is given hike 3x, an employee rated 3 should be given a hike greater than 3x. Hikes are always in multiples of x only and the minimum hike to be given to any employee is x.\r This year, however, a wicked manager, barMan comes up with a brilliant strategy. He assumes that each employee would get to know the hike of only the two employees who sit next to him (one on the left, one on the right). And therefore, he reasons(using whole of his analytical left brain), that as long as he could make hikes fair for each employee with respect to the two employees that sit next to him, he would fulfill the dual objective of being \"fair\" as well as minimizing the total hike given. Just for clarification, the employees of each team sit in one big line. \r barMan hires you to calculate the hike to be given to each employee. Over to you. You are supposed to come up with the total hike number that will excite barMan and make him roll on the floor laughing. You are given that no two employee sitting next to each other would have a common rating.\r Input:\r The order of rating of each employee should be in the order in which they sit. First line will be the value of x. The second line will be the number of employees 'n'. The next 'n' lines specify the rating of each employee. Rating can be integers from 1 to 105. (weird, right?) \r 1 <= n <= 105.\r1 <= x <= 104.\r Sample input 1:\r 10\r4\r1\r4\r6\r2\r Output:\r70\r Why?\rIf we have the hikes as first employee gets 10, second gets 20, third gets 30 and fourth gets 10, we satisfy all our constraints.", "k": ["fictional company called", "company called foobar", "hike", "employee", "employees"]}
{"i": "5697967755362304", "t": "A candidate is selected for interview for 3 posts.the number of candidates for the first,second,third posts are 3,4,2 respectively.what is the probability of his getting at least one post?", "k": ["posts.the number", "selected for interview", "candidate is selected", "number of candidates", "posts.the"]}
{"i": "6241189850251264", "t": "find subsets in array whose sum equal to a given number??\rexample: S={1,3,5,2,7} and k=10, answer is {1,2,7},{3,5,2},{3,7}\rtks(^_^)", "k": ["find subsets", "subsets in array", "array whose sum", "sum equal", "tks"]}
{"i": "4926385470570496", "t": "In the given sorted array, find the number of positions of the number that are not in sorted order", "k": ["find the number", "sorted array", "sorted order", "number of positions", "number"]}
{"i": "5201559730257920", "t": "Give you an array which has n integers,it has both  positive and negative integers.Now you need sort this array in a special way.After that,the negative integers should in the front,and the positive integers should in the back.Also the relative position should not be changed.\reg. -1 1 3 -2 2 ans: -1 -2 1 3 2.\r o(n)time complexity and o(1) space complexity is perfect.", "k": ["that,the negative integers", "special way.after that,the", "way.after that,the negative", "negative integers", "positive integers"]}
{"i": "5210844375810048", "t": "There is an sorted array suppose 10 20 30 40 50 60 70 80 90. If we rotate it n times(suppose n = 3 in my case). The array will be 70 80 90 10 20 30 40 50 60. The total no of values which are not in right position 3(in this case which are 70 80 90) so we have to make a generalized solution. I was able to answer this in O(n) but he wants something which is lesser than O(n).", "k": ["sorted array suppose", "sorted array", "suppose", "array suppose", "sorted"]}
{"i": "6306164115505152", "t": "We have a day to work and we have different kinds works do to which has start-time and end-time. We have to choose the different works so that we can achieve the maximum number of minutes in a day to work. Chosen works should not overlaps to each other.\rEx-1:\r\tStart-Time\tEnd-Time\rW1:\t6:00\t  \t        9:30\rW2:\t9:00\t\t      12:30\rW3:\t12:00\t      14:30\rW4:\t10:00\t      10:30\rW5:\t11:00\t      13:30\rSolution: W1 + W4 + W3(or W5) \rEx-2:\r\tStart-Time\tEnd-Time\rW1:\t6:00\t\t        8:30\rW2:\t9:00\t\t      11:00\rW3:\t12:30\t      14:00\rW4:\t8:00\t\t        9:00\rW5:\t10:30\t      14:00\rW6:\t9:00\t\t      11:30\rSolution : W1 + W6 + W3 = 390min", "k": ["start-time end-time", "end-time", "kinds works", "day", "solution"]}
{"i": "6507040809680896", "t": "Find the expectation value of number of times you need to pick numbers to find a number smaller than the number you pick from a hat containing 1 to n. \rcase 1: if you replace\rcase 2: if you don't replace\r Expectation values! not probability", "k": ["replace expectation", "replace case", "expectation", "number smaller", "case"]}
{"i": "6644470099476480", "t": "There are few sets with some numbers. And you are given an array of numbers. Find combination of sets with minimum number of sets, union of which have all these numbers.\r Example:\rinput sets:\rA => [1,2,3]\rB => [2,5,8]\rC => [1,4,5]\rD => [3,5,8]\r Array to find:\r{3,4,8}\r Answer:\rC + D", "k": ["sets", "numbers", "array", "answer", "find"]}
{"i": "5977321018228736", "t": "Delete every third element of an array until only one element is remaining. Tell the index of that remaining element in O(1) time complexity.", "k": ["delete", "element", "time complexity", "remaining", "array"]}
{"i": "6056099308371968", "t": "You are given a sorted skewed binary tree. How can you create a binary search tree of minimum height from it?", "k": ["sorted skewed binary", "sorted skewed", "skewed binary tree", "skewed binary", "binary"]}
{"i": "5740629665513472", "t": "Delete the repeated elements in a singly linked list in O(n) time complexity without using extra space. Linked list contains elements in unsorted order\rP.S. - Sorting is not allowed", "k": ["singly linked list", "delete the repeated", "time complexity", "extra space", "linked list"]}
{"i": "5317145890127872", "t": "A user creates a file test.sh on a linux system. He wishes to give another user on the same system the permission to execute that file. What permissions should he give to the file?", "k": ["user creates", "linux system", "file test.sh", "file", "user"]}
{"i": "4985780573306880", "t": "Write a routine to verify if a given tree is a BST (Binary Search Tree).", "k": ["binary search tree", "binary search", "search tree", "write a routine", "routine to verify"]}
{"i": "4608626610143232", "t": "Implement cache with proper synchronization.", "k": ["implement cache", "proper synchronization", "cache with proper", "implement", "synchronization"]}
{"i": "5893160060321792", "t": "Flipkart handles millions of users looking to buy or sell products. It also provides a search bar to the user as an interface to search for items. At times when typing users may enter a query string which may be single word by mistake but the intention of the user was to type them separately. For eg.,\r User may have entered flipkartmobile when in real, his / her intention was to search for flip kart mobile.\r Considering above scenario, implement an algorithm to split up query string provided by user given a list of dictionary words, i.e, you will be given a list of dictionary words and the user-input query string and you have to give the split up of query string which satisfies the following requirements / properties :\r1. In case of multiple split-ups, conclude on the one that is lexicographically smaller, i.e, has spaces more towards the left. For eg.,\r Assume you are given the list of words : flip, kart, flipkart, mobile and user-input query string is flipkartmobile. Hence, possible split-ups are flip kart mobile and flipkart mobile. The answer / output in this case should be flip kart mobile with more spaces towards the left.\r 2. Number of characters in query string shall be < 500 characters. Reason being hackers may try to provide a very long input and hence, this may consume processing and result in unresponsive website ultimately.\r 3. Repetition of dictionary words in query string is possible. For eg.,\r Assume you are given the list of words : lg, mobile and user-input query string is mobilelglg. The answer / output in this case should be mobile lg lg.\r Now, format of Input and Output :\rInput\r4 // number of dictionary words given\rflip // list of dictionary words the number equaling to input above\rkart\rflipkartmobile \rflipkartmobile // user-input query string\r Output\rflip kart mobile", "k": ["query string", "query", "user-input query string", "string", "flip kart mobile"]}
{"i": "5081205082947584", "t": "The question: given a binary tree, print all paths that sum to a certain value.\r I've come up with the following approach (C++). This is different from other solutions I found on the web, that search the path list every time. I would appreciate your opinion regarding my attempt.// Main function\r\nvoid print_path_with_sum(Node* root, int expected_sum)\r\n{\r\n    if (!root) return;\r\n\r\n    std::vector<Node*> path;\r\n    search_to_bottom(root, path, 0, expected_sum);\r\n    print_path_with_sum(root->left, expected_sum);\r\n    print_path_with_sum(root->right, expected_sum);\r\n}\r\n\r\n// Helper function\r\nvoid search_to_bottom(Node* node, std::vector<Node*>& path, int current, int expected_sum)\r\n{\r\n    if (!node) return;\r\n\r\n    current += node->value;\r\n    path.push_back(node);\r\n\r\n    if (current == expected_sum) {\r\n        print_path(path, 0, path.size());\r\n    }\r\n\r\n    search_to_bottom(node->left, path, current, expected_sum);\r\n    search_to_bottom(node->right, path, current, expected_sum);\r\n    path.pop_back();\r\n}", "k": ["node", "sum", "expected", "binary tree", "path"]}
{"i": "4668365310263296", "t": "Why are 2 boot loaders used in Android?\rWhat is the use of each one and is it possible to remove any one of them and boot android?\rNote: Two bootloaders are Xloader and Uboot.", "k": ["boot android", "android", "boot loaders", "xloader and uboot", "boot"]}
{"i": "5286668802195456", "t": "#include<stdio.h>\r\n  void main()\r\n  {\r\n          void *p;\r\n          int x=10;\r\n          float y=20.2;\r\n          p=&x;\r\n          printf(\"int %d\\n\",*p);\r\n          *p=20;\r\n          p=&y;\r\n          printf(\"float %d\\n\",*p);\r\n }What is the output?\rIf error, which error and correct the code.", "k": ["void main", "printf", "void", "int", "float"]}
{"i": "6634738777325568", "t": "Given a tree in the form of parent pointers of every node (for root assume parent pointer to be null), write code to find the diameter of tree.", "k": ["root assume parent", "assume parent pointer", "write code", "root assume", "code to find"]}
{"i": "6203717334335488", "t": "A standard chess knight (it moves in its standard way i.e. L shaped OR 2.5 moves) is sitting at the position a1 on an N x N chess board. What is the minimum number of moves it will take to reach the diagonally opposite corner?\rP.S. - If it were a 8 x 8 chess board, the final destination for the knight would be h8", "k": ["standard chess knight", "chess board", "standard", "standard chess", "moves"]}
{"i": "4664438636412928", "t": "A young girl counted in the following way on the fingers of her left hand. She started calling the thumb 1, the index finger 2, the middle finger 3, the ring finger 4, the little finger 5, then reversed direction calling the ring finger 6, the middle finger 7, the index finger 8, the thumb 9 then back to the index finger for 10, the middle finger for 11, and so on. She counted up to n (to be input by the user). She ended on her which finger?", "k": ["young girl counted", "finger", "index finger", "middle finger", "left hand"]}
{"i": "5625215304335360", "t": "write an algorithm for, the user request should be completed in logN time in a N story building with M elevators", "k": ["write an algorithm", "user request", "completed in logn", "logn time", "story building"]}
{"i": "6722724403609600", "t": "Given a snake and ladder game, write a function that returns the minimum number of jumps to take top or destination position.\rYou can assume the die you throws results in always favor of you.", "k": ["ladder game", "write a function", "destination position", "snake and ladder", "function that returns"]}
{"i": "6292391229128704", "t": "how much memory can calloc and malloc can allocate???", "k": ["malloc can allocate", "memory can calloc", "calloc and malloc", "allocate", "memory"]}
