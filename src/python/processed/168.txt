{"i": "5126565916573696", "t": "Say you have a keypad that has keys for the numbers 0 through 9 and the correct code is some sequence of 5 digits. This keypad does *not* reset after entering an incorrect sequence of 5 digits. ie. If the correct sequence is 12345, entering 7512345 will succeed in opening it because it ends in the correct sequence. If the keypad actually resets after every 5 digits pressed, then it would not succeed b/c it would interpret the above sequence as \"75123\" then \"45\".\r 1. Write an algorithm that will try to find the correct code for this keypad. Assume you have an API similar to KeyPad.pressKey(int n) where you pass in a number (0...9) and it returns true if the keypad unlocks and false if it's still locked.\r Note that you could easily enter all digits of all numbers 00000 through 99999 resulting in 5*100000 key presses, but remember that the panel does not reset after every sequence of 5 digits, so find a way to do this more efficiently. Notice for example that entering the stream 3791283780 will test the length 5 sequences 37912, 79128, 91283, 12837, 28378, 83780; not only the two disjoint sequences 37912 and 83780.\r Think of this keypad as remembering the last 4 keys pressed (and the order pressed); when the next key is pressed, if the last 4 keys + the current key equal the correct code, the keypad will unlock. Assume the keypad does all this internally, so you can just keep feeding it keypresses and it will eventually unlock if the last 5 keypresses entered is the correct code.\r 2. Generalize your algorithm to work for a keypad where you don't know the length of the correct sequence in advance.", "k": ["correct code", "correct sequence", "keypad", "correct", "sequence"]}
{"i": "5752226016395264", "t": "You are given two streams 's_a' and 's_b' of digits. Each stream represents an integer 'a' and 'b' from its less significant digit to the most significant digit. For example, integer 2048 is represented in the stream as 8, 4, 0, 2.\r Write a function that subtract two integers 'a - b' and returns the result as a string. You are not allowed to buffer entire 'a' or 'b' into a single string, i.e. you may access only a single digit per stream at time (imagine that 'a' and 'b' are stored in huge files). You may assume that 'a>=b'.\r Example:\rs_a:   8 4 0 2\rs_b:   4 2 0 1\r result: '1024'", "k": ["significant digit", "digit", "stream", "integer", "significant"]}
{"i": "4835514639187968", "t": "Construct two threads in a program and execute them one after another. Write thread writes the data in a buffer and reader thread reads the data of previous thread from the buffer. Before execution of threads, user has to provide the string of 10 words the writer thread reads data from the string and write one word in the buffer. The reader thread reads the word  from the  buffer and displays it on screen.", "k": ["reader thread reads", "program and execute", "thread reads", "thread reads data", "thread"]}
{"i": "5713124634132480", "t": "How to register new  classes in factory pattern ?", "k": ["factory pattern", "register new classes", "classes in factory", "pattern", "register"]}
{"i": "5163674568228864", "t": "In the game of Jack Straws, a number of plastic or wooden \"straws\" are dumped on the table and players trn.", "k": ["jack straws", "game of jack", "plastic or wooden", "players trn", "number of plastic"]}
{"i": "6267011938123776", "t": "In the game of Jack Straws, a number of plastic or wooden \"straws\" are dumped on the table and players try to remove them one-by-one without disturbing the other straws. In the question here, we are concerned with the following, related problem: First n straws are dumped on the table. Next, for every pair of straws, we want to determine if the straws are connected by a path of touching straws. In other words, given a list of the endpoints for n > 1 straws (as if they were dumped on a large piece of graph paper), determine all the pairs of straws that are connected. Note that touching is connecting, but also two straws can be connected indirectly via other connected straws. Give an algorithm to compute all the pairs of straws that are connected.\rHere is some additional information that you can use: \r As a basic step you need to determine whether two straws directly touch (intersect), i.e., whether straw ab with end points a and b intersects with straw cd (with end points c and d).\rTo get full credit also explain how the elementary step i) can be done. If you cannot find an algorithm for this step, assume an O(n 2 ) algorithm and explain how to find all pairs of straws that are connected.\rAnalyse and explain the worst-case computational complexity of your algorithm in terms of n.", "k": ["game of jack", "straws", "jack straws", "plastic or wooden", "number of plastic"]}
{"i": "6255125213478912", "t": "Your job is to build a data structure to maintain a set of photographs. Your photograph database should allow you to insert and search for photographs, as well as to designate some of the photographs as favourites by marking them. In more detail, your data structure should support the following operations:\r Insert(x, t, m): inserts photograph x that was taken at time t. If m = 1, then the photograph is marked as a favourite; if m = 0, then it is not a favourite.\r Search(t): find the next photograph taken after time t.\r NextFavorite(t): find the next photograph taken after time t that is a favourite.\r Give a data structure for solving this problem, and explain how it works. For more efficiency, your data structure should be both time and space efficient: more points will be given for more efficient solutions. (Remember that the photographs themselves may be quite large.) Give the performance (i.e., running time) of each operation and the space usage of the data structure. You may assume that at any given time t, your camera has taken at most one photograph x. Describe your solution in words, or very high-level pseudocode. You do not need to provide complete details. You must provide enough detail, however, that your solution is clear.", "k": ["data structure", "maintain a set", "photograph", "time", "data"]}
{"i": "5646512375726080", "t": "Suppose you are given a puzzle that is represented as a matrix with 0s and 1s, where a 0 indicates you\u2019re allowed to move into that position and 1 means you\u2019re not allowed to move in that position. Write a function that given a start position and an end position, returns a boolean value indicating if there exists a path from start to end. you are only allowed to move up, left, right and down. Diagonal movement is not allowed. \r Example #1 \rInput \r0 0 1 0 1 \r0 0 0 0 0 \r0 1 1 1 1 \r0 1 1 0 0 \r start: 4,1 \rend 0,3 \r Output - true \r Example #2 \rInput \r0 0 1 1 1 \r0 1 0 0 0 \r1 1 1 1 1 \r0 0 0 0 1 \r start: 0,0 \rend: 1,2 \r Output - false", "k": ["\u2019re allowed", "allowed to move", "position", "start position", "end position"]}
{"i": "5687400464384000", "t": "Implement a function that returns the i-th most popular item sold\rat xyz company. You cannot rely on any libraries.\r Class Item {\r\tString itemId;\r\tint quantitySold;\r}\r  /**\rfind the i-th most popular item in the list\r**/\rString find(List<Item> items, int i) {\r// your code goes here\r}", "k": ["popular item sold", "implement a function", "xyz company", "function that returns", "sold at xyz"]}
{"i": "4827684108500992", "t": "Suppose you are given a puzzle that is represented as a matrix with 0s and 1s, where a 0 indicates you\u2019re allowed to move into that position and 1 means you\u2019re not allowed to move in that position. Write a function that given a start position and an end position, returns a boolean value indicating if there exists a path from start to end. you are only allowed to move up, left, right and down. Diagonal movement is not allowed.\r Example #1\rInput\r0 0 1 0 1\r0 0 0 0 0 \r0 1 1 1 1\r0 1 1 0 0\r start: 4,1\rend 0,3\r Output - true\r Example #2\rInput\r0 0 1 1 1\r0 1 0 0 0 \r1 1 1 1 1\r0 0 0 0 1\r start: 0,0\rend: 1,2\r Output - false", "k": ["\u2019re allowed", "allowed to move", "position", "start position", "end position"]}
{"i": "5194452572307456", "t": "Design and code the sudoku solver.", "k": ["design and code", "sudoku solver", "code the sudoku", "design", "solver"]}
{"i": "5136629696036864", "t": "There is a zoo and there are several groups(number of groups:K) of people for tour. Each group is having different size (g1,g2,g3\u2026gK). There is one bus with capacity C. Journey starts from a point and bus will come back to the same point. A group can only be included in the bus if all the members of the groups can be accumulated in bus. After coming back from the tour, each group in the bus will again wait in the queue at the bus-stand. Bus-driver earns a rupee for each person travelled. You have to find the earning of the bus driver after R rounds.\r For example :\r Number of groups G = 4\r Group size for each group : 2 4 3 5\r Bus capacity : 7\r Number of rounds R : 4\r   queue : (from front side) 2 4 3 5\r First round : 2 4 (we can\u2019t take 3rd group as 3 members can\u2019t be accumulated after 2 and 4.)\r queue : 3 5 2 4 (1st and 2nd group are enqueued. i.e. 2 and 4)\r Second round : 3\r queue : 5 2 4 3\r Third Round : 5 2\r queue : 4 3 5 2\r Fourth Round : 4 3\r After 4 rounds, total earning is 6+3+7+7 = 23.", "k": ["bus", "group", "number", "groups", "queue"]}
{"i": "5194634168893440", "t": "Design a Traffic signal . List all entities and classes involved. How will you handle pedestrian crossings etc.", "k": ["design a traffic", "traffic signal", "list all entities", "classes involved", "list"]}
{"i": "6237324989956096", "t": "esign a contact list for a cell phone which can add & search really quick and is scalable.", "k": ["esign a contact", "search really quick", "contact list", "cell phone", "esign"]}
{"i": "6235058992054272", "t": "Design a mobile cab booking application (just screens and functionalities) on board.", "k": ["cab booking application", "mobile cab booking", "design a mobile", "booking application", "screens and functionalities"]}
{"i": "5153066133225472", "t": "A sender will send a binary string to a receiver meanwhile he encrypt the digits. You are given a encrypted form of string. Now, the receiver needs to decode the string, and while decoding there were 2 approaches.\r First, receiver will start with first character as 0; S[0] = 0, P[1] = S[1] + S[0], P[2] = S[2] + S[1] + S[0] and so on.\rSecond, Receiver will start with first character as 1; S[0] = 1, P[1] = S[1] + S[0], P[2] = S[2] + S[1] + S[0] and so on.\r You need to print both the strings, after evaluation from both first and second technique. If any string will contain other that binary numbers you need to print NONE.", "k": ["encrypt the digits", "sender will send", "receiver", "string", "receiver will start"]}
{"i": "5720518420332544", "t": "Given a normal die and a blank die. Fill in the blank die such that probability of sum of the number from both die is same for all the resulting sum and sum has a range from 1 to 12", "k": ["blank die", "normal die", "die", "blank", "sum"]}
{"i": "5712528975855616", "t": "Given a pond where all the stones are lined at a distance of one unit (C in each row and there are R such rows), each stone has a special value which denotes the length of the jump the frog can make i.e if frog is on stone (x,y) and value is k then frog can jump to (x+dx,y+dy) where dx+dy=k and frog doesn\u2019t leave the bounds.Find the min number of jumps to reach the stone at (R,C).", "k": ["denotes the length", "n\u2019t leave", "leave the bounds.find", "bounds.find the min", "min number"]}
{"i": "5689734242238464", "t": "Given a lane where there are various houses each containing a fixed amount of gold. Now a robber has to rob the houses such that when he robs a house the adjacent one cannot be robbed.Calculate the maximum amount of gold collected by him.", "k": ["amount of gold", "fixed amount", "maximum amount", "gold collected", "amount"]}
{"i": "5201944605884416", "t": "Given a network of roads connecting cities and capacity of each road(same for all roads)as well as their cost of repair(unique for each road) we are given number of buses(n) running between pair of cities using shortest path only. (Capacity of road= No of buses allowed on that road).\rUnsafe roads are road where no of buses on the road > Capacity of the road.\rNow given n we have to minimize the overall cost of all unsafe roads.", "k": ["roads connecting cities", "running between pair", "connecting cities", "shortest path", "capacity"]}
{"i": "4842405645778944", "t": "Given a review paragraph and keywords, find minimum length snippet from paragraph which contains all keywords in any order.", "k": ["find minimum length", "minimum length snippet", "find minimum", "minimum length", "length snippet"]}
{"i": "5719043099066368", "t": "Design notification system (notify the customer with a message)\r         Client (delivery boy, company updates etc)\r         Services (Email, SMS, Watsapp)\r         Scaling up, fault tolerance & failure management\r         Flexible modifiability of clients & services", "k": ["failure management flexible", "design notification system", "management flexible modifiability", "delivery boy", "fault tolerance"]}
{"i": "5136038064291840", "t": "Dictionary of words is given\r         i.e. [\u201ccat\u201d, \u201cdog\u201d, \u201crat\u201d, \u201ccatratdog\u201d, \u201ccatter\u201d]\r         Compound word: A word, which can be split into more than 1 valid words\rget compound word, with longest string length.", "k": ["longest string length", "compound word", "string length", "longest string", "valid words"]}
{"i": "5754323839483904", "t": "N people are there.\r         knows(A,B) return true if A knows B, else false.\r         Celebrity: A is called a celebrity\r                 If A knows none\r                 Everyone knows A\rGet celebrity, with less number of knows() method usage.", "k": ["return true", "people", "celebrity", "method usage", "return"]}
{"i": "5687558035996672", "t": "You are given a catalog of books, which have following attributes.\r         Name\r         Author\r         Publisher\r         Publish year\r         Category\r         Price\r         Count (sold)\rImplement following APIs on top of this catalog\r         addBookToCatalog(Book)\r         searchBook(by partial book name/author)\r         getMostSoldBooks(by author name/category, limit)\rExpectations:\r         Maintain DB on memory\r         Code should be readable. Design, handle naming convention,handle exceptions & should be running", "k": ["category price count", "author publisher publish", "publisher publish year", "price count", "publisher publish"]}
{"i": "6310576328278016", "t": "Find last cell visited in 2D matrix traveresed in Spiral Fashion", "k": ["spiral fashion", "traveresed in spiral", "find last cell", "matrix traveresed", "cell visited"]}
{"i": "4837368186011648", "t": "Design an online poker game.", "k": ["online poker game", "design an online", "poker game", "online poker", "design"]}
{"i": "6217615653470208", "t": "Given a server with a stack with some initial state say 1 Users can modify the stack using regular ops eg push 2 , pop etc and each op causes a version change. i.e version 1 : 1 , version 2 : 2,1 , version 3 : 3,2,1 , version 4 : 2,\rYou have to design it s.t person can ask for any version of the stack.\r Hint : keep copies every k times and keep the ops in an nonvolatile memory", "k": ["users can modify", "initial state", "users", "version change", "version"]}
{"i": "5748437318369280", "t": "Given any language , you use libraries , which might use more lib etc . Find the order of building the libraries", "k": ["find the order", "order of building", "building the libraries", "find", "libraries"]}
{"i": "5653209840353280", "t": "Given two unsorted arrays A and B in which B can accommodate in A\r How will you merge the two arrays.", "k": ["unsorted arrays", "arrays", "unsorted", "accommodate", "merge"]}
