{"i": "4884741427822592", "t": "Assuming you have a binary tree which stores integers, count the number of nodes whose value is lower than the value of its upper nodes.", "k": ["stores integers", "count the number", "binary tree", "tree which stores", "upper nodes"]}
{"i": "6313112158339072", "t": "Given a singly linked list, swap the list items in pairs (reconnect the pointers, not simply swap the values). For example:\r Before: A->B->C->D\rAfter: B->A->D->C", "k": ["singly linked list", "reconnect the pointers", "items in pairs", "simply swap", "singly linked"]}
{"i": "5696069105090560", "t": "We've 1 book left in the inventory. and two people are trying to get the same book ( say person x and person y ). Person x has added book to the cart and about to make payment and person y has also added book to the cart. How would you solve this concurrency problem ?", "k": ["person", "book", "book left", "added book", "left"]}
{"i": "6272666988183552", "t": "Design a data structure to keep track of top k elements out of 2 billion records.\rEach record is numberd with a key which is 30 bit and a number which is count of how many times the customer has visited us.\rCome up with an data structure so that the updation of element in 2 billion records will be faster.\rGetting top k element will be faster", "k": ["billion records", "data structure", "billion", "design a data", "design"]}
{"i": "5636648366768128", "t": "given a sequence of n integers ( positive and negative) , come up with an efficient algorithm that takes two consecutive numbers and finds whether they sum upto 10, if they do return true, else go over through the entire sequence to return false.", "k": ["positive and negative", "sum upto", "return true", "return false", "efficient algorithm"]}
{"i": "4820693768208384", "t": "You are given large number of files each approx: 10MB.\rAssume a million such files.\r You are required to find the most frequent word or top 5 most frequent word.\r How would you design the solution", "k": ["large number", "files each approx", "approx", "frequent word", "files"]}
{"i": "5727644228255744", "t": "Given two binary numbers each represented as a string write a method that sums up the binary numbers and returns a result in the form of binary number represented as a string. You may assume that input fits in the memory and the input strings are, in general, of different length. Optimize your solution, do not use unnecessary 'if' branching.\r example:sumBinary('0111101', '1101')returns\r'1001010'", "k": ["binary number represented", "binary numbers", "number represented", "write a method", "method that sums"]}
{"i": "5636317922721792", "t": "given a string, characters can be shuffled to make a paliandrome.\rWhat is the minimum possible number of insertions to original string needed so that it will be a palindrome (after shuffling, if required).Input\r T -> number of test cases\rT number of Strings in different linesimport java.util.Arrays;\r\nimport java.io.InputStreamReader;\r\nimport java.io.BufferedReader;\r\n\r\npublic class Xsquare{\r\n\tpublic static void main (String[] args) throws Exception{\r\n\t\t BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint limit = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\tint [] alphabets = new int[26];\r\n\t\t\r\n\t\twhile(limit-- >0){\r\n\t\t\tString input = br.readLine();\r\n\t\t\tArrays.fill(alphabets,0);\r\n\t\t\tchar [] inpChar = input.toCharArray();\r\n\t\t\tint sum = 0;\r\n\t\t\t\r\n\t\t\tfor (int i=0;i<input.length();i++){\r\n\t\t\t\t\tint pos = (int)inpChar[i] - (int)'a';\r\n\t\t\t\t\talphabets[pos]+=1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int i=0;i<26;i++){\r\n\t\t\t\tif(alphabets[i]%2==0)\r\n\t\t\t\t\tsum+=0;\r\n\t\t\t\telse\r\n\t\t\t\t\tsum+=1; \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(sum<=0)\r\n\t\t\t\tsum=0;\r\n\t\t\telse \r\n\t\t\t\tsum-=1;\r\n\t\t\tSystem.out.println(sum);\r\n\t\t}\r\n\t}\r\n}This is the code I submitted online. But it was not accepted as solution. What is the correct approach to this question?", "k": ["sum", "make a paliandrome", "shuffled to make", "public class xsquare", "string"]}
{"i": "6195999540248576", "t": "Given a class Employeeclass Employee {\r\nint age;\r\nString fName;\r\nString lName;\r\n}An UI searches for employees using either 'FirstName LastName' or 'LastName FirstName'. Give a solution that will return the employee details, in O(1) time.\re.g. FirstName - John LastName -  Walker\rboth John Walker and Walker John should work in O(1). Tried using a hashmap, but search would be O(2).", "k": ["class employeeclass employee", "string fname", "class employeeclass", "string", "employeeclass employee"]}
{"i": "5119512024186880", "t": "You are writing a simulation for a print server. This print   server can accept jobs from 3 places - network, USB, or operator. It can dispatch only one job at a time. Each input job should contain an integer t which is the time in seconds it will take to process the job. Write a multi-threaded program to simulate the server and provide some simulated load with jobs. Think, of some interesting statistics your program should emit and code them in.", "k": ["writing a simulation", "print server", "server", "print", "usb"]}
{"i": "5712680025325568", "t": "Find and fix the bugs in the following function that is supposed to remove the head element from a singly linked list.\r  void RemoveHead (node * head)\r{\r    free(head);\r    head = head - > next;\r}", "k": ["singly linked list", "find and fix", "linked list", "fix the bugs", "supposed to remove"]}
{"i": "5660915334643712", "t": "Write a function that takes a string as an input and outputs an integer, e.g. turning \"1234\" into 1234.", "k": ["write a function", "outputs an integer", "input and outputs", "turning", "write"]}
{"i": "5727518063591424", "t": "Given this set of interfaces:\r public interface Processor<T,U> {\rU process(T arg);\r}\rpublic interface Splitter<T,V> {\r \tV[] split(T arg);\r}\rpublic interface Worker<V,W> {\rW processPart(V part);\r}\rpublic interface Aggregator<U,W> {\rU aggregate(W[] args);\r}\r and this scenario: \rPlease provide \r1.\tAn implementation of Processor interface \r2.\tTest cases for testing the implementation\r  http://webcache.googleusercontent.com/search?q=cache:QW8rjNE9dDwJ:stackoverflow.com/questions/29716343/how-to-implement-processort-u-using-java-generics+&cd=1&hl=en&ct=clnk&gl=in", "k": ["public interface splitter", "public interface worker", "public interface aggregator", "public interface processor", "public interface"]}
{"i": "5749564130721792", "t": "This is the implementation for KMP shift table or the processing of pattern. Is the implementation correct ?Please provide test cases to break the code.public static String longestPrefSuff(char arr[])\r\n  {\r\n    int k[] = new int[arr.length];\r\n    int i = 0, j = 0;\r\n    for (int m = 0; m < arr.length; m++)\r\n    {\r\n      if (m == 0)\r\n      {\r\n        j++;\r\n        k[m] = 0;\r\n      }\r\n      else\r\n      {\r\n        if (arr[i] == arr[j])\r\n        {\r\n          k[m] = k[m - 1] + 1;\r\n          i++;\r\n          j++;\r\n        }\r\n        else\r\n        {\r\n          i = 0;\r\n          if (arr[i] == arr[j])\r\n          {\r\n            i++;\r\n            k[m] = 1;\r\n          }\r\n          j++;\r\n        }\r\n      }\r\n    }\r\n    return Arrays.toString(k);}", "k": ["kmp shift table", "kmp shift", "processing of pattern", "shift table", "static string longestprefsuff"]}
{"i": "5084359663026176", "t": "Write an algorithm for a robot navigating a maze.", "k": ["write an algorithm", "navigating a maze", "robot navigating", "write", "maze"]}
{"i": "5752833204813824", "t": "Write an algorithm to control an alarm clock.", "k": ["write an algorithm", "alarm clock", "algorithm to control", "control an alarm", "write"]}
{"i": "5104844375326720", "t": "Anybody knows what will be the career path for Technical Consultant at SAP? I am MCA student, got hired at SAP(Banglore) , wanted to know what is it worthy to join SAP for technical consultant role? (for Pay , career n future opportunities wise)..Thanks in Advance...Bit of information will help me choosing my career", "k": ["technical consultant role", "technical consultant", "path for technical", "sap", "technical"]}
{"i": "5679974386237440", "t": "Find whether a number (which is less than 10000) is a perfect square or not. If it is perfect square, calculate square root in O(1) without using sqrt function. \rExample : 1024 => 32\r1025=> not perfect square.", "k": ["perfect square", "square", "perfect", "calculate square root", "find"]}
{"i": "5643365427183616", "t": "Given a String find the first non repeating char in a single pass of the string.\rAssume a big character set like utf-8 (eleminate use of char[256])\rAvoid any subloop to have a very optimal solution", "k": ["string find", "single pass", "repeating char", "string", "avoid any subloop"]}
{"i": "5700175832023040", "t": "Write a function which returns the number of times the digit \"1\" appears in a number which is generated from raising 11 to the Nth power where N is passed in as an input parameter. The range of N is 0 to 1,000. \r Be sure to unit test your solution.\r For instance, If N is 3, the number is 1331 and the function returns 2.\rIf N is 5, the function returns 3.\rIf N is 10, the function returns 1 and so on.public int solution(int N) { ... }You have 30 minutes to complete the problem.", "k": ["nth power", "times the digit", "generated from raising", "input parameter", "function returns"]}
{"i": "5126972919250944", "t": "you have a interface called Op and a Filter interface\rinterface Op<T> {\r    public boolean hasNext();\r    public boolean<T> next();\r}\r interface Filter<T1, T2> {\r    public boolean filter(T1 t1, T2 t2);\r}\r design a MutualOp that has below API, MutualOp should return the ops that combine op1 and op2, also should meet with the filter \rclass MutualOp implements Op{\r    public MutualOp(Op left, Op right, Filter<Op, Op> filter) {\r        this.left = left;\r        this.right = right;\r        this.filter = filter;\r    }\r     public boolean hasNext {\r        ......\r    }\r     public T next {\r        ......\r    }\r}", "k": ["public boolean hasnext", "public boolean filter", "public boolean", "filter class mutualop", "boolean hasnext"]}
{"i": "5164359737147392", "t": "calculate minimum h-index for a sorted integer array(http://en.wikipedia.org/wiki/H-index)", "k": ["calculate minimum h-index", "sorted integer array", "calculate minimum", "integer array", "minimum h-index"]}
{"i": "5748756743979008", "t": "Assuming you're playing one game that you need guess a word  from a dictionary. You're given a machine you can try to guess the word, the machine will return how many characters has been matched by your guess. Design a system to crack the word.", "k": ["assuming you playing", "playing one game", "guess", "word", "assuming"]}
{"i": "5741988412391424", "t": "Permutate a list of string\r this question is supposed permutate the characters instead of who string, \r as input example {\"red\", \"fox\", \"super\" }, the expected output is\r rfs\rrfu\rrfp\rrfe\rrfr\rros\rrou\rrop\rroe\rror\rrxs\rrxu\rrxp\rrxe\rrxr\refs\refu\refp\refe\refr\reos\reou\reop\reoe\reor\rexs\rexu\rexp\rexe\rexr\rdfs\rdfu\rdfp\rdfe\rdfr\rdos\rdou\rdop\rdoe\rdor\rdxs\rdxu\rdxp\rdxe\rdxr", "k": ["dxp dxe dxr", "rfs rfu rfp", "rfu rfp rfe", "rfp rfe rfr", "rfe rfr ros"]}
{"i": "5170706490851328", "t": "A 2D array filled with integer, define a flow from one point to its neighbor only if the value of current point is not less than its neighbor's value. Consider up edge and left edge as east coast, bottom edge and right edge as west coast, find all position that it can flow to east coast and west cost both", "k": ["array filled", "filled with integer", "current point", "neighbor", "define a flow"]}
{"i": "5151040842235904", "t": "How to simulate the multithreading in javascript? Any real time scenario?", "k": ["multithreading in javascript", "simulate the multithreading", "javascript", "simulate", "multithreading"]}
{"i": "5637037128417280", "t": "Sort an integer array with three functions: findMin(), findMedium(), findMax().", "k": ["findmin", "findmedium", "findmax", "sort an integer", "integer array"]}
{"i": "6202171810906112", "t": "Hardest bug you faced", "k": ["hardest bug", "bug you faced", "hardest", "faced", "bug"]}
{"i": "5129818670628864", "t": "Let's assume that there's an array that has nonzero natural numbers where all the numbers repeat an even number of times, except for one value that repeats an odd number of times.  Can you write me a function that takes this array, and returns the value that occurs the odd number of times?\r Ex : - [ 4, 7, 2, 2, 5, 3, 5, 7, 7, 3, 4, 5 ]", "k": ["nonzero natural numbers", "number of times", "nonzero natural", "times", "odd number"]}
{"i": "5706164291502080", "t": "/**\r * Find if the given list of recurring weekly intervals covers the \r * entire time. Times are given up to a second. \r * \r * You can take the input intervals in the number of seconds since\r * the beginning the week or any other format you prefer.\r *\r * ---Example 1---\r * Input:\r * Tuesday 9AM - Sunday 9AM\r * Sunday 8:00:20AM - Wednesday 3AM\r * \r * Output:\r * true\r *\r * ---Example 2---\r * Input:\r * Tuesday 9AM - Sunday 9AM\r * Sunday 8:00:20PM - Tuesday 8AM\r * \r * Output:\r * false\r */", "k": ["recurring weekly intervals", "weekly intervals covers", "sunday", "list of recurring", "recurring weekly"]}
