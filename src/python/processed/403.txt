{"i": "12405703", "t": "find the largest word made of other words in a list of words...", "k": ["largest word made", "find the largest", "largest word", "word made", "find"]}
{"i": "12436679", "t": "find the largest word made of other words in a list of words...", "k": ["largest word made", "find the largest", "largest word", "word made", "find"]}
{"i": "12440669", "t": "Any resources for future bazaar's interview procedure for software devs freshers? What's the company's position in ecommerce", "k": ["software devs freshers", "future bazaar interview", "bazaar interview procedure", "devs freshers", "resources for future"]}
{"i": "12437670", "t": "An unsorted array contains elemets 1-1000, we are replacing one element in the array with n , and n is greater than 1000. How can we find out what element got replaced with  n", "k": ["elemets 1-1000", "unsorted array", "array contains elemets", "array", "1-1000"]}
{"i": "12436663", "t": "Given an unsorted array of integers, find a 3-element subset that sums to zero", "k": ["array of integers", "subset that sums", "unsorted array", "integers", "find"]}
{"i": "12437661", "t": "Given a set of points (x,y) in a 2-d plane, which are guesses of a particular unknown point (x',y'), how do find the best estimate of (x',y') using the set of points given.", "k": ["set of points", "unknown point", "plane", "set", "points"]}
{"i": "12374681", "t": "find common ancestor of 2 nodes in \r1. binary tree\r2. binary search tree\r No parent pointer is given.", "k": ["find common ancestor", "find common", "common ancestor", "find", "nodes"]}
{"i": "12347483", "t": "given a million integers find the largest k elements", "k": ["million integers find", "largest k elements", "million integers", "integers find", "find the largest"]}
{"i": "12435664", "t": "Given an array of ints (positive and negative) and a sum, find 2 numbers in the array whose sum equal to input sum.", "k": ["positive and negative", "equal to input", "sum equal", "input sum", "array of ints"]}
{"i": "12432668", "t": "Given m sorted arrays each of size n, merge the arrays into one big array.", "k": ["sorted arrays", "big array", "merge the arrays", "merge", "arrays"]}
{"i": "12435663", "t": "implement function:\rchar * get_ip_address(int ip_address)\r basically convert input ip_address to user-friendly format a.b.c.d", "k": ["basically convert input", "implement function", "basically convert", "user-friendly format", "convert input"]}
{"i": "12433665", "t": "Check if tree 1 is sub tree of another tree 2", "k": ["tree", "check if tree", "check"]}
{"i": "12434669", "t": "Given 2 sorted arrays, find the kth element in the merged array.", "k": ["sorted arrays", "find the kth", "merged array", "kth element", "sorted"]}
{"i": "12434668", "t": "Given 10 billion integers in a disk, find the integer not present.  You have < 10 MB of memory.", "k": ["billion integers", "find the integer", "integer not present", "billion", "disk"]}
{"i": "12434667", "t": "max sum sub-array problem.  Given an array of positive and negative integers, find the maximum sum possible from the different sub-arrays.", "k": ["max sum sub-array", "sum sub-array problem", "max sum", "sub-array problem", "max"]}
{"i": "12431668", "t": "You are given the data for the tennis players - the number of games played, wins/losses, years played, etc. Design an algorithm to rank the players.  This is an open ended question.", "k": ["years played", "games played", "number of games", "tennis players", "played"]}
{"i": "12434666", "t": "design a locking mechanism.", "k": ["design a locking", "locking mechanism", "design", "mechanism", "locking"]}
{"i": "12347482", "t": "test 1:\r  printf(\"test %s\\n\", NULL);\r  printf(\"test %s\\n\", NULL);\r prints:\rtest (null)\rtest (null)\r test 2:\r  printf(\"%s\\n\", NULL);\r  printf(\"%s\\n\", NULL);\rprints\rSegmentation fault (core dumped)\r what is the difference in the above tests ?  Why is segmentation fault not thrown in test 1 above ?", "k": ["prints segmentation fault", "null", "segmentation fault", "prints segmentation", "core dumped"]}
{"i": "12435662", "t": "Check if a tree is a BST.", "k": ["bst", "check", "tree"]}
{"i": "12433664", "t": "Find the in-order successor of an element in a BST.", "k": ["find the in-order", "bst", "in-order successor", "find", "in-order"]}
{"i": "12434665", "t": "what happens when BSS is mapped to address 0 ?", "k": ["bss is mapped", "mapped to address", "bss", "address", "mapped"]}
{"i": "12431667", "t": "what does a structure element a[0] mean ?  what is it used for ?", "k": ["structure element", "structure", "element"]}
{"i": "12431666", "t": "what does #define a ## b mean ?", "k": ["define"]}
{"i": "12434664", "t": "what is the size of short, int, pointer in 32 bit and 64 architectures ?", "k": ["int", "architectures", "size of short", "short", "pointer"]}
{"i": "12428670", "t": "Design the autocomplete feature (ex:Google Suggest)", "k": ["google suggest", "design the autocomplete", "autocomplete feature", "google", "suggest"]}
{"i": "12425675", "t": "Given a file, return the list of all the words which occurs exactly n times in the file", "k": ["return the list", "words which occurs", "file", "return", "list"]}
{"i": "12427668", "t": "Design and Implement Boggle game for n x n", "k": ["implement boggle game", "implement boggle", "design and implement", "boggle game", "implement"]}
{"i": "12318673", "t": "You have a binary tree. Given two number in that tree, how will you find the least common ancestor ? What will the complexity of this search ?", "k": ["binary tree", "tree", "binary", "common ancestor", "ancestor"]}
{"i": "12421674", "t": "Suppose you are a search engine owner and want to show adv to make money. How will you filter the advertisements to be shown when users searches for something. Take into consideration that advertisers will not be interested in showing adds to all geographical locations and some types of add may be banned in some locations. \rFor eg : There is a alcohol selling company. Now alcohol adv is banned in india so this advertisement should not be shown. Also an adv in India might not want to show add in Europe. But Advertisement for Alcohol consulting or addiction etc can be shown. So if someone types alcohol rehab then what strings you will search ? how ill you define which all strings to be searched for ? and what data structure will you use to search ? and what is the algorithm for it ?\rDefine the algorithm and data structures you will use.", "k": ["search engine owner", "make money", "engine owner", "alcohol", "search engine"]}
{"i": "12318666", "t": "Flatten a binary tree in the its inorder traversal form. Example if there is a tree  like\r  01\r0203\r04050607\r Flatten it to 04->02->05->01->06->03->07\rRight of 4 should be pointing to 02 and so on.\rThe order is inorder traversal order\rI was asked to use Recursion\rPLease can some one post C# code for this.", "k": ["inorder traversal form", "traversal form", "flatten", "flatten a binary", "binary tree"]}
