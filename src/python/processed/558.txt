{"i": "231741", "t": "what r the advantages of blocking process compared to busy waiting and do blocking process consume cpu resources.", "k": ["consume cpu resources", "process consume cpu", "blocking process compared", "blocking process consume", "cpu resources"]}
{"i": "230713", "t": "How will you test a module which ranks query completion suggestions in a search engine??", "k": ["ranks query completion", "query completion suggestions", "search engine", "test a module", "module which ranks"]}
{"i": "231704", "t": "There is an sorted array containing some no. Now a no is chosen randomly and all the no on left are shifted downwards and all the no on right are shifted upwards now if have to find any no in the new array what will be the best algorithm?", "k": ["sorted array", "array", "left are shifted", "shifted upwards", "sorted"]}
{"i": "230692", "t": "What are some things to take care of when definining - a) Copy constructor b) Assignment operator?", "k": ["assignment operator", "copy constructor", "copy", "assignment", "definining"]}
{"i": "230691", "t": "There is class having a constructor taking a single int argument (there is no default constructor). Declare an array of 500 objects of that class.", "k": ["single int argument", "int argument", "taking a single", "single int", "constructor taking"]}
{"i": "230689", "t": "There is a log file where each line contains fields separated by spaces. One of the fields is the IP address of the source node. We want to find the list of IP Addresses that have the most log entries. Lets say find the top 10 IP Addresses with most log entries. Give the pseudo code for this?", "k": ["separated by spaces", "fields separated", "log entries", "log file", "line contains fields"]}
{"i": "231694", "t": "Implement multiplication of two integers using recursion. You cannot use loops or multiplication/division operators. How will you test it? Make it work for negative integers too.", "k": ["implement multiplication", "implement", "recursion", "division operators", "integers using recursion"]}
{"i": "230688", "t": "a) We have Customer objects and we want to retrieve customers by birth date. Which data structure would you use? What is the time complexity?\rb) Now what if we want to retrieve customers based on a given range of birth days?", "k": ["birth date", "retrieve customers", "customer objects", "date", "retrieve"]}
{"i": "231680", "t": "constants defined through $define are placed in what type of memory and do they follow block scope will o/p of print be 1\r void main()\r{\rfunct();\rprintf(\"%d\",x)\r}\r funct()\r{\r#define x 1\r}", "k": ["follow block scope", "void main", "funct", "constants defined", "type of memory"]}
{"i": "231679", "t": "What is the best efficient algorithm to find intersection point of two lines.\r You are given four points A, B , C , d. \rFind the intersection point between AB and CD.\rOptimize the algorithm as much as you can.", "k": ["intersection point", "lines", "efficient algorithm", "intersection", "point"]}
{"i": "231671", "t": "Given char* func1(char* target, char* substring,char* replacement)\rwrite a c++ code to find the substring in the target and replace the whole substring with the replacement. (hint: replacement can be larger or smaller than the substring.)consider all possible test cases and check.", "k": ["code to find", "char", "find the substring", "target and replace", "target"]}
{"i": "231669", "t": "1. a Q about stack overflow and some design questions about distributed system protocols; \r2. merge two sorted list; \r3. rotate an array by K;\r4. Given an XML string, check if it's valid or not; \r5. binary tree: each node has an additional field node which is initialized to be NULL at first. Asked to, for each node, point its next pointer to the next node in level-by-level traversal order.  NO QUEUE should be used HERE!\r I think the recruiter matches me to the wrong team which focus on C# , but I know nothing about C#! So failed for sure:(", "k": ["node", "distributed system protocols", "system protocols", "xml string", "stack overflow"]}
{"i": "231668", "t": "find LCA (lowest common ancestor) for non binary tree.", "k": ["lowest common ancestor", "find lca", "lowest common", "common ancestor", "binary tree"]}
{"i": "230665", "t": "Write a program which makes the probablity of getting the even number when a dice is thrown in 72%( some number other than 50%).", "k": ["write a program", "program which makes", "makes the probablity", "dice is thrown", "write"]}
{"i": "231665", "t": "write a singleton class and explain how u can create instance of this class using static func in this class. Explain which constructor is called when u create instance using this func ?", "k": ["write a singleton", "create instance", "singleton class", "class", "static func"]}
{"i": "222713", "t": "write c code for checking if given binary tree is balanced ?", "k": ["write c code", "tree is balanced", "code for checking", "binary tree", "write"]}
{"i": "220769", "t": "Make a T Flip Flop using a D Flip Flop", "k": ["flip flop", "flip", "flop", "make"]}
{"i": "222708", "t": "What is the function of a D-flipflop, whose inverted outputs are connected to its input?", "k": ["d-flipflop", "inverted outputs", "outputs are connected", "input", "function"]}
{"i": "222707", "t": "What advantages do synchronous counters have over asynchronous counters?\r What types of flip-flops can be used to implement the memory elements of a counter?", "k": ["advantages do synchronous", "synchronous counters", "advantages", "synchronous", "counters"]}
{"i": "220768", "t": "Tell some of applications of buffer?\r What is D-Word, Q-word?", "k": ["applications of buffer", "q-word", "buffer", "applications", "d-word"]}
{"i": "220766", "t": "If inverted output of D flip-flop is connected to its input how the flip-flop behaves?", "k": ["flip-flop behaves", "inverted output", "behaves", "flip-flop is connected", "flip-flop"]}
{"i": "220755", "t": "Write a program to find the square root of a given number. \r He wanted some kind of binary search.", "k": ["write a program", "program to find", "find the square", "square root", "write"]}
{"i": "220740", "t": "One real mind-boggling question: Rewrite malloc and free so that they detect memory corruption. For example in a code,\r ptr = malloc(5)\rwrite(20); // you modify 20 bytes starting at address ptr\rfree(ptr);", "k": ["real mind-boggling question", "detect memory corruption", "rewrite malloc", "mind-boggling question", "memory corruption"]}
{"i": "220739", "t": "Device a function that removes the occurences of blank spaces from a string. Constraints: run in linear time and the algorithm must be in-place. For example if,\rstring = Hi there wassup\routput = Hitherewassup", "k": ["device a function", "function that removes", "removes the occurences", "occurences of blank", "blank spaces"]}
{"i": "222677", "t": "Device a function that removes the occurrences of string2 from string1. For example if,\rstring1 = HelloWorld\rstring2 = llo\routput = HeWorld", "k": ["device a function", "function that removes", "removes the occurrences", "device", "llo output"]}
{"i": "220738", "t": "For the following piece of code:\r func(int d)\r{\r   int temp;\r   while(temp)\r      temp--;\r}\r How does the compiler behave differently if the variable temp is declared with the volatile 'qualifier' ?", "k": ["compiler behave differently", "piece of code", "compiler behave", "behave differently", "int temp"]}
{"i": "220737", "t": "This question was asked by the device driver's team: Can a variable be declared with both the 'const' and 'volatile' qualifiers ?", "k": ["device driver team", "driver team", "question was asked", "device driver", "variable be declared"]}
{"i": "220724", "t": "Describe a (n log2 n) time algorithm that, given a set S of n real numbers and another real number x, determines whether or not there exist\rtwo elements in S whose sum is exactly x.", "k": ["time algorithm", "exist two elements", "real numbers", "real", "describe"]}
{"i": "220722", "t": "You are given have a datatype, say X in C.\rThe requirement is to get the size of the datatype, without declaring a variable or a pointer variable of that type,And, of course without using sizeof operator !", "k": ["datatype", "sizeof operator", "variable", "pointer variable", "type,and"]}
{"i": "219791", "t": "what are the advantages and disadvantages of little endian vs big endian and vice versa?", "k": ["vice versa", "advantages and disadvantages", "big endian", "versa", "endian vs big"]}
