{"i": "291831", "t": "Write code for binary search", "k": ["write code", "binary search", "code for binary", "write", "search"]}
{"i": "291830", "t": "Consider a moblie phone : when you save the number, the number gets saved under a different name . What is the priority and severity of the bug", "k": ["moblie phone", "save the number", "priority and severity", "number gets saved", "number"]}
{"i": "292860", "t": "What is the most critical bug you found", "k": ["bug you found", "critical bug", "found", "critical", "bug"]}
{"i": "291829", "t": "Explain bug life cycle", "k": ["explain bug life", "bug life cycle", "explain bug", "life cycle", "bug life"]}
{"i": "291828", "t": "What is the difference between retesting and regression testing", "k": ["regression testing", "difference between retesting", "retesting and regression", "testing", "difference"]}
{"i": "291827", "t": "What is the difference between a bug and a defect", "k": ["defect", "difference", "bug"]}
{"i": "291821", "t": "How are function calls implemented? What are the parameters that are stored on the stack when a function is called?", "k": ["function calls implemented", "calls implemented", "function calls", "implemented", "function"]}
{"i": "292853", "t": "What are Http Headers", "k": ["http headers", "headers", "http"]}
{"i": "291820", "t": "Test cases for LRU cache", "k": ["lru cache", "cases for lru", "test cases", "lru", "test"]}
{"i": "291817", "t": "What is performance testing..How would you test the performance of a flash object", "k": ["flash object", "performance testing.", "testing.", "object", "test the performance"]}
{"i": "291810", "t": "Given a function that returns a random number between 1 and 5, make it return a number between 1 to 7", "k": ["returns a random", "random number", "make it return", "function that returns", "return a number"]}
{"i": "292833", "t": "Find the intersection of 2 sorted arrays.\rGive all test cases to test", "k": ["sorted arrays", "find the intersection", "find", "sorted", "arrays"]}
{"i": "291796", "t": "Given an array of numbers, write a function which will return another array containing the elements of the previous array but in random order.", "k": ["write a function", "random order", "previous array", "array of numbers", "array"]}
{"i": "292814", "t": "How would you test a general website login page.", "k": ["website login page", "general website login", "login page", "test a general", "general website"]}
{"i": "292813", "t": "Code and write test cases for compare(string str1, string str2).", "k": ["write test cases", "string", "code and write", "cases for compare", "write test"]}
{"i": "292812", "t": "Given a set of coordinates (x_i, y_i), i ranges from 1 to n, the coordinate values are integers, write a function 'bool isCenterInteger(int points[][])' which returns true if at least one of the midpoints of the line joining the points is an integer.", "k": ["write a function", "bool iscenterinteger", "int points", "returns true", "line joining"]}
{"i": "291786", "t": "Convert a binary search tree to a sorted doubly linked list\rinplace.", "k": ["linked list inplace", "binary search tree", "sorted doubly linked", "doubly linked list", "convert a binary"]}
{"i": "291777", "t": "implement factorial, do remeber to handle the overflow case, which is actually the key point, otherwise this problem will be too simple", "k": ["implement factorial", "overflow case", "key point", "remeber to handle", "handle the overflow"]}
{"i": "292801", "t": "given a matrix (assume it is a bitmap), print all cells that are on", "k": ["print all cells", "matrix", "assume", "bitmap", "print"]}
{"i": "292800", "t": "given a string, print each character and its number of occurence in sequence. use BST and no recursion, no extra memory is allowed.\re.g, char* str=\"bcdaceffbe\", you should print\ra 1 b 2 c 2 d 1 e2 f 2.", "k": ["occurence in sequence", "number of occurence", "string", "sequence", "memory is allowed"]}
{"i": "291762", "t": "Write code to draw a circle.", "k": ["write code", "draw a circle", "code to draw", "write", "circle"]}
{"i": "291761", "t": "Out of all the questions, MS asked me to implement a Reader writer lock problem. \r And obv., I did get it but not full proof!\r Try to come up with a robust code/solution.", "k": ["reader writer lock", "writer lock problem", "implement a reader", "reader writer", "lock problem"]}
{"i": "291760", "t": "You have a string of words (with spaces in it). \rYou also are given a character (say c). \r Remove all the words in the string if those words start with 'c'.\r e.g. \"HELLO WORLD HAT\" and say c='H'\rthen result should be \"WORLD\"", "k": ["world hat", "words", "world", "spaces", "string"]}
{"i": "291755", "t": "A man wants to grow tree very quickly. He bought some special tree seeds that double in height everyday. On the 10th day, the tree is 40 feets high. On what day was it five feets high?", "k": ["feets high", "grow tree", "quickly", "tree", "high"]}
{"i": "292770", "t": "Write a function to e reverse the order of words in a sentence using constant extra space\reg: \"Here I am\" would be \"am I Here\". \r I tried to solve this problem by taking the space as delimiter and inserting each word rfrom the string into a stringbuffer.\r sb.insert(0,word)\r Finally the stringbuffer would have the reversed string. \r But this does not satisfy the constant extra space condition as the size of stringbuffer is still dependant on string size.\r Please write your inputs on this", "k": ["constant extra space", "reverse the order", "extra space", "constant extra", "extra space condition"]}
{"i": "292765", "t": "The LL is in alternating ascending and descendin orders. Sort the list efficiently \regs: 1->2->3->12->11->2->10->6->NULL", "k": ["descendin orders", "alternating ascending", "ascending and descendin", "list efficiently egs", "null"]}
{"i": "292764", "t": ".                   10\r            6                    12\r        4 ->  5 <-------->11<-----> 13 <-- \r       |_________________________________|\r In the BST you have the leaf nodes connected to form a doubly LL. Given a node, identify its height", "k": ["leaf nodes connected", "connected to form", "form a doubly", "bst", "leaf nodes"]}
{"i": "292763", "t": "A linked list has a loop. \r Find the kth node from the end of the loop. \r For example:\r head -> 1 -> 2-> 3-> 4-> 5\r                 |_______|\r Find the 2nd node from the end of the loop which is node 5.", "k": ["linked list", "find the kth", "find", "loop", "node"]}
{"i": "291744", "t": "Find the maximum subsequence sum of an array of integers which contains both positive and negative numbers and return the starting and ending indices within the array. \r For example: \r int array[] = {1, -2, -3, 4, 5, 7, -6}\r The max subsquence sum is 4+5+7= 16 and start index is at 3 and end index is at 5.", "k": ["maximum subsequence sum", "find the maximum", "maximum subsequence", "positive and negative", "negative numbers"]}
{"i": "292762", "t": "You have one dice. \r If I roll a 1, I win.\r If you roll a 6, you win. \r What is the probability that you will win?", "k": ["win", "dice", "roll", "probability"]}
