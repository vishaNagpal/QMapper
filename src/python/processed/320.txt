{"i": "15031900", "t": "For a given set of points find a point along with 3 others that are closest to each other.", "k": ["points find", "set of points", "find a point", "set", "find"]}
{"i": "15026898", "t": "find 10 most frequently occurring words in a given file.", "k": ["frequently occurring words", "find", "frequently occurring", "occurring words", "file"]}
{"i": "15030878", "t": "Given a board of snakes and ladders game, provide an algorithm to find the minimum number of dice rolls required from 1 to 50 and maximum number of dice rolls required from 51 to 100.\rNote:  Consider snake bite and ladder up condition from the board.", "k": ["dice rolls required", "dice rolls", "rolls required", "number of dice", "provide an algorithm"]}
{"i": "15031895", "t": "Suppose you have given a tree with N nodes and weights associated with each node and edges are given(present in the tree).You have to remove two edges such that the sum of weights of three trees created is maximum.", "k": ["created is maximum", "trees created", "remove two edges", "sum of weights", "nodes and weights"]}
{"i": "15032898", "t": "Write a function to reverse the word order of String. Do this in-place. \"This is a cat\" -> \"cat a is This\". Spaces between words may not be consistent.", "k": ["order of string", "write a function", "function to reverse", "string", "word order"]}
{"i": "15028873", "t": "Given an NxN matrix with unique integers : Find and print positions of all numbers such that it is the biggest in its row and also the smallest in its column.", "k": ["find and print", "unique integers", "nxn matrix", "matrix with unique", "print positions"]}
{"i": "15037854", "t": "As kernel can access user space memory, why should copy_from_user is needed?", "k": ["user space memory", "access user space", "space memory", "kernel can access", "access user"]}
{"i": "15037853", "t": "what are the best synchronization techniques used in linux kernel?", "k": ["linux kernel", "synchronization techniques", "kernel", "synchronization", "techniques"]}
{"i": "15033853", "t": "Write a program to read a give directory in your hard drive and list all the sub directories and files as hierarchy structure.", "k": ["write a program", "hierarchy structure", "program to read", "read a give", "give directory"]}
{"i": "15035857", "t": "Write a program to shuffle a deck of 52 cards and shuffle them equally to 4 players", "k": ["write a program", "players", "cards and shuffle", "program to shuffle", "shuffle a deck"]}
{"i": "15033852", "t": "Write a program that takes an array of numbers, and then prints out all the possible pairs of numbers that sum up to the value N.  \rE.g., if the array contains the numbers {0, 1, 2, 2, 3, 4, 5} and the target value N is 4, then the output would be (0, 4), (1, 3), (2, 2).", "k": ["write a program", "pairs of numbers", "numbers", "numbers that sum", "write"]}
{"i": "15027865", "t": "EMP (empno, name, deptno, salary)\rDEPT (deptno, name)\r Write a SQL query that tells me the average salary by department name.", "k": ["write a sql", "sql query", "deptno", "average salary", "emp"]}
{"i": "15031853", "t": "you have a matrix of N x N filled with 1 or 0. you can move only 1 step either right or 1 step down. you need to count maximum number of \"connected 1\" in given matrix. for example\r0 0 1 1\r1 1 1 0\r1 0 1 0\r0 1 0 1\r[Start from top left] maximum no. of 1 is 4\r[1,0][1,1][1,2][2,2]", "k": ["count maximum number", "step", "matrix", "filled", "start from top"]}
{"i": "15033826", "t": "design Malloc Function which user can call and get the allocation. For example, there is a Byte array of byte[1000] so if use call getAllocation(3) then we will assign 3 bytes to user. and again if another user call getAllocation(100) then we will assign again,", "k": ["design malloc function", "malloc function", "design malloc", "user call getallocation", "call getallocation"]}
{"i": "15038819", "t": "Which data structure and java design pattern are best fitted for Car Parking problem.", "k": ["car parking problem", "car parking", "parking problem", "java design pattern", "fitted for car"]}
{"i": "15029824", "t": "I have two threads, both contain data from a database table. One thread performs some operation and update the data in the database table whereas second thread has not yet done any operation. Second thread does operation after some time and wants to update the operation. Since the first thread has already updated the data in the database table, second thread has stale data. How can we manage so that table should have the actual data not the stale data.", "k": ["database table", "data", "thread", "database", "table"]}
{"i": "15025829", "t": "int n=99;\rint unsignedShift = n>>>2;\rSystem.out.println(\"unsignedShift=\"+unsignedShift);\rThe above result gives \"unsignedShift=24\". The question is if 24 is given how can I get back the original value ie n ie 99. How to do it for both positive and negative integer. How to do it in java.", "k": ["int unsignedshift", "unsignedshift", "int", "result", "back the original"]}
{"i": "15038815", "t": "Create a class Graph, which must represent the graph data structure in java. What will be the difference between directional and unidirectional Graph? How would you represent the weight of the edges?", "k": ["graph data structure", "create a class", "structure in java", "data structure", "class graph"]}
{"i": "15025822", "t": "WAP to compare string without library function in c??\r1)Program should be designed using Pointers\r2)Most efficient i.e lesser number of loops or comparisons??", "k": ["wap to compare", "wap", "compare string", "string without library", "library function"]}
{"i": "15035825", "t": "If we have a very big text file which contains millions of lines of code. On every line there is a one word. We also have a random generator which returns a number between 0 and 1. When we have 1 - this will corresponds to the last line of the file. When we have 0 - to the first one. We want an algorithm which tells as the word (the line) which corresponds to the generated number.", "k": ["big text file", "big text", "text file", "line", "code"]}
{"i": "15028814", "t": "Write an algorithm to check if a tree is binary search tree", "k": ["binary search tree", "write an algorithm", "algorithm to check", "binary search", "search tree"]}
{"i": "15033809", "t": "How will you convert a min heap to max heap (or viceversa) without using additional data structures??", "k": ["additional data structures", "data structures", "convert a min", "additional data", "min heap"]}
{"i": "15025810", "t": "Given the two arrays with integers, return the common elements", "k": ["arrays with integers", "return the common", "common elements", "integers", "return"]}
{"i": "15037807", "t": "A soccer league has n matches with A,B,C teams with number of goals scored by each team in each match.If  a team wins against another team ,It gets 3 points and lost team gets 0 point.If a tie ,both team gets 1 point.Now how do you frame the ranking of teams.\r 1) All teams played n matches.\r2) A team 1 match,B Team 2 matches, 3 team 3 matches.Like wise it goes.\r They looked for coding and data structure techniques.", "k": ["point.if a tie", "points and lost", "soccer league", "number of goals", "goals scored"]}
{"i": "15030806", "t": "A log file which has user details(user ID,timestamp) and pages visited in a particular day by that user.The next day -the same kind of log file gets generated.How do you find the probability of users who logged in consecutive days out of the second day - logged in users? The question is simple,but they look for the efficient data structure and time complexity.", "k": ["log file", "logged in consecutive", "pages visited", "find the probability", "user details"]}
{"i": "15027795", "t": "Assume there's a website with 8 pages. We are interested in calculating the most frequently visited page sequences of size 3( e.g 1->5->2 ).We are given a log file that has several rows for a particular time period. Each row has following info : time, UserID, page visited\rSuggest an optimal algorithm to find the most frequest visited page sequence of size 3.", "k": ["page visited suggest", "visited page sequences", "visited page", "page", "sequences of size"]}
{"i": "15026794", "t": "In a circle there are N number of Gas filling stations which can provide you will gas of capacity  C1, C2\u2026CN. Distance between filling station is D1, D2, D3\u2026\u2026DN. Considering your vehicle will consume 1 volume of gas per distance. Find the filling station from which you should start the journey so that you will never get short of Gas.", "k": ["filling station", "gas filling stations", "gas", "filling", "number of gas"]}
{"i": "15038772", "t": "Develop a function which will return either true or false. But at any point of time it should not return more than N number of true (it can be less than N) in last X secs.", "k": ["develop a function", "develop", "false", "true or false", "return"]}
{"i": "15027788", "t": "For a string with uneven number of white spaces, what is best method or algorithm to trim the white spaces between characters, except special characters like !or,\rAlso the beginning and end should not contain any white space", "k": ["white spaces", "string with uneven", "uneven number", "method or algorithm", "algorithm to trim"]}
{"i": "15031779", "t": "Given a 2D array of size m X n, containing either 1 or 0. As we traverse through, where ever we encounter 0, we need to convert the whole corresponding row and column to 0, where the original value may or may not be 0. Now devise an algorithm to solve the problem minimizing the time and space complexity.", "k": ["array of size", "array", "size", "row and column", "space complexity"]}
