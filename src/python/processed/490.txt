{"i": "4439677", "t": "Implement count Non-leaf nodes on a binary tree.", "k": ["implement count non-leaf", "count non-leaf nodes", "count non-leaf", "non-leaf nodes", "implement count"]}
{"i": "4474677", "t": "In an XY plane, find number of path from origin(0,0) to any point (x,y) subject to following conditions:\r1. x,y are +ve integers\r2. From a position you can move either right or up.\rint numPaths(x,y)\r(Hint: It can be solved by dynamic programming)", "k": ["find number", "path from origin", "number of path", "plane", "find"]}
{"i": "4468683", "t": "Find if 2 numbers add up to some number x in an array of integers.", "k": ["array of integers", "numbers add", "find", "integers", "add"]}
{"i": "4474676", "t": "What's the difference between Bandwidth and Latency?", "k": ["bandwidth and latency", "difference between bandwidth", "latency", "bandwidth", "difference"]}
{"i": "4407686", "t": "1. When do deallocks occur?\r2. How to avoid them?", "k": ["occur", "deallocks occur", "deallocks", "avoid"]}
{"i": "4435682", "t": "1. Types of DB intexes\r2. what is index fragmentation", "k": ["types", "intexes", "fragmentation", "index", "index fragmentation"]}
{"i": "4436680", "t": "Implement int countNode(Node* n) on a binary tree.", "k": ["implement int countnode", "node", "implement int", "int countnode", "binary tree"]}
{"i": "4395681", "t": "1. Implement ReverseLinkedList(Node* n).", "k": ["node", "implement reverselinkedlist", "implement", "reverselinkedlist"]}
{"i": "4429681", "t": "A and B have 1 hour window in which they can meet. Whoever comes first will wait for the other for next 10 minutes and then leave. what's the probability of them meeting?", "k": ["hour window", "hour", "meet", "window", "minutes"]}
{"i": "4417679", "t": "Given points (x1, y1) and (x2, y2) defining a line in XY plane, write functions bool isAboveLine(float x, float y) which returns true if the point (x,y) is above the give line or false if not.", "k": ["write functions bool", "functions bool isaboveline", "write functions", "bool isaboveline", "functions bool"]}
{"i": "4423684", "t": "Implement recursive shuffle(int[] A, int n).", "k": ["implement recursive shuffle", "implement recursive", "recursive shuffle", "int", "implement"]}
{"i": "4448674", "t": "Implement queue using stacks.", "k": ["implement queue", "queue using stacks", "implement", "stacks", "queue"]}
{"i": "4399679", "t": "1. Implement linked-list\r2. Use above to implement queue. Give time complexity of enqueue(), dequeue(), search(k)\r3. Improve search(k) complexity to O(1) by modifying the above data stuuct( Hint: Linked Hashmaps)", "k": ["linked hashmaps", "hint", "search", "implement", "complexity"]}
{"i": "4472667", "t": "You have to transform a given word to another word with minimum number of changes, changing only one letter at a time. All the intermediate words should be a dictionary word.\rEx. fox->cog= fox->fog->cog.. answer is 2", "k": ["minimum number", "word", "changing", "time", "transform"]}
{"i": "4365958", "t": "Given a binary tree, and 3 nodes x,y,z write a function which returns true if y lies in the path between x and z and false otherwise.", "k": ["binary tree", "write a function", "function which returns", "returns true", "nodes"]}
{"i": "4289207", "t": "Given an array of length N. How will you find the minimum length\rcontiguous sub - array of whose sum is S and whose product is P . Here\rS and P will be given to you.\r was asked in YAHOO CODING ROUND interview", "k": ["yahoo coding round", "coding round interview", "yahoo coding", "coding round", "round interview"]}
{"i": "4332173", "t": "Return the nodes only a particular level of the BST.\r given: level, from which nodes to be returned.", "k": ["bst", "return", "return the nodes", "nodes", "level"]}
{"i": "4341129", "t": "Write a program to display all the anagrams for \"abcdef\". Which language would you do it in and why? Which is the best language to use for coding this?", "k": ["write a program", "program to display", "abcdef", "write", "program"]}
{"i": "4311101", "t": "Implement a search engine. The input will be 100 text files. Return the paragraph and the file in which the keyword appears.", "k": ["implement a search", "search engine", "implement", "engine", "text files"]}
{"i": "4334082", "t": "Implement a phone directory", "k": ["implement a phone", "phone directory", "implement", "directory", "phone"]}
{"i": "4306122", "t": "Implement Twitter's trending topic.\rThe input is a text file. Implement it in C.", "k": ["twitter trending topic", "implement twitter trending", "twitter trending", "implement twitter", "trending topic"]}
{"i": "4369856", "t": "1. what is virtual memory\r2. Difference between process and thread\r3. Design a game with 2 players who have health as a parameter.", "k": ["virtual memory", "memory", "difference between process", "process and thread", "difference"]}
{"i": "4322133", "t": "Given post order traversal of a BST, construct the BST. Also specify the time and space complexity", "k": ["post order traversal", "construct the bst", "bst", "post order", "order traversal"]}
{"i": "4377857", "t": "Delete n'th element from the end of the singly linked list", "k": ["delete n'th element", "singly linked list", "delete n'th", "linked list", "n'th element"]}
{"i": "4375842", "t": "1. Find the largest subtree in the given binary tree which is a BST. (Subtree can refer to any part of the tree.Only root node and its children are also a subtree).\r2. Reverse the given linked list for k elements.\rEg. when k =2 for list 1->2->3->4, reversed list should be 2->1->4->3", "k": ["subtree", "bst", "list", "find the largest", "largest subtree"]}
{"i": "4361878", "t": "1. how to find the no.of times a number has repeated in a sorted array?\r2. Given two binary trees, merge it into a single binary tree", "k": ["single binary tree", "sorted array", "binary trees", "binary", "find the no.of"]}
{"i": "4360885", "t": "find one missing card from deck of 51 card", "k": ["find one missing", "missing card", "find", "card from deck", "card"]}
{"i": "4287077", "t": "Convert a max heap to min heap.", "k": ["convert a max", "max heap", "min heap", "convert", "heap to min"]}
{"i": "4381827", "t": "given string\rinput1, input2, remove wherever the occurence of input2 in input1.\re.g:\rinput1: abcthabdtheshhtexyztheaaa\rinput2: the\rwill become abcthabdshhtexyzaaa\rgive the test cases.", "k": ["string", "remove", "occurence", "test cases", "abcthabdtheshhtexyztheaaa"]}
{"i": "4355038", "t": "Output ?      \r     int i = 0 , a[3] ;\r     a[i] = ++i;\r     printf (\" %d %d \",a[i],i) ;", "k": ["output", "printf", "int"]}
