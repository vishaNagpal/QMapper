{"i": "6255535581036544", "t": "permute the String including case change\r \"abc\".  \r For example:\r abc\rABC\rAbc\raBc\rabC\rABc\rabC\rAbC", "k": ["abc abc abc", "abc abc", "string including case", "including case change", "permute the string"]}
{"i": "4809005621837824", "t": "implemnt JSON.stringify()", "k": ["implemnt json.stringify", "implemnt", "json.stringify"]}
{"i": "5720238774550528", "t": "Phone interview question from January.\r We have a maze with three types of spaces:\r1. Walls\r2. Offices\r3. Hallway space\r Given a maze, determine which non-wall space would minimize the sum of all distances between that space and every office. You can only move up, down, left, and right.\r (Edit: ChrisK described the problem more clearly than I did: \"find the field that minimizes the sum of the shortest path[s] from this field to each office space.\")\r Example:WWWWWWWW\r\nWWW O WW\r\nWWW   OW\r\nWWW WWWW\r\nWO  WWWW\r\nWWW WWWW\r\nWO     W\r\nWWWWWWWWO = office, W = wall, spaces are hallway spaces\r You can represent the maze however you want. That is, you can use any data structures you want, and you don't necessarily have to use O for office, W for Wall, and spaces for hallways.\r (I'm not sure if you can actually start from an office space, but that should be a trivial issue because you can always just start a position adjacent to an office.)", "k": ["phone interview question", "question from january", "phone interview", "january", "wwww www wwww"]}
{"i": "5769714113445888", "t": "Can you achieve the following without using enums? Given the last two lines stay the same.enum DayHalf\r\n{\r\nAM,PM;\r\nDayHalf dh1=DayHalf.AM;\r\nDayHalf dh2=DayHalf.PM;\r\n}", "k": ["dayhalf", "enums", "achieve", "same.enum dayhalf", "am,pm"]}
{"i": "5754824529281024", "t": "1 year exp. Interviewed at Cambridge, MA\r Round1\rLC304. Follow-up: given a char stream instead a string as the input, get the longest substring with at most K distinct characters.\r Round2\rFind out the area of a number of squares on a plane, an advanced version of LC223.\rHad no clue on that problem at all so the interviewer kindly gave another one LC305. \r Round3\rSimilar to LC393 but the interviewer made a slightly different rule for encoding.\rFollow-up: decode with utf-16. It took quite a while for me to understand the rules.\r Round4\rCard game rule: the hand is drawn from a pack of cards (no jokers).\rPlay cards ONLY when they are\r1. 3 of a kind ('AAA' ) or 4 of a kind('AAAA\u2019).\r2. a straight flush of 3 or more cards('JQK' or 'A23456...' in the same suit).\rFind out whether the player is able to play the whole hand given.\re.g. [Spade A, Spade K, Spade Q, Diamond Q, Heart Q] return false.\r       [Spade A, Spade K, Spade Q, Diamond Q, Heart Q, Club Q] return true.", "k": ["year exp", "spade", "interviewed at cambridge", "cards", "diamond"]}
{"i": "4859154196856832", "t": "you are given N (1<=N<=20000) squares on X-Y plane. Your task is to find the area which is\rcommon to all the squares (Area of intersection of all the squares)\rInput\rFirst line contain T the number of test cases. Then T test cases follow. First line of each test case\rcontains N, the number of squares Each of following N line contains 3 integer (X, Y, L) cordinate\rof lower left vertex and size of the square.\r-10^9<=X,Y<=10^9 1<=L<=10^9 for java code", "k": ["squares", "test cases", "test cases follow", "test", "line"]}
{"i": "5702357208793088", "t": "Identifying if all the elements of a set (in enterity) is present in a list of sets.\r For example checking for set1 = {1,2} in {1,2,3}, {5,6} should return true as {1,2} is present in {1,2,3}. Similiary it will be true for {1,2,8,9}, {1,2,4}\r But checking for {1,2} in {1,5,6}, {2,3,1} should return false as {1,5,6} does not contain all elements of {1,2} 2 is missing", "k": ["list of sets", "present", "set", "sets", "identifying"]}
{"i": "5743114032513024", "t": "Problem Statement\r Jane's two little cousins are visiting her for the holidays. As you may know, children love candy, so Jane has bought several boxes of sweets for them. Each box contained an assorted collection of candy of different types. \r At some point Jane realized that giving each child some of the boxes is not a good idea: if they receive different candies, it will certainly cause a quarrel. Therefore, Jane decided to open all the boxes, take out all the sweets and distribute them evenly into two plastic bags. \r Of course, distributing a pile of assorted candies evenly may not always be possible. Sometimes it happens that the number of pieces of some particular type of candy is odd. In that case Jane will eat one of those sweets and only then will she distribute the rest of them evenly into the bags. \r You are given the String[] boxes. Each element of boxes describes the contents of one of the boxes Jane bought. Each character in each element of boxes represents one piece of candy. Equal characters are candies of the same type: e.g., all 'B's are identical bonbons and all 'L's are identical lollipops. \r Compute and return the number of candies each child will receive.\r Definition\r Class:\tJanesCandyBags\rMethod:\tgetSize\rParameters:\tString[]\rReturns:\tint\rMethod signature:\tint getSize(String[] packets)\r(be sure your method is public)\r  Constraints\r-\tboxes will contain between 1 and 50 elements, inclusive.\r-\tEach element of boxes will contain between 1 and 50 characters, inclusive.\r-\tEach character in boxes will be an uppercase letter of the English alphabet ('A'-'Z').\r  Examples / Test cases\r 0)\t\r {\"FOO\", \"BAR\", \"BAZ\", \"TOPCODER\"}\r Returns: 5\r In this case Jane will eat the 7 candies that only occur once in the entire collection. The remaining 10 candies can be split evenly: each bag will contain two 'O's, one 'A', one 'B', and one 'R'. Thus, each child will receive 5 candies.\r 1)\t\r {\"X\"}\r Returns: 0\r Jane will eat the only piece of candy. Then she will give each child an empty bag.\r 2)\t\r {\"GIVING\", \"CANDY\", \"TO\", \"CHILDREN\", \"CANNOT\", \"BE\", \"CHALLENGING\", \"RIGHT\"}\r Returns: 17\r The candies in each bag here are: ACCDEGGHIILNNNORT\r 3)\t\r {\"WITHOUT\", \"IT\", \"IM\", \"JUST\", \"ESPR\"}\r Returns: 5\r 4)\t\r {\"PHQGHUMEAYLNLFDXFIRCVSCXGGBWKFNQDUXWFNFOZVSRTKJPRE\",\r \"PGGXRPNRVYSTMWCYSYYCQPEVIKEFFMZNIMKKASVWSRENZKYCXF\",\r \"XTLSGYPSFADPOOEFXZBCOEJUVPVABOYGPOEYLFPBNPLJVRVIPY\",\r \"AMYEHWQNQRQPMXUJJLOOVAOWUXWHMSNCBXCOKSFZKVATXDKNLY\",\r \"JYHFIXJSWNKKUFNUXXZRZBMNMGQOOKETLYHNKOAUGZQRCDDIUT\",\r \"EIOJWAYYZPVSCMPSAJLFVGUBFAAOVLZYLNTRKDCPWSRTESJWHD\",\r \"IZCOBZCNFWLQIJTVDWVXHRCBLDVGYLWGBUSBMBORXTLHCSMPXO\",\r \"HGMGNKEUFDXOTOGBGXPEYANFETCUKEPZSHKLJUGGGEKJDQZJEN\",\r \"PEVQGXIEPJSRDZJAZUJL\"}\r Returns: 203", "k": ["problem statement jane", "statement jane", "problem statement", "jane", "boxes"]}
{"i": "5735558386024448", "t": "java program to interchage continous vowels in a string\rex:vowels\rbecomes vewols\rcontinuous becomes cintonouuus", "k": ["interchage continous vowels", "java program", "continuous becomes cintonouuus", "program to interchage", "interchage continous"]}
{"i": "5633499756232704", "t": "write a java program to solve sum of first three numbers is equal to sum of last three numbers.\rString str=\"123\" 1+2+3 and 3+2+1\rString str=\"678786\"\rString str=\"1b8\" not equal.", "k": ["string str", "write a java", "solve sum", "java program", "program to solve"]}
{"i": "5661458114281472", "t": "Create a CostDomainObject named as CostDTO (like Data transfer object or value object) with\r three attributes, costId as type String and costAmout as type BigDecimal, effectiveDate as Date.\r Override equals and hashcode methods based on costId.\r Create Interface CostCalculator taking above CostDTO object as 2 Arguments\r 1) CostDTO add(CostDTO arg1, CostDTO arg2);\r 2) CostDTO subtract(CostDTO arg1, CostDTO arg2);\r Implement the above 2 methods. You are creating those methods to sum up or subtract cost\r amounts based on costId.\r Throw a checked exception when the costIds are not the same.\r Mostly what I am looking for is how you test your code. This is important as you will be\r re-factoring/rewriting existing code or going to enhance existing functionality. We try to do test\r first development", "k": ["data transfer object", "type string", "effectivedate as date", "data transfer", "string and costamout"]}
{"i": "5687205906350080", "t": "Write a program to generate the all possible combinations of a number?\rExample: If input is 123, output is 123,132,213,231,312,321.", "k": ["write a program", "program to generate", "write", "number", "program"]}
{"i": "5745795300065280", "t": "given a string of number, you can add a + or * sign between any two numbers, find the maximum value you can get\rex. s = \"89\" --> 8 * 9 = 72\rint maxNumber(String s){}", "k": ["int maxnumber", "find the maximum", "string", "string of number", "sign"]}
{"i": "5697722133774336", "t": "Given string a and string b, find all the occurences of the anagrams of a in b.", "k": ["find", "string", "occurences", "anagrams"]}
{"i": "5671497734553600", "t": "Game of Death:\r  Implement an algorithm that produces the next move in the game of death.\rBasically given a two dimensional array it will have either values 1 (live cell) or 0 (dead cell)\r 1. A Live cell  will live only if it has two or three live neighbors All other cases die.\r 2. A dead cell with exactly three live neighbors will live otherwise no change, dead\r Transform the array by using above two rules", "k": ["game of death", "implement an algorithm", "death", "algorithm that produces", "live"]}
{"i": "5629505705082880", "t": "", "k": []}
{"i": "5731729282170880", "t": "A new species has been discovered and we are trying to understand their form of communication. So, we start by identifying their alphabet. Tough Mr. Brown managed to steal a vocabulary that has words in it in ascending order and a team already identified the letters. So, we have now ordered words as sequences of numbers, print every letter once in ascending order. \r [3,2]\r[4,3,2]\r[4,1,1]\r[1, 2]\r[1, 1]\r alphabet: [3, 4, 2, 1]", "k": ["form of communication", "understand their form", "ascending order", "communication", "tough mr. brown"]}
{"i": "5752982256746496", "t": "Consider an implementation of Strings consisting of an array where the first element of the array indicates the length of the String and the next elements represent the value of the ASCII characters in the String. Implement String concatenation and discuss shortcomings of this operation under this implementation of Strings.", "k": ["ascii characters", "implement string concatenation", "strings consisting", "elements represent", "implementation of strings"]}
{"i": "6201187863887872", "t": "Suppose that there exists a service to fetch Facebook posts through an interface defined by you, design the Facebook wall feed.", "k": ["facebook wall feed", "fetch facebook posts", "wall feed", "fetch facebook", "facebook posts"]}
{"i": "5075287957045248", "t": "Given an array of ints and a value X, find wether there are 3 elements in the array such that their sum is X (return true/false).", "k": ["return true", "find wether", "false", "array of ints", "find"]}
{"i": "5649321476227072", "t": "Given two vectors that might be sparse, calculate their Dot product. You can assume any data structure to represent the vectors.", "k": ["calculate their dot", "dot product", "dot", "sparse", "calculate"]}
{"i": "5084886537863168", "t": "Given a matrix of characters where '_' represents an empty space, 'T' is a tree and 'H' is a house and a coordinate of that matrix, find the sum of the minimum distances from that coordinate to each house when considering that you can move through empty spaces and houses but not through trees.", "k": ["find the sum", "characters where represents", "minimum distances", "empty space", "represents an empty"]}
{"i": "5192246493184000", "t": "Reverse a linked list.", "k": ["reverse a linked", "linked list", "reverse", "list", "linked"]}
{"i": "4810205125672960", "t": "Given two tree nodes and the root of a tree, find the distance between both nodes in the tree.", "k": ["find the distance", "tree nodes", "tree", "find", "nodes"]}
{"i": "5189358664548352", "t": "Given a String that contains parenthesis, remove the least amount of parenthesis from it such that it becomes balanced.", "k": ["string", "remove", "balanced", "amount of parenthesis", "parenthesis"]}
{"i": "5740965877776384", "t": "Implement an algorithm to determine if a string has all unique characters. What if you can not use additional data structures?\r My version of code is this,static boolean giveresult(String s)\r\n    {\r\n        boolean answer=true;\r\n        for(int i=0;i<s.length();i++)\r\n        {\r\n          char x = s.charAt(i);\r\n          if(s.substring(i+1).contains(x+\"\"))\r\n          {answer=false;\r\n            break;\r\n          }\r\n        }\r\n        return answer;\r\n    }Can I know what would be the time complexity.?", "k": ["implement an algorithm", "unique characters", "algorithm to determine", "additional data structures", "answer"]}
{"i": "5631172018176000", "t": "Implement an algorithm to determine if a string has all unique characters. What if you can not use additional data structures?\r My version of code is this,\rstatic boolean giveresult(String s)\r    {\r        boolean answer=true;\r        for(int i=0;i<s.length();i++)\r        {\r          char x = s.charAt(i);\r          if(s.substring(i+1).contains(x+\"\"))\r          {answer=false;\r            break;\r          }\r        }\r        return answer;\r    }\r Can I know what would be the time complexity.?", "k": ["implement an algorithm", "unique characters", "algorithm to determine", "additional data structures", "answer"]}
{"i": "5695982537801728", "t": "How would you store very large numbers that can't be store in a regular Integer or BigInteger, and make calculations", "k": ["integer or biginteger", "regular integer", "make calculations", "large numbers", "integer"]}
{"i": "5711956058046464", "t": "Design an application for people to find a place near them where they can join a team to play their favorite sport. Exp.  Soccer teams open to join that are scheduled to play at a certain time and place. The application would search for the available teams to join within certain area playing within some given time period,", "k": ["favorite sport", "people to find", "join", "design", "sport"]}
{"i": "5722238880841728", "t": "Automation Testing Question:\rHow do you verify a search result list which changes consistently based on each search word and filters?\r For example, how do you make sure that the list is sorted based on price or rating or etc without any identical list to compare with?  Since providing an identical list as Test Input for each word is not the best approach.", "k": ["automation testing question", "testing question", "automation testing", "search result list", "search result"]}
