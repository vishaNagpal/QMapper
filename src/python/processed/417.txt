{"i": "11253841", "t": "find the index of the highest bit set of a 32-bit number (without loops obviously)", "k": ["highest bit set", "find the index", "highest bit", "bit set", "number"]}
{"i": "11222942", "t": "Given a binary Search tree and a Node, How would you transform the tree to make that Node as root.The resulting tree should be a BST.", "k": ["binary search tree", "root.the resulting tree", "binary search", "search tree", "root.the resulting"]}
{"i": "11225908", "t": "Given two version numbers as string (can be very long) write a function which returns 1 if first one is latest, -1 if second one is latest and 0 if they are equal.\rEx: 1.2.0.4.5\r      1.2.1\r We have write our split method with period as delimeter and we have to handle all the malformed version numbers like 1..2.0 etc and similar other exceptions", "k": ["function which returns", "version numbers", "malformed version numbers", "numbers as string", "latest"]}
{"i": "11224913", "t": "a) You have a package repository in which there are dependencies between packages for building like package A has to be built before package B. If you are given dependencies between the packages and package name x, we have find the build order for x.\rEx: A \u2192 {B,C}\r     B \u2192 {E}\r     C \u2192 {D,E,F}\r     D \u2192 {}\r     F \u2192  {}\r     G \u2192 {C}\r For package A, build order is E B F D C A (may not unique)\r Given a function Set<Package> getDependencies (Package packageName) which returns a set of dependencies for a given package name, write a method List<Package> getBuildOrder(Package packageName) which returns the build order\r b) How would you handle cyclic dependencies (Algo only)", "k": ["package", "build order", "package repository", "package packagename", "dependencies"]}
{"i": "11227927", "t": "Given an array of stock prices from day 0 to N-1 of a company X, we have to find the max loss that is possible. Loss occurs if stock is bought at higher price and sold at lower price.\rEx:  1 2 3 7 5 8 9 4 6 10 12  (algo and code including  main)\rMax Loss is 9 - 4 = 5 (Possible losses are 8-4 = 4, 7-5 = 2 etc). Max difference between stock price is 12 - 1 = 11 but max loss is 9 -4 = 5", "k": ["max loss", "loss", "max", "stock", "price"]}
{"i": "11224912", "t": "Find the angle between hours hand and minutes hand.", "k": ["find the angle", "angle between hours", "hours hand", "minutes hand", "find"]}
{"i": "11225907", "t": "Given a string, we have to find all the unique words present in the string. Assume that words are delimited by space character and we have to write our own split function. We have to handle all the edge cases", "k": ["unique words present", "string", "unique words", "words present", "words"]}
{"i": "11229916", "t": "You are given an infinitely long array of integers in which some part of the array is sorted and all other entries contain terminating character ($).  Given a number how will you search in the given array. What is the complexity of the search operation if the number is not present in the array\r Ex: 1 2 3 4 5 6 7 8 9 $ $ $ $ $ $ $ $ $ $ $ \u2026.........................", "k": ["infinitely long array", "terminating character", "infinitely long", "entries contain terminating", "long array"]}
{"i": "11231931", "t": "You are given two strings, delete the letters of second string from first string and print the resultant string\rEx: Input: Hello, Hai   Output: ello", "k": ["hai output", "delete the letters", "print the resultant", "resultant string", "input"]}
{"i": "11231930", "t": "Reverse the words in a string\rEx: Input: \u201cThis is Java\u201d         Output: Java is This", "k": ["reverse the words", "input", "output", "java", "reverse"]}
{"i": "11224910", "t": "Two numbers are given in the form of linked list with most significant number as the head, we have to add them and return the resulting number as a linked list again.\rEx: Input: 1-->2-->3     4-->5             Output: 1-->6-->8", "k": ["linked list", "return the resulting", "significant number", "resulting number", "form of linked"]}
{"i": "11224909", "t": "Given a binary tree and a node in the binary tree, find the next node in inorder traversal", "k": ["inorder traversal", "binary tree", "node in inorder", "binary", "tree"]}
{"i": "11228927", "t": "Find the min depth from root to leaf in binary tree\rEx:                     1\r                    2        3\r               4     5   \rOutput: 1 (since leaf 3 is closest to root)", "k": ["find the min", "output", "min depth", "binary tree", "find"]}
{"i": "11231922", "t": "A binary tree is given we need to print vertical sums of nodes. for example1    2      3        4     5\r\n\r\n  |      |       5        |     |\r\n  |      |     / |       \\ |     |\r\n  |      |   /   |        8     |\r\n  |      | /     |       / |    \\|\r\n  |      4      |    /    |   10\r\n  |    / |  \\    9        |     |\r\n  |  /   |      \\          |     |\r\n  7     |      6               |\r\n  |      |      |          |     |\r\n  |      |      |          |     |\r\n  -----------------------------------------------\r\n  7     4     20       8   10Here we need to print sum 7,4,20,8,10.", "k": ["print vertical sums", "binary tree", "print vertical", "vertical sums", "sums of nodes"]}
{"i": "11231892", "t": "There is sorted integer metrics(5,5).  Write the program which through we can find the any integer value on this metrics.Search(int searchItem,M(5,5).", "k": ["sorted integer metrics", "integer metrics", "sorted integer", "metrics", "int searchitem,m"]}
{"i": "11226920", "t": "Convert the integer in to string representation of the int value. Example : Like 41 = Forty one, 441 = Fore hundred Forty One , 3441 = Three thousand  Fore hundred Forty One....", "k": ["fore hundred forty", "convert the integer", "hundred forty", "string representation", "fore hundred"]}
{"i": "11229676", "t": "assume you have a program which constantly crashes at some place. Yet, if you insert a 'printf' statement at this place, it magically begins to work.\rWhat does this indicate ? How can you trace the problem ?", "k": ["program which constantly", "constantly crashes", "place", "assume", "begins to work"]}
{"i": "11208883", "t": "Data structure used in parking lot.", "k": ["data structure", "parking lot", "data", "lot", "structure"]}
{"i": "11208881", "t": "Design a parking lot where cars and motorcycles can be parked.", "k": ["design a parking", "parking lot", "lot where cars", "cars and motorcycles", "design"]}
{"i": "11205750", "t": "how exactly virtual table and virtual pointer functions.", "k": ["virtual pointer functions", "pointer functions", "virtual table", "virtual pointer", "functions"]}
{"i": "11206741", "t": "write a program to reverse a linked list.", "k": ["write a program", "linked list", "program to reverse", "reverse a linked", "write"]}
{"i": "11205749", "t": "create 4 equilateral triangle using 6 match sticks.", "k": ["match sticks", "create", "equilateral triangle", "equilateral", "match"]}
{"i": "11208728", "t": "Convert a binary search tree to a sorted doubly linked list in O(n) time and in place. Manipulate the existing tree. Donot create a new tree.", "k": ["sorted doubly linked", "doubly linked list", "binary search tree", "convert a binary", "binary search"]}
{"i": "11208727", "t": "Find the maximum continuous sum in an array. The array will contain at least one positive integer. Report the actual sequence. If there are multiple sequences report any one.", "k": ["maximum continuous sum", "find the maximum", "maximum continuous", "continuous sum", "find"]}
{"i": "11208726", "t": "Sort a link list using merge sort.", "k": ["link list", "list using merge", "merge sort", "sort a link", "sort"]}
{"i": "11207729", "t": "Design and implement a garbage collector in c++.", "k": ["design and implement", "implement a garbage", "garbage collector", "design", "implement"]}
{"i": "11208682", "t": "Brief abour AVL tree", "k": ["abour avl tree", "avl tree", "abour avl", "avl", "tree"]}
{"i": "11207679", "t": "remove duplicates in an array.", "k": ["remove duplicates", "remove", "array", "duplicates"]}
{"i": "11210676", "t": "given a value 'N', generate all possible valid combinations of parentheses.\rexample: N=2\rvalid parentheses: ()(), (())", "k": ["parentheses", "valid combinations", "generate", "valid parentheses", "combinations of parentheses"]}
{"i": "11209677", "t": "check if two strings are anagrams or not", "k": ["strings are anagrams", "check", "strings", "anagrams"]}
