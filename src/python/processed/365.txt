{"i": "14004693", "t": "There's a function named BiasedRandom which returns '0' with probability 'P' and returns '1' with probability '(1-P)'.\r So define a Random function which surely returns '0' and '1' both with probability 0.5 using the above mentioned function(BiasedRandom).\r Note: \r-The BiasedRandom function can be used any times in the Random function as you want.\r-And on each call of BiasedFunction from the Random function returns '0' and '1' with same probability(say P and 1-P resp.) on single run.", "k": ["random function", "random function returns", "probability", "random", "returns"]}
{"i": "14025679", "t": "There's an array of length N. For every element of array, say 'X' , find a element 'Y' in the same array such that,\r 1. Value of Y<Value of X\r2. Position of Y<Position of X\r3. Position of Y should be as large as possible.\r Note: If there's no such element 'Y' fro particular 'X' return NULL. Also give algorithm with time complexity less than O(N*N).", "k": ["position", "array", "element", "array of length", "length"]}
{"i": "14029675", "t": "Without using extra space place all zeroes to left and 1's to right from an array of Zero's and 1's as below\r011001   ans. 000111public class Zeros_ones_New {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] arrZerosOnes = { 0,1,0,1,0,1,1 };\r\n\t\tint len = arrZerosOnes.length;\r\n\t\tint firstOne = -1;\r\n\t\tint lastZero = len;\r\n\t\tfor (int i = 0; i < len; i++) {\r\n\t\t\tif (arrZerosOnes[i] == 1) {\r\n\t\t\t\tfirstOne = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (int u = len - 1; u > -1; u--) {\r\n\t\t\tif (arrZerosOnes[u] == 0) {\r\n\t\t\t\tlastZero = u;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\t\t\r\n\t\tif (firstOne > -1 && lastZero<len) {\r\n\t\t\twhile (firstOne<lastZero) {\r\n\r\n\t\t\t\tfor (int j = firstOne; j < lastZero; j++) {\r\n\t\t\t\t\tif (((j + 1) <= lastZero) && (j == firstOne)\r\n\t\t\t\t\t\t\t&& (arrZerosOnes[j + 1] == 0)) {\r\n\t\t\t\t\t\tarrZerosOnes[j] = 0;\r\n\t\t\t\t\t\tarrZerosOnes[j + 1] = 1;\r\n\t\t\t\t\t\tfirstOne++;\r\n\t\t\t\t\t\t/*if ((j + 1) == lastZero) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}*/\r\n\t\t\t\t\t} else if (((j + 1) <= lastZero) && (arrZerosOnes[j] == 1)\r\n\t\t\t\t\t\t\t&& (arrZerosOnes[j + 1] == 0)) {\r\n\t\t\t\t\t\tarrZerosOnes[j] = 0;\r\n\t\t\t\t\t\tarrZerosOnes[j + 1] = 1;\r\n\t\t\t\t\t\tif ((j + 1) == lastZero) {\r\n\t\t\t\t\t\t\tlastZero--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (int t = 0; t < len; t++) {\r\n\t\t\tSystem.out.print(arrZerosOnes[t]);\r\n\t\t}\r\n\t}\r\n\r\n}", "k": ["extra space place", "arrzerosones", "extra space", "space place", "place all zeroes"]}
{"i": "14026672", "t": "How to check a whether a very big number n^n = k", "k": ["big number", "check", "big", "number"]}
{"i": "14029674", "t": "How to most efficiently find duplicates/commons in two sorted arrays of integers. No extra space should be used.  My answer as belowpublic class Duplicate {\r\n\r\n\t//private HashSet<Integer> duplicates = new HashSet<Integer>();\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tint a[] = {0,2,2,4,6,8,8,9,9,10};\r\n\t\tint b[] = {0,3,3,4,8,8,10,12};\r\n\t\t\r\n\t\tnew Duplicate().mergeAndCheck(a, b);\r\n\r\n\t}\r\n\t\r\n\tprivate void mergeAndCheck(int[] arr1, int[] arr2){\r\n\t\tint len1 = arr1.length;\r\n\t\tint len2 = arr2.length;\r\n\t\t\r\n\t\tint pointArr1 = 0;\r\n\t\tint pointArr2 = 0;\r\n\t\twhile((pointArr1<len1)&&(pointArr2<len2)){\r\n\t\t\tif(arr1[pointArr1]<=arr2[pointArr2]){\r\n\t\t\t\tif((arr1[pointArr1]==arr2[pointArr2])){\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(pointArr1==0){\r\n\t\t\t\t\t\tSystem.out.print(\" \"+arr1[pointArr1]);\r\n\t\t\t\t\t}else if(arr1[pointArr1]!=arr1[pointArr1-1]){\r\n\t\t\t\t\t\tSystem.out.print(\" \"+arr1[pointArr1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//duplicates.add(arr1[pointArr1]);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tpointArr1++;\r\n\t\t\t\t\r\n\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tpointArr2++;\r\n\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/*for(Integer iNT:duplicates){\r\n\t\t\t//System.out.print(\"  \"+iNT);\r\n\t\t}*/\r\n\t\t\r\n\t}\r\n\r\n}", "k": ["efficiently find duplicates", "efficiently find", "sorted arrays", "find duplicates", "int"]}
{"i": "14032668", "t": "Does it always happen that stack always grows downwards & heap grows upwards?\rIf its so, then how does OS keeps the heap area protected from the interference of the stack & vice-versa?\rIf its not, then what factors affect it? OS version ? Compiler? Anything else??", "k": ["heap grows upwards", "grows upwards", "heap grows", "grows", "upwards"]}
{"i": "14033668", "t": "Given three strings , find how many ways can the third string be generated by combining susequences of first and second strings in any order.\rcombining eg:\u201cabc\u201d and \u201cde\u201d can yield adebc,abdce,abcde etc...", "k": ["combining susequences", "find", "order", "strings", "generated by combining"]}
{"i": "14022665", "t": "Extend the JavaScript Array object by adding a method that removes duplicates.", "k": ["javascript array object", "javascript array", "array object", "extend the javascript", "removes duplicates"]}
{"i": "14004678", "t": "Write a multithreaded blocking version of Bounded Queue.\rThere are writers which fill up the queue, and then readers which empty the queue. \rIf q is full, writer should block. If Q is empty readers should block.\rThe Queue size is finite... (its bounded). \rMaximize parallelism, minimize resource usage etc...", "k": ["multithreaded blocking version", "write a multithreaded", "multithreaded blocking", "blocking version", "queue"]}
{"i": "14021664", "t": "Give output for the following code#include<stdio.h>\r\n\r\nvoid main()\r\n{\r\n    int i = 5;\r\n    printf(\"%d\\n\",i++ + ++i);\r\n    printf(\"%d\\n\",i++ + ++i + i++ + i++);\r\n    printf(\"%d\\n\",++i + i++ + ++i + i++);\r\n}Please give the output with os and compiler u used with proper explanation. Getting unexpected answers..... help !!!\rThis is old question posed by senior student.", "k": ["give output", "void main", "printf", "proper explanation", "give the output"]}
{"i": "14002670", "t": "Program to create a game of SUDOKU.", "k": ["game of sudoku", "program to create", "sudoku", "create a game", "program"]}
{"i": "13999662", "t": "Design packman game.", "k": ["design packman game", "design packman", "packman game", "design", "game"]}
{"i": "13998662", "t": "Design LRU cache data structure", "k": ["design lru cache", "lru cache data", "cache data structure", "design lru", "lru cache"]}
{"i": "13992664", "t": "Convert relative path to absolute path.\rfor example:/windows/abs/../temp/new/.../the output should be:/windows/temp", "k": ["convert relative path", "convert relative", "windows", "temp", "relative path"]}
{"i": "13986665", "t": "Design saveEmail(), retrieveEMail() for our email system", "k": ["design saveemail", "retrieveemail", "email system", "design", "saveemail"]}
{"i": "13992663", "t": "Design a file system for our operation system", "k": ["design a file", "file system", "operation system", "design", "system"]}
{"i": "13993663", "t": "How would you know whether web server is freezing or not(a lot of queries then it may get stuck)?", "k": ["web server", "server is freezing", "lot of queries", "stuck", "web"]}
{"i": "13984664", "t": "System that can have 10K requests in a second. We need to save only the number of queries in a table. After 5 year user may want to see 5 years old history. user may want to see monthly history, history per yer, or per minute, per second(zoom in, zoom out). How would you design database.", "k": ["system", "requests", "history", "zoom", "user"]}
{"i": "13990664", "t": "10 000 integer numbers in an array, Each number is 10 bit. Sort the array", "k": ["integer numbers", "bit", "array", "integer", "sort the array"]}
{"i": "13996662", "t": "Given n x m array. Print the array in clock wise. \rLike: \r    First row of array,\r    Last Column\r    Last Row\r    First Column", "k": ["array", "column", "row", "clock wise", "print"]}
{"i": "13974671", "t": "How to print the outside frame of a binary tree. \r 1. the order is top to down, left to right, then down to top\r2. print all leftest node and rightest nodes\r3. print all leaf nodes\r4. print all nodes which only have 1 leaf100\r\n           50                               150\r\n     24          57                 130\r\n  12     30          60                 132e.g: \rthe output should be \r100, 50, 24, 12, 30, 57, 60, 130, 132, 150", "k": ["binary tree", "print", "tree", "nodes", "frame"]}
{"i": "13982671", "t": "How will you find out size of a variable without using sizeof ();", "k": ["find out size", "sizeof", "find", "size", "variable"]}
{"i": "13899667", "t": "Can you implement a java application without Abstraction?", "k": ["application without abstraction", "abstraction", "implement a java", "java application", "implement"]}
{"i": "13961670", "t": "Major difference between Forward and sendRedirect apart from browser calls sendRedirect and container process forward request?", "k": ["process forward request", "container process forward", "browser calls sendredirect", "forward request", "major difference"]}
{"i": "13970662", "t": "What is volatile variable?", "k": ["volatile variable", "variable", "volatile"]}
{"i": "13913684", "t": "What is the difference when ArrayList is synchronized and used with respect to vector is there any difference?\rFocus point is both will be in synchronized state whats happens internally.", "k": ["respect to vector", "difference when arraylist", "difference", "arraylist is synchronized", "synchronized state"]}
{"i": "13909697", "t": "Where is address of function pointer stored.?", "k": ["function pointer stored.", "pointer stored.", "address of function", "function pointer", "stored."]}
{"i": "13871851", "t": "Given an array of positive and negative integers find the first subarray with zero sum? no 0's will be a part of the input array and handle all the edge cases", "k": ["negative integers find", "positive and negative", "negative integers", "integers find", "sum"]}
{"i": "13954667", "t": "Q: print out all leaf node path with non recursive method\rThe structure of node is *NOT* binary tree, is just a normal tree.// print out all leaf node path \r\n    //              12\r\n    //    4         8        22\r\n    //1  2  3     9     18   24the output is like: \r 12, 4, 1,\r12, 4, 2,\r12, 4, 3,\r12, 4, 8, 9,\r12, 4, 8, 22, 18,\r12, 4, 8, 22, 24,", "k": ["leaf node path", "leaf node", "node path", "binary tree", "normal tree."]}
{"i": "13891667", "t": "While developing a globally distributed web application \rthat needs to manage time records for system internals \rand for end-user usage (e.g. what date/time do i have the appointment?)\rwhat best practices would you implement?\rHints - Server time versus user time. Distributed servers. Several timezones. Daylight savings time etc.", "k": ["globally distributed web", "distributed web application", "manage time records", "end-user usage", "developing a globally"]}
